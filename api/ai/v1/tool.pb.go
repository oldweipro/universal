// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: api/ai/v1/tool.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 工具类型枚举
type ToolType int32

const (
	ToolType_TOOL_TYPE_UNSPECIFIED ToolType = 0
	ToolType_TOOL_TYPE_FUNCTION    ToolType = 1 // 功能工具
	ToolType_TOOL_TYPE_API         ToolType = 2 // API工具
	ToolType_TOOL_TYPE_SCRIPT      ToolType = 3 // 脚本工具
	ToolType_TOOL_TYPE_SERVICE     ToolType = 4 // 服务工具
	ToolType_TOOL_TYPE_DATABASE    ToolType = 5 // 数据库工具
	ToolType_TOOL_TYPE_FILE        ToolType = 6 // 文件工具
	ToolType_TOOL_TYPE_NETWORK     ToolType = 7 // 网络工具
)

// Enum value maps for ToolType.
var (
	ToolType_name = map[int32]string{
		0: "TOOL_TYPE_UNSPECIFIED",
		1: "TOOL_TYPE_FUNCTION",
		2: "TOOL_TYPE_API",
		3: "TOOL_TYPE_SCRIPT",
		4: "TOOL_TYPE_SERVICE",
		5: "TOOL_TYPE_DATABASE",
		6: "TOOL_TYPE_FILE",
		7: "TOOL_TYPE_NETWORK",
	}
	ToolType_value = map[string]int32{
		"TOOL_TYPE_UNSPECIFIED": 0,
		"TOOL_TYPE_FUNCTION":    1,
		"TOOL_TYPE_API":         2,
		"TOOL_TYPE_SCRIPT":      3,
		"TOOL_TYPE_SERVICE":     4,
		"TOOL_TYPE_DATABASE":    5,
		"TOOL_TYPE_FILE":        6,
		"TOOL_TYPE_NETWORK":     7,
	}
)

func (x ToolType) Enum() *ToolType {
	p := new(ToolType)
	*p = x
	return p
}

func (x ToolType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToolType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_tool_proto_enumTypes[0].Descriptor()
}

func (ToolType) Type() protoreflect.EnumType {
	return &file_api_ai_v1_tool_proto_enumTypes[0]
}

func (x ToolType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToolType.Descriptor instead.
func (ToolType) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{0}
}

// 工具分类枚举
type ToolCategory int32

const (
	ToolCategory_TOOL_CATEGORY_UNSPECIFIED   ToolCategory = 0
	ToolCategory_TOOL_CATEGORY_PRODUCTIVITY  ToolCategory = 1 // 生产力工具
	ToolCategory_TOOL_CATEGORY_DEVELOPMENT   ToolCategory = 2 // 开发工具
	ToolCategory_TOOL_CATEGORY_ANALYSIS      ToolCategory = 3 // 分析工具
	ToolCategory_TOOL_CATEGORY_COMMUNICATION ToolCategory = 4 // 通讯工具
	ToolCategory_TOOL_CATEGORY_CONTENT       ToolCategory = 5 // 内容工具
	ToolCategory_TOOL_CATEGORY_SYSTEM        ToolCategory = 6 // 系统工具
	ToolCategory_TOOL_CATEGORY_UTILITY       ToolCategory = 7 // 实用工具
)

// Enum value maps for ToolCategory.
var (
	ToolCategory_name = map[int32]string{
		0: "TOOL_CATEGORY_UNSPECIFIED",
		1: "TOOL_CATEGORY_PRODUCTIVITY",
		2: "TOOL_CATEGORY_DEVELOPMENT",
		3: "TOOL_CATEGORY_ANALYSIS",
		4: "TOOL_CATEGORY_COMMUNICATION",
		5: "TOOL_CATEGORY_CONTENT",
		6: "TOOL_CATEGORY_SYSTEM",
		7: "TOOL_CATEGORY_UTILITY",
	}
	ToolCategory_value = map[string]int32{
		"TOOL_CATEGORY_UNSPECIFIED":   0,
		"TOOL_CATEGORY_PRODUCTIVITY":  1,
		"TOOL_CATEGORY_DEVELOPMENT":   2,
		"TOOL_CATEGORY_ANALYSIS":      3,
		"TOOL_CATEGORY_COMMUNICATION": 4,
		"TOOL_CATEGORY_CONTENT":       5,
		"TOOL_CATEGORY_SYSTEM":        6,
		"TOOL_CATEGORY_UTILITY":       7,
	}
)

func (x ToolCategory) Enum() *ToolCategory {
	p := new(ToolCategory)
	*p = x
	return p
}

func (x ToolCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToolCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_tool_proto_enumTypes[1].Descriptor()
}

func (ToolCategory) Type() protoreflect.EnumType {
	return &file_api_ai_v1_tool_proto_enumTypes[1]
}

func (x ToolCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToolCategory.Descriptor instead.
func (ToolCategory) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{1}
}

// 安全级别枚举
type SecurityLevel int32

const (
	SecurityLevel_SECURITY_LEVEL_UNSPECIFIED SecurityLevel = 0
	SecurityLevel_SECURITY_LEVEL_PUBLIC      SecurityLevel = 1 // 公开
	SecurityLevel_SECURITY_LEVEL_RESTRICTED  SecurityLevel = 2 // 受限
	SecurityLevel_SECURITY_LEVEL_PRIVATE     SecurityLevel = 3 // 私有
	SecurityLevel_SECURITY_LEVEL_ADMIN       SecurityLevel = 4 // 管理员
)

// Enum value maps for SecurityLevel.
var (
	SecurityLevel_name = map[int32]string{
		0: "SECURITY_LEVEL_UNSPECIFIED",
		1: "SECURITY_LEVEL_PUBLIC",
		2: "SECURITY_LEVEL_RESTRICTED",
		3: "SECURITY_LEVEL_PRIVATE",
		4: "SECURITY_LEVEL_ADMIN",
	}
	SecurityLevel_value = map[string]int32{
		"SECURITY_LEVEL_UNSPECIFIED": 0,
		"SECURITY_LEVEL_PUBLIC":      1,
		"SECURITY_LEVEL_RESTRICTED":  2,
		"SECURITY_LEVEL_PRIVATE":     3,
		"SECURITY_LEVEL_ADMIN":       4,
	}
)

func (x SecurityLevel) Enum() *SecurityLevel {
	p := new(SecurityLevel)
	*p = x
	return p
}

func (x SecurityLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_tool_proto_enumTypes[2].Descriptor()
}

func (SecurityLevel) Type() protoreflect.EnumType {
	return &file_api_ai_v1_tool_proto_enumTypes[2]
}

func (x SecurityLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityLevel.Descriptor instead.
func (SecurityLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{2}
}

// 依赖类型枚举
type DependencyType int32

const (
	DependencyType_DEPENDENCY_TYPE_UNSPECIFIED  DependencyType = 0
	DependencyType_DEPENDENCY_TYPE_PREREQUISITE DependencyType = 1 // 前置依赖
	DependencyType_DEPENDENCY_TYPE_OPTIONAL     DependencyType = 2 // 可选依赖
	DependencyType_DEPENDENCY_TYPE_CONFLICT     DependencyType = 3 // 冲突依赖
)

// Enum value maps for DependencyType.
var (
	DependencyType_name = map[int32]string{
		0: "DEPENDENCY_TYPE_UNSPECIFIED",
		1: "DEPENDENCY_TYPE_PREREQUISITE",
		2: "DEPENDENCY_TYPE_OPTIONAL",
		3: "DEPENDENCY_TYPE_CONFLICT",
	}
	DependencyType_value = map[string]int32{
		"DEPENDENCY_TYPE_UNSPECIFIED":  0,
		"DEPENDENCY_TYPE_PREREQUISITE": 1,
		"DEPENDENCY_TYPE_OPTIONAL":     2,
		"DEPENDENCY_TYPE_CONFLICT":     3,
	}
)

func (x DependencyType) Enum() *DependencyType {
	p := new(DependencyType)
	*p = x
	return p
}

func (x DependencyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DependencyType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_tool_proto_enumTypes[3].Descriptor()
}

func (DependencyType) Type() protoreflect.EnumType {
	return &file_api_ai_v1_tool_proto_enumTypes[3]
}

func (x DependencyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DependencyType.Descriptor instead.
func (DependencyType) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{3}
}

// MCP服务器状态枚举
type McpServerStatus int32

const (
	McpServerStatus_MCP_SERVER_STATUS_UNSPECIFIED McpServerStatus = 0
	McpServerStatus_MCP_SERVER_STATUS_ACTIVE      McpServerStatus = 1 // 活跃
	McpServerStatus_MCP_SERVER_STATUS_INACTIVE    McpServerStatus = 2 // 非活跃
	McpServerStatus_MCP_SERVER_STATUS_ERROR       McpServerStatus = 3 // 错误
	McpServerStatus_MCP_SERVER_STATUS_MAINTENANCE McpServerStatus = 4 // 维护中
	McpServerStatus_MCP_SERVER_STATUS_DEPRECATED  McpServerStatus = 5 // 已弃用
)

// Enum value maps for McpServerStatus.
var (
	McpServerStatus_name = map[int32]string{
		0: "MCP_SERVER_STATUS_UNSPECIFIED",
		1: "MCP_SERVER_STATUS_ACTIVE",
		2: "MCP_SERVER_STATUS_INACTIVE",
		3: "MCP_SERVER_STATUS_ERROR",
		4: "MCP_SERVER_STATUS_MAINTENANCE",
		5: "MCP_SERVER_STATUS_DEPRECATED",
	}
	McpServerStatus_value = map[string]int32{
		"MCP_SERVER_STATUS_UNSPECIFIED": 0,
		"MCP_SERVER_STATUS_ACTIVE":      1,
		"MCP_SERVER_STATUS_INACTIVE":    2,
		"MCP_SERVER_STATUS_ERROR":       3,
		"MCP_SERVER_STATUS_MAINTENANCE": 4,
		"MCP_SERVER_STATUS_DEPRECATED":  5,
	}
)

func (x McpServerStatus) Enum() *McpServerStatus {
	p := new(McpServerStatus)
	*p = x
	return p
}

func (x McpServerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (McpServerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_tool_proto_enumTypes[4].Descriptor()
}

func (McpServerStatus) Type() protoreflect.EnumType {
	return &file_api_ai_v1_tool_proto_enumTypes[4]
}

func (x McpServerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use McpServerStatus.Descriptor instead.
func (McpServerStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{4}
}

// 健康级别枚举
type HealthLevel int32

const (
	HealthLevel_HEALTH_LEVEL_UNSPECIFIED HealthLevel = 0
	HealthLevel_HEALTH_LEVEL_HEALTHY     HealthLevel = 1 // 健康
	HealthLevel_HEALTH_LEVEL_WARNING     HealthLevel = 2 // 警告
	HealthLevel_HEALTH_LEVEL_CRITICAL    HealthLevel = 3 // 严重
	HealthLevel_HEALTH_LEVEL_UNKNOWN     HealthLevel = 4 // 未知
)

// Enum value maps for HealthLevel.
var (
	HealthLevel_name = map[int32]string{
		0: "HEALTH_LEVEL_UNSPECIFIED",
		1: "HEALTH_LEVEL_HEALTHY",
		2: "HEALTH_LEVEL_WARNING",
		3: "HEALTH_LEVEL_CRITICAL",
		4: "HEALTH_LEVEL_UNKNOWN",
	}
	HealthLevel_value = map[string]int32{
		"HEALTH_LEVEL_UNSPECIFIED": 0,
		"HEALTH_LEVEL_HEALTHY":     1,
		"HEALTH_LEVEL_WARNING":     2,
		"HEALTH_LEVEL_CRITICAL":    3,
		"HEALTH_LEVEL_UNKNOWN":     4,
	}
)

func (x HealthLevel) Enum() *HealthLevel {
	p := new(HealthLevel)
	*p = x
	return p
}

func (x HealthLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_tool_proto_enumTypes[5].Descriptor()
}

func (HealthLevel) Type() protoreflect.EnumType {
	return &file_api_ai_v1_tool_proto_enumTypes[5]
}

func (x HealthLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthLevel.Descriptor instead.
func (HealthLevel) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{5}
}

// 资源类型枚举
type ResourceType int32

const (
	ResourceType_RESOURCE_TYPE_UNSPECIFIED ResourceType = 0
	ResourceType_RESOURCE_TYPE_FILE        ResourceType = 1 // 文件
	ResourceType_RESOURCE_TYPE_DATABASE    ResourceType = 2 // 数据库
	ResourceType_RESOURCE_TYPE_API         ResourceType = 3 // API端点
	ResourceType_RESOURCE_TYPE_STREAM      ResourceType = 4 // 数据流
	ResourceType_RESOURCE_TYPE_MEMORY      ResourceType = 5 // 内存资源
	ResourceType_RESOURCE_TYPE_CACHE       ResourceType = 6 // 缓存资源
)

// Enum value maps for ResourceType.
var (
	ResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "RESOURCE_TYPE_FILE",
		2: "RESOURCE_TYPE_DATABASE",
		3: "RESOURCE_TYPE_API",
		4: "RESOURCE_TYPE_STREAM",
		5: "RESOURCE_TYPE_MEMORY",
		6: "RESOURCE_TYPE_CACHE",
	}
	ResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED": 0,
		"RESOURCE_TYPE_FILE":        1,
		"RESOURCE_TYPE_DATABASE":    2,
		"RESOURCE_TYPE_API":         3,
		"RESOURCE_TYPE_STREAM":      4,
		"RESOURCE_TYPE_MEMORY":      5,
		"RESOURCE_TYPE_CACHE":       6,
	}
)

func (x ResourceType) Enum() *ResourceType {
	p := new(ResourceType)
	*p = x
	return p
}

func (x ResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_tool_proto_enumTypes[6].Descriptor()
}

func (ResourceType) Type() protoreflect.EnumType {
	return &file_api_ai_v1_tool_proto_enumTypes[6]
}

func (x ResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceType.Descriptor instead.
func (ResourceType) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{6}
}

// 工具执行状态枚举
type ToolExecutionStatus int32

const (
	ToolExecutionStatus_TOOL_EXECUTION_STATUS_UNSPECIFIED ToolExecutionStatus = 0
	ToolExecutionStatus_TOOL_EXECUTION_STATUS_PENDING     ToolExecutionStatus = 1 // 待执行
	ToolExecutionStatus_TOOL_EXECUTION_STATUS_RUNNING     ToolExecutionStatus = 2 // 执行中
	ToolExecutionStatus_TOOL_EXECUTION_STATUS_SUCCESS     ToolExecutionStatus = 3 // 成功
	ToolExecutionStatus_TOOL_EXECUTION_STATUS_FAILED      ToolExecutionStatus = 4 // 失败
	ToolExecutionStatus_TOOL_EXECUTION_STATUS_TIMEOUT     ToolExecutionStatus = 5 // 超时
	ToolExecutionStatus_TOOL_EXECUTION_STATUS_CANCELLED   ToolExecutionStatus = 6 // 已取消
)

// Enum value maps for ToolExecutionStatus.
var (
	ToolExecutionStatus_name = map[int32]string{
		0: "TOOL_EXECUTION_STATUS_UNSPECIFIED",
		1: "TOOL_EXECUTION_STATUS_PENDING",
		2: "TOOL_EXECUTION_STATUS_RUNNING",
		3: "TOOL_EXECUTION_STATUS_SUCCESS",
		4: "TOOL_EXECUTION_STATUS_FAILED",
		5: "TOOL_EXECUTION_STATUS_TIMEOUT",
		6: "TOOL_EXECUTION_STATUS_CANCELLED",
	}
	ToolExecutionStatus_value = map[string]int32{
		"TOOL_EXECUTION_STATUS_UNSPECIFIED": 0,
		"TOOL_EXECUTION_STATUS_PENDING":     1,
		"TOOL_EXECUTION_STATUS_RUNNING":     2,
		"TOOL_EXECUTION_STATUS_SUCCESS":     3,
		"TOOL_EXECUTION_STATUS_FAILED":      4,
		"TOOL_EXECUTION_STATUS_TIMEOUT":     5,
		"TOOL_EXECUTION_STATUS_CANCELLED":   6,
	}
)

func (x ToolExecutionStatus) Enum() *ToolExecutionStatus {
	p := new(ToolExecutionStatus)
	*p = x
	return p
}

func (x ToolExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ToolExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_tool_proto_enumTypes[7].Descriptor()
}

func (ToolExecutionStatus) Type() protoreflect.EnumType {
	return &file_api_ai_v1_tool_proto_enumTypes[7]
}

func (x ToolExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ToolExecutionStatus.Descriptor instead.
func (ToolExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{7}
}

// MCP工具定义 - 增强版
type ToolInfo struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Name        string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                   // 工具名称
	Description string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                                                     // 工具描述
	Schema      string                 `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`                                                                               // 参数schema(JSON格式)
	McpServer   string                 `protobuf:"bytes,4,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`                                                        // MCP服务器标识
	Metadata    map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 工具元数据
	Enabled     bool                   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`                                                                            // 是否启用
	// 新增字段
	Type          ToolType               `protobuf:"varint,7,opt,name=type,proto3,enum=api.ai.v1.ToolType" json:"type,omitempty"`                                              // 工具类型
	Category      ToolCategory           `protobuf:"varint,8,opt,name=category,proto3,enum=api.ai.v1.ToolCategory" json:"category,omitempty"`                                  // 工具分类
	Tags          []string               `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`                                                                       // 标签
	Config        *ToolConfig            `protobuf:"bytes,10,opt,name=config,proto3" json:"config,omitempty"`                                                                  // 工具配置
	Stats         *ToolStats             `protobuf:"bytes,11,opt,name=stats,proto3" json:"stats,omitempty"`                                                                    // 使用统计
	SecurityLevel SecurityLevel          `protobuf:"varint,12,opt,name=security_level,json=securityLevel,proto3,enum=api.ai.v1.SecurityLevel" json:"security_level,omitempty"` // 安全级别
	Dependencies  []*ToolDependency      `protobuf:"bytes,13,rep,name=dependencies,proto3" json:"dependencies,omitempty"`                                                      // 依赖关系
	Version       *ToolVersionInfo       `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`                                                                // 版本信息
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                           // 创建时间
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                           // 更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolInfo) Reset() {
	*x = ToolInfo{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolInfo) ProtoMessage() {}

func (x *ToolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolInfo.ProtoReflect.Descriptor instead.
func (*ToolInfo) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{0}
}

func (x *ToolInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToolInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ToolInfo) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *ToolInfo) GetMcpServer() string {
	if x != nil {
		return x.McpServer
	}
	return ""
}

func (x *ToolInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ToolInfo) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ToolInfo) GetType() ToolType {
	if x != nil {
		return x.Type
	}
	return ToolType_TOOL_TYPE_UNSPECIFIED
}

func (x *ToolInfo) GetCategory() ToolCategory {
	if x != nil {
		return x.Category
	}
	return ToolCategory_TOOL_CATEGORY_UNSPECIFIED
}

func (x *ToolInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ToolInfo) GetConfig() *ToolConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ToolInfo) GetStats() *ToolStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ToolInfo) GetSecurityLevel() SecurityLevel {
	if x != nil {
		return x.SecurityLevel
	}
	return SecurityLevel_SECURITY_LEVEL_UNSPECIFIED
}

func (x *ToolInfo) GetDependencies() []*ToolDependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *ToolInfo) GetVersion() *ToolVersionInfo {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ToolInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ToolInfo) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// 工具配置
type ToolConfig struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TimeoutSeconds      int32                  `protobuf:"varint,1,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`                                                                             // 超时时间(秒)
	RetryCount          int32                  `protobuf:"varint,2,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`                                                                                         // 重试次数
	CacheEnabled        bool                   `protobuf:"varint,3,opt,name=cache_enabled,json=cacheEnabled,proto3" json:"cache_enabled,omitempty"`                                                                                   // 是否启用缓存
	CacheTtlSeconds     int32                  `protobuf:"varint,4,opt,name=cache_ttl_seconds,json=cacheTtlSeconds,proto3" json:"cache_ttl_seconds,omitempty"`                                                                        // 缓存TTL(秒)
	RateLimitPerMinute  int32                  `protobuf:"varint,5,opt,name=rate_limit_per_minute,json=rateLimitPerMinute,proto3" json:"rate_limit_per_minute,omitempty"`                                                             // 每分钟调用限制
	AsyncExecution      bool                   `protobuf:"varint,6,opt,name=async_execution,json=asyncExecution,proto3" json:"async_execution,omitempty"`                                                                             // 是否异步执行
	EnvironmentVars     map[string]string      `protobuf:"bytes,7,rep,name=environment_vars,json=environmentVars,proto3" json:"environment_vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 环境变量
	RequiredPermissions []string               `protobuf:"bytes,8,rep,name=required_permissions,json=requiredPermissions,proto3" json:"required_permissions,omitempty"`                                                               // 所需权限
	ExecutionContext    string                 `protobuf:"bytes,9,opt,name=execution_context,json=executionContext,proto3" json:"execution_context,omitempty"`                                                                        // 执行上下文
	CustomConfig        map[string]*anypb.Any  `protobuf:"bytes,10,rep,name=custom_config,json=customConfig,proto3" json:"custom_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`         // 自定义配置
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ToolConfig) Reset() {
	*x = ToolConfig{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolConfig) ProtoMessage() {}

func (x *ToolConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolConfig.ProtoReflect.Descriptor instead.
func (*ToolConfig) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{1}
}

func (x *ToolConfig) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *ToolConfig) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *ToolConfig) GetCacheEnabled() bool {
	if x != nil {
		return x.CacheEnabled
	}
	return false
}

func (x *ToolConfig) GetCacheTtlSeconds() int32 {
	if x != nil {
		return x.CacheTtlSeconds
	}
	return 0
}

func (x *ToolConfig) GetRateLimitPerMinute() int32 {
	if x != nil {
		return x.RateLimitPerMinute
	}
	return 0
}

func (x *ToolConfig) GetAsyncExecution() bool {
	if x != nil {
		return x.AsyncExecution
	}
	return false
}

func (x *ToolConfig) GetEnvironmentVars() map[string]string {
	if x != nil {
		return x.EnvironmentVars
	}
	return nil
}

func (x *ToolConfig) GetRequiredPermissions() []string {
	if x != nil {
		return x.RequiredPermissions
	}
	return nil
}

func (x *ToolConfig) GetExecutionContext() string {
	if x != nil {
		return x.ExecutionContext
	}
	return ""
}

func (x *ToolConfig) GetCustomConfig() map[string]*anypb.Any {
	if x != nil {
		return x.CustomConfig
	}
	return nil
}

// 工具统计信息
type ToolStats struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TotalCalls      int64                  `protobuf:"varint,1,opt,name=total_calls,json=totalCalls,proto3" json:"total_calls,omitempty"`                                                                              // 总调用次数
	SuccessfulCalls int64                  `protobuf:"varint,2,opt,name=successful_calls,json=successfulCalls,proto3" json:"successful_calls,omitempty"`                                                               // 成功调用次数
	FailedCalls     int64                  `protobuf:"varint,3,opt,name=failed_calls,json=failedCalls,proto3" json:"failed_calls,omitempty"`                                                                           // 失败调用次数
	AverageDuration float64                `protobuf:"fixed64,4,opt,name=average_duration,json=averageDuration,proto3" json:"average_duration,omitempty"`                                                              // 平均执行时间
	LastCalled      *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_called,json=lastCalled,proto3" json:"last_called,omitempty"`                                                                               // 最后调用时间
	SuccessRate     float64                `protobuf:"fixed64,6,opt,name=success_rate,json=successRate,proto3" json:"success_rate,omitempty"`                                                                          // 成功率
	ErrorCounts     map[string]int64       `protobuf:"bytes,7,rep,name=error_counts,json=errorCounts,proto3" json:"error_counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 错误统计
	TotalCost       float64                `protobuf:"fixed64,8,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`                                                                                // 总成本
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ToolStats) Reset() {
	*x = ToolStats{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolStats) ProtoMessage() {}

func (x *ToolStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolStats.ProtoReflect.Descriptor instead.
func (*ToolStats) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{2}
}

func (x *ToolStats) GetTotalCalls() int64 {
	if x != nil {
		return x.TotalCalls
	}
	return 0
}

func (x *ToolStats) GetSuccessfulCalls() int64 {
	if x != nil {
		return x.SuccessfulCalls
	}
	return 0
}

func (x *ToolStats) GetFailedCalls() int64 {
	if x != nil {
		return x.FailedCalls
	}
	return 0
}

func (x *ToolStats) GetAverageDuration() float64 {
	if x != nil {
		return x.AverageDuration
	}
	return 0
}

func (x *ToolStats) GetLastCalled() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCalled
	}
	return nil
}

func (x *ToolStats) GetSuccessRate() float64 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *ToolStats) GetErrorCounts() map[string]int64 {
	if x != nil {
		return x.ErrorCounts
	}
	return nil
}

func (x *ToolStats) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

// 工具依赖
type ToolDependency struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ToolName          string                 `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`                            // 依赖的工具名称
	Type              DependencyType         `protobuf:"varint,2,opt,name=type,proto3,enum=api.ai.v1.DependencyType" json:"type,omitempty"`                     // 依赖类型
	Required          bool                   `protobuf:"varint,3,opt,name=required,proto3" json:"required,omitempty"`                                           // 是否必需
	VersionConstraint string                 `protobuf:"bytes,4,opt,name=version_constraint,json=versionConstraint,proto3" json:"version_constraint,omitempty"` // 版本约束
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ToolDependency) Reset() {
	*x = ToolDependency{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolDependency) ProtoMessage() {}

func (x *ToolDependency) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolDependency.ProtoReflect.Descriptor instead.
func (*ToolDependency) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{3}
}

func (x *ToolDependency) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *ToolDependency) GetType() DependencyType {
	if x != nil {
		return x.Type
	}
	return DependencyType_DEPENDENCY_TYPE_UNSPECIFIED
}

func (x *ToolDependency) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ToolDependency) GetVersionConstraint() string {
	if x != nil {
		return x.VersionConstraint
	}
	return ""
}

// 工具版本信息
type ToolVersionInfo struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Version            string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`                                                 // 版本号
	Changelog          string                 `protobuf:"bytes,2,opt,name=changelog,proto3" json:"changelog,omitempty"`                                             // 变更日志
	Deprecated         bool                   `protobuf:"varint,3,opt,name=deprecated,proto3" json:"deprecated,omitempty"`                                          // 是否已弃用
	DeprecationMessage string                 `protobuf:"bytes,4,opt,name=deprecation_message,json=deprecationMessage,proto3" json:"deprecation_message,omitempty"` // 弃用说明
	ReleaseDate        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`                      // 发布日期
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ToolVersionInfo) Reset() {
	*x = ToolVersionInfo{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolVersionInfo) ProtoMessage() {}

func (x *ToolVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolVersionInfo.ProtoReflect.Descriptor instead.
func (*ToolVersionInfo) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{4}
}

func (x *ToolVersionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ToolVersionInfo) GetChangelog() string {
	if x != nil {
		return x.Changelog
	}
	return ""
}

func (x *ToolVersionInfo) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *ToolVersionInfo) GetDeprecationMessage() string {
	if x != nil {
		return x.DeprecationMessage
	}
	return ""
}

func (x *ToolVersionInfo) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

// MCP服务器定义 - 增强版
type McpServer struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Id          string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                       // 服务器ID
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                   // 服务器名称
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                                     // 服务器描述
	Endpoint    string                 `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`                                                                           // 服务器端点
	Status      McpServerStatus        `protobuf:"varint,5,opt,name=status,proto3,enum=api.ai.v1.McpServerStatus" json:"status,omitempty"`                                               // 服务器状态
	Config      *McpServerConfig       `protobuf:"bytes,6,opt,name=config,proto3" json:"config,omitempty"`                                                                               // 服务器配置
	Metadata    map[string]string      `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 服务器元数据
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                        // 创建时间
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                        // 更新时间
	// 新增字段
	Version            string          `protobuf:"bytes,10,opt,name=version,proto3" json:"version,omitempty"`                                                 // 服务器版本
	SupportedProtocols []string        `protobuf:"bytes,11,rep,name=supported_protocols,json=supportedProtocols,proto3" json:"supported_protocols,omitempty"` // 支持的协议
	Stats              *McpServerStats `protobuf:"bytes,12,opt,name=stats,proto3" json:"stats,omitempty"`                                                     // 服务器统计
	Health             *HealthStatus   `protobuf:"bytes,13,opt,name=health,proto3" json:"health,omitempty"`                                                   // 健康状态
	Capabilities       []string        `protobuf:"bytes,14,rep,name=capabilities,proto3" json:"capabilities,omitempty"`                                       // 服务器能力
	Owner              string          `protobuf:"bytes,15,opt,name=owner,proto3" json:"owner,omitempty"`                                                     // 所有者
	Tags               []string        `protobuf:"bytes,16,rep,name=tags,proto3" json:"tags,omitempty"`                                                       // 标签
	SecurityPolicy     *SecurityPolicy `protobuf:"bytes,17,opt,name=security_policy,json=securityPolicy,proto3" json:"security_policy,omitempty"`             // 安全策略
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *McpServer) Reset() {
	*x = McpServer{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpServer) ProtoMessage() {}

func (x *McpServer) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpServer.ProtoReflect.Descriptor instead.
func (*McpServer) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{5}
}

func (x *McpServer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *McpServer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *McpServer) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *McpServer) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *McpServer) GetStatus() McpServerStatus {
	if x != nil {
		return x.Status
	}
	return McpServerStatus_MCP_SERVER_STATUS_UNSPECIFIED
}

func (x *McpServer) GetConfig() *McpServerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *McpServer) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *McpServer) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *McpServer) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *McpServer) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *McpServer) GetSupportedProtocols() []string {
	if x != nil {
		return x.SupportedProtocols
	}
	return nil
}

func (x *McpServer) GetStats() *McpServerStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *McpServer) GetHealth() *HealthStatus {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *McpServer) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *McpServer) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *McpServer) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *McpServer) GetSecurityPolicy() *SecurityPolicy {
	if x != nil {
		return x.SecurityPolicy
	}
	return nil
}

// MCP服务器配置
type McpServerConfig struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	TransportType          string                 `protobuf:"bytes,1,opt,name=transport_type,json=transportType,proto3" json:"transport_type,omitempty"`                                                                                    // 传输类型
	ConnectionParams       map[string]string      `protobuf:"bytes,2,rep,name=connection_params,json=connectionParams,proto3" json:"connection_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 连接参数
	ConnectionTimeout      int32                  `protobuf:"varint,3,opt,name=connection_timeout,json=connectionTimeout,proto3" json:"connection_timeout,omitempty"`                                                                       // 连接超时
	RequestTimeout         int32                  `protobuf:"varint,4,opt,name=request_timeout,json=requestTimeout,proto3" json:"request_timeout,omitempty"`                                                                                // 请求超时
	MaxRetries             int32                  `protobuf:"varint,5,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`                                                                                            // 最大重试次数
	SslEnabled             bool                   `protobuf:"varint,6,opt,name=ssl_enabled,json=sslEnabled,proto3" json:"ssl_enabled,omitempty"`                                                                                            // 是否启用SSL
	SslCertPath            string                 `protobuf:"bytes,7,opt,name=ssl_cert_path,json=sslCertPath,proto3" json:"ssl_cert_path,omitempty"`                                                                                        // SSL证书路径
	AuthenticationRequired bool                   `protobuf:"varint,8,opt,name=authentication_required,json=authenticationRequired,proto3" json:"authentication_required,omitempty"`                                                        // 是否需要认证
	AuthConfig             map[string]string      `protobuf:"bytes,9,rep,name=auth_config,json=authConfig,proto3" json:"auth_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`                   // 认证配置
	RateLimit              int32                  `protobuf:"varint,10,opt,name=rate_limit,json=rateLimit,proto3" json:"rate_limit,omitempty"`                                                                                              // 速率限制
	CustomConfig           map[string]*anypb.Any  `protobuf:"bytes,11,rep,name=custom_config,json=customConfig,proto3" json:"custom_config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`            // 自定义配置
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *McpServerConfig) Reset() {
	*x = McpServerConfig{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpServerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpServerConfig) ProtoMessage() {}

func (x *McpServerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpServerConfig.ProtoReflect.Descriptor instead.
func (*McpServerConfig) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{6}
}

func (x *McpServerConfig) GetTransportType() string {
	if x != nil {
		return x.TransportType
	}
	return ""
}

func (x *McpServerConfig) GetConnectionParams() map[string]string {
	if x != nil {
		return x.ConnectionParams
	}
	return nil
}

func (x *McpServerConfig) GetConnectionTimeout() int32 {
	if x != nil {
		return x.ConnectionTimeout
	}
	return 0
}

func (x *McpServerConfig) GetRequestTimeout() int32 {
	if x != nil {
		return x.RequestTimeout
	}
	return 0
}

func (x *McpServerConfig) GetMaxRetries() int32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *McpServerConfig) GetSslEnabled() bool {
	if x != nil {
		return x.SslEnabled
	}
	return false
}

func (x *McpServerConfig) GetSslCertPath() string {
	if x != nil {
		return x.SslCertPath
	}
	return ""
}

func (x *McpServerConfig) GetAuthenticationRequired() bool {
	if x != nil {
		return x.AuthenticationRequired
	}
	return false
}

func (x *McpServerConfig) GetAuthConfig() map[string]string {
	if x != nil {
		return x.AuthConfig
	}
	return nil
}

func (x *McpServerConfig) GetRateLimit() int32 {
	if x != nil {
		return x.RateLimit
	}
	return 0
}

func (x *McpServerConfig) GetCustomConfig() map[string]*anypb.Any {
	if x != nil {
		return x.CustomConfig
	}
	return nil
}

// MCP服务器统计
type McpServerStats struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	TotalRequests       int64                  `protobuf:"varint,1,opt,name=total_requests,json=totalRequests,proto3" json:"total_requests,omitempty"`                                                                     // 总请求数
	SuccessfulRequests  int64                  `protobuf:"varint,2,opt,name=successful_requests,json=successfulRequests,proto3" json:"successful_requests,omitempty"`                                                      // 成功请求数
	FailedRequests      int64                  `protobuf:"varint,3,opt,name=failed_requests,json=failedRequests,proto3" json:"failed_requests,omitempty"`                                                                  // 失败请求数
	AverageResponseTime float64                `protobuf:"fixed64,4,opt,name=average_response_time,json=averageResponseTime,proto3" json:"average_response_time,omitempty"`                                                // 平均响应时间
	LastRequestAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_request_at,json=lastRequestAt,proto3" json:"last_request_at,omitempty"`                                                                    // 最后请求时间
	ActiveConnections   int64                  `protobuf:"varint,6,opt,name=active_connections,json=activeConnections,proto3" json:"active_connections,omitempty"`                                                         // 活跃连接数
	ErrorCounts         map[string]int64       `protobuf:"bytes,7,rep,name=error_counts,json=errorCounts,proto3" json:"error_counts,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 错误统计
	UptimePercentage    float64                `protobuf:"fixed64,8,opt,name=uptime_percentage,json=uptimePercentage,proto3" json:"uptime_percentage,omitempty"`                                                           // 运行时间百分比
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *McpServerStats) Reset() {
	*x = McpServerStats{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpServerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpServerStats) ProtoMessage() {}

func (x *McpServerStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpServerStats.ProtoReflect.Descriptor instead.
func (*McpServerStats) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{7}
}

func (x *McpServerStats) GetTotalRequests() int64 {
	if x != nil {
		return x.TotalRequests
	}
	return 0
}

func (x *McpServerStats) GetSuccessfulRequests() int64 {
	if x != nil {
		return x.SuccessfulRequests
	}
	return 0
}

func (x *McpServerStats) GetFailedRequests() int64 {
	if x != nil {
		return x.FailedRequests
	}
	return 0
}

func (x *McpServerStats) GetAverageResponseTime() float64 {
	if x != nil {
		return x.AverageResponseTime
	}
	return 0
}

func (x *McpServerStats) GetLastRequestAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRequestAt
	}
	return nil
}

func (x *McpServerStats) GetActiveConnections() int64 {
	if x != nil {
		return x.ActiveConnections
	}
	return 0
}

func (x *McpServerStats) GetErrorCounts() map[string]int64 {
	if x != nil {
		return x.ErrorCounts
	}
	return nil
}

func (x *McpServerStats) GetUptimePercentage() float64 {
	if x != nil {
		return x.UptimePercentage
	}
	return 0
}

// 健康状态
type HealthStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         HealthLevel            `protobuf:"varint,1,opt,name=level,proto3,enum=api.ai.v1.HealthLevel" json:"level,omitempty"` // 健康级别
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                         // 状态消息
	LastCheck     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_check,json=lastCheck,proto3" json:"last_check,omitempty"`    // 最后检查时间
	Checks        []*HealthCheck         `protobuf:"bytes,4,rep,name=checks,proto3" json:"checks,omitempty"`                           // 健康检查详情
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthStatus) Reset() {
	*x = HealthStatus{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthStatus) ProtoMessage() {}

func (x *HealthStatus) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthStatus.ProtoReflect.Descriptor instead.
func (*HealthStatus) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{8}
}

func (x *HealthStatus) GetLevel() HealthLevel {
	if x != nil {
		return x.Level
	}
	return HealthLevel_HEALTH_LEVEL_UNSPECIFIED
}

func (x *HealthStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HealthStatus) GetLastCheck() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCheck
	}
	return nil
}

func (x *HealthStatus) GetChecks() []*HealthCheck {
	if x != nil {
		return x.Checks
	}
	return nil
}

// 健康检查
type HealthCheck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                 // 检查名称
	Status        HealthLevel            `protobuf:"varint,2,opt,name=status,proto3,enum=api.ai.v1.HealthLevel" json:"status,omitempty"` // 检查状态
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                           // 检查消息
	Duration      *durationpb.Duration   `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`                         // 检查耗时
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheck) Reset() {
	*x = HealthCheck{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheck) ProtoMessage() {}

func (x *HealthCheck) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheck.ProtoReflect.Descriptor instead.
func (*HealthCheck) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{9}
}

func (x *HealthCheck) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HealthCheck) GetStatus() HealthLevel {
	if x != nil {
		return x.Status
	}
	return HealthLevel_HEALTH_LEVEL_UNSPECIFIED
}

func (x *HealthCheck) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *HealthCheck) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// 安全策略
type SecurityPolicy struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	AllowedOrigins      []string               `protobuf:"bytes,1,rep,name=allowed_origins,json=allowedOrigins,proto3" json:"allowed_origins,omitempty"`                                                                              // 允许的来源
	BlockedOrigins      []string               `protobuf:"bytes,2,rep,name=blocked_origins,json=blockedOrigins,proto3" json:"blocked_origins,omitempty"`                                                                              // 阻止的来源
	RequiredPermissions []string               `protobuf:"bytes,3,rep,name=required_permissions,json=requiredPermissions,proto3" json:"required_permissions,omitempty"`                                                               // 必需权限
	AuditEnabled        bool                   `protobuf:"varint,4,opt,name=audit_enabled,json=auditEnabled,proto3" json:"audit_enabled,omitempty"`                                                                                   // 是否启用审计
	MaxRequestSize      int32                  `protobuf:"varint,5,opt,name=max_request_size,json=maxRequestSize,proto3" json:"max_request_size,omitempty"`                                                                           // 最大请求大小
	RateLimitingEnabled bool                   `protobuf:"varint,6,opt,name=rate_limiting_enabled,json=rateLimitingEnabled,proto3" json:"rate_limiting_enabled,omitempty"`                                                            // 是否启用速率限制
	SecurityHeaders     map[string]string      `protobuf:"bytes,7,rep,name=security_headers,json=securityHeaders,proto3" json:"security_headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 安全头
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SecurityPolicy) Reset() {
	*x = SecurityPolicy{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecurityPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecurityPolicy) ProtoMessage() {}

func (x *SecurityPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecurityPolicy.ProtoReflect.Descriptor instead.
func (*SecurityPolicy) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{10}
}

func (x *SecurityPolicy) GetAllowedOrigins() []string {
	if x != nil {
		return x.AllowedOrigins
	}
	return nil
}

func (x *SecurityPolicy) GetBlockedOrigins() []string {
	if x != nil {
		return x.BlockedOrigins
	}
	return nil
}

func (x *SecurityPolicy) GetRequiredPermissions() []string {
	if x != nil {
		return x.RequiredPermissions
	}
	return nil
}

func (x *SecurityPolicy) GetAuditEnabled() bool {
	if x != nil {
		return x.AuditEnabled
	}
	return false
}

func (x *SecurityPolicy) GetMaxRequestSize() int32 {
	if x != nil {
		return x.MaxRequestSize
	}
	return 0
}

func (x *SecurityPolicy) GetRateLimitingEnabled() bool {
	if x != nil {
		return x.RateLimitingEnabled
	}
	return false
}

func (x *SecurityPolicy) GetSecurityHeaders() map[string]string {
	if x != nil {
		return x.SecurityHeaders
	}
	return nil
}

// 资源定义 - 增强版
type Resource struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Uri         string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`                                                                                     // 资源URI
	Name        string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                   // 资源名称
	Description string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                                     // 资源描述
	MimeType    string                 `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                                                           // MIME类型
	McpServer   string                 `protobuf:"bytes,5,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`                                                        // MCP服务器标识
	Metadata    map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 资源元数据
	// 新增字段
	Type          ResourceType           `protobuf:"varint,7,opt,name=type,proto3,enum=api.ai.v1.ResourceType" json:"type,omitempty"`         // 资源类型
	Size          int64                  `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`                                     // 资源大小
	Hash          string                 `protobuf:"bytes,9,opt,name=hash,proto3" json:"hash,omitempty"`                                      // 资源哈希
	Cached        bool                   `protobuf:"varint,10,opt,name=cached,proto3" json:"cached,omitempty"`                                // 是否缓存
	LastModified  *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"` // 最后修改时间
	Permissions   *ResourcePermissions   `protobuf:"bytes,12,opt,name=permissions,proto3" json:"permissions,omitempty"`                       // 资源权限
	Tags          []string               `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`                                     // 标签
	Version       string                 `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`                               // 资源版本
	Stats         *ResourceStats         `protobuf:"bytes,15,opt,name=stats,proto3" json:"stats,omitempty"`                                   // 访问统计
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{11}
}

func (x *Resource) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Resource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Resource) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Resource) GetMcpServer() string {
	if x != nil {
		return x.McpServer
	}
	return ""
}

func (x *Resource) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Resource) GetType() ResourceType {
	if x != nil {
		return x.Type
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *Resource) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Resource) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Resource) GetCached() bool {
	if x != nil {
		return x.Cached
	}
	return false
}

func (x *Resource) GetLastModified() *timestamppb.Timestamp {
	if x != nil {
		return x.LastModified
	}
	return nil
}

func (x *Resource) GetPermissions() *ResourcePermissions {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *Resource) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Resource) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Resource) GetStats() *ResourceStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// 资源权限
type ResourcePermissions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Readable      bool                   `protobuf:"varint,1,opt,name=readable,proto3" json:"readable,omitempty"`                               // 可读
	Writable      bool                   `protobuf:"varint,2,opt,name=writable,proto3" json:"writable,omitempty"`                               // 可写
	Executable    bool                   `protobuf:"varint,3,opt,name=executable,proto3" json:"executable,omitempty"`                           // 可执行
	Deletable     bool                   `protobuf:"varint,4,opt,name=deletable,proto3" json:"deletable,omitempty"`                             // 可删除
	RequiredRoles []string               `protobuf:"bytes,5,rep,name=required_roles,json=requiredRoles,proto3" json:"required_roles,omitempty"` // 需要的角色
	AllowedUsers  []string               `protobuf:"bytes,6,rep,name=allowed_users,json=allowedUsers,proto3" json:"allowed_users,omitempty"`    // 允许的用户
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourcePermissions) Reset() {
	*x = ResourcePermissions{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcePermissions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePermissions) ProtoMessage() {}

func (x *ResourcePermissions) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePermissions.ProtoReflect.Descriptor instead.
func (*ResourcePermissions) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{12}
}

func (x *ResourcePermissions) GetReadable() bool {
	if x != nil {
		return x.Readable
	}
	return false
}

func (x *ResourcePermissions) GetWritable() bool {
	if x != nil {
		return x.Writable
	}
	return false
}

func (x *ResourcePermissions) GetExecutable() bool {
	if x != nil {
		return x.Executable
	}
	return false
}

func (x *ResourcePermissions) GetDeletable() bool {
	if x != nil {
		return x.Deletable
	}
	return false
}

func (x *ResourcePermissions) GetRequiredRoles() []string {
	if x != nil {
		return x.RequiredRoles
	}
	return nil
}

func (x *ResourcePermissions) GetAllowedUsers() []string {
	if x != nil {
		return x.AllowedUsers
	}
	return nil
}

// 资源统计
type ResourceStats struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	AccessCount           int64                  `protobuf:"varint,1,opt,name=access_count,json=accessCount,proto3" json:"access_count,omitempty"`                                  // 访问次数
	LastAccessed          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_accessed,json=lastAccessed,proto3" json:"last_accessed,omitempty"`                                // 最后访问时间
	DownloadCount         int64                  `protobuf:"varint,3,opt,name=download_count,json=downloadCount,proto3" json:"download_count,omitempty"`                            // 下载次数
	AverageAccessDuration float64                `protobuf:"fixed64,4,opt,name=average_access_duration,json=averageAccessDuration,proto3" json:"average_access_duration,omitempty"` // 平均访问时长
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ResourceStats) Reset() {
	*x = ResourceStats{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceStats) ProtoMessage() {}

func (x *ResourceStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceStats.ProtoReflect.Descriptor instead.
func (*ResourceStats) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{13}
}

func (x *ResourceStats) GetAccessCount() int64 {
	if x != nil {
		return x.AccessCount
	}
	return 0
}

func (x *ResourceStats) GetLastAccessed() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAccessed
	}
	return nil
}

func (x *ResourceStats) GetDownloadCount() int64 {
	if x != nil {
		return x.DownloadCount
	}
	return 0
}

func (x *ResourceStats) GetAverageAccessDuration() float64 {
	if x != nil {
		return x.AverageAccessDuration
	}
	return 0
}

// 工具执行记录
type ToolExecution struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Id           string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                             // 执行ID
	ToolName     string                 `protobuf:"bytes,2,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`                 // 工具名称
	Arguments    string                 `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`                               // 执行参数
	Result       string                 `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`                                     // 执行结果
	Status       ToolExecutionStatus    `protobuf:"varint,5,opt,name=status,proto3,enum=api.ai.v1.ToolExecutionStatus" json:"status,omitempty"` // 执行状态
	ErrorMessage string                 `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`     // 错误信息
	StartedAt    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`              // 开始时间
	CompletedAt  *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=completed_at,json=completedAt,proto3" json:"completed_at,omitempty"`        // 完成时间
	Duration     *durationpb.Duration   `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`                                 // 执行时长
	// 新增字段
	UserId         string            `protobuf:"bytes,10,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                         // 用户ID
	ConversationId string            `protobuf:"bytes,11,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // 对话ID
	Context        *ExecutionContext `protobuf:"bytes,12,opt,name=context,proto3" json:"context,omitempty"`                                     // 执行上下文
	Metrics        *ExecutionMetrics `protobuf:"bytes,13,opt,name=metrics,proto3" json:"metrics,omitempty"`                                     // 执行指标
	Warnings       []string          `protobuf:"bytes,14,rep,name=warnings,proto3" json:"warnings,omitempty"`                                   // 警告信息
	TraceId        string            `protobuf:"bytes,15,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`                      // 追踪ID
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ToolExecution) Reset() {
	*x = ToolExecution{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolExecution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolExecution) ProtoMessage() {}

func (x *ToolExecution) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolExecution.ProtoReflect.Descriptor instead.
func (*ToolExecution) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{14}
}

func (x *ToolExecution) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ToolExecution) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *ToolExecution) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *ToolExecution) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ToolExecution) GetStatus() ToolExecutionStatus {
	if x != nil {
		return x.Status
	}
	return ToolExecutionStatus_TOOL_EXECUTION_STATUS_UNSPECIFIED
}

func (x *ToolExecution) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ToolExecution) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *ToolExecution) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *ToolExecution) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ToolExecution) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ToolExecution) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *ToolExecution) GetContext() *ExecutionContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ToolExecution) GetMetrics() *ExecutionMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *ToolExecution) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ToolExecution) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

// 执行上下文
type ExecutionContext struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Environment      map[string]string      `protobuf:"bytes,1,rep,name=environment,proto3" json:"environment,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 环境变量
	WorkingDirectory string                 `protobuf:"bytes,2,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`                                         // 工作目录
	Permissions      []string               `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`                                                                           // 权限列表
	Variables        map[string]*anypb.Any  `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`     // 上下文变量
	SessionId        string                 `protobuf:"bytes,5,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`                                                              // 会话ID
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ExecutionContext) Reset() {
	*x = ExecutionContext{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionContext) ProtoMessage() {}

func (x *ExecutionContext) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionContext.ProtoReflect.Descriptor instead.
func (*ExecutionContext) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{15}
}

func (x *ExecutionContext) GetEnvironment() map[string]string {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *ExecutionContext) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *ExecutionContext) GetPermissions() []string {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ExecutionContext) GetVariables() map[string]*anypb.Any {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ExecutionContext) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// 执行指标
type ExecutionMetrics struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MemoryUsed           int64                  `protobuf:"varint,1,opt,name=memory_used,json=memoryUsed,proto3" json:"memory_used,omitempty"`                                 // 内存使用(字节)
	CpuUsage             float64                `protobuf:"fixed64,2,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`                                      // CPU使用率
	NetworkBytesSent     int64                  `protobuf:"varint,3,opt,name=network_bytes_sent,json=networkBytesSent,proto3" json:"network_bytes_sent,omitempty"`             // 网络发送字节数
	NetworkBytesReceived int64                  `protobuf:"varint,4,opt,name=network_bytes_received,json=networkBytesReceived,proto3" json:"network_bytes_received,omitempty"` // 网络接收字节数
	FileOperations       int32                  `protobuf:"varint,5,opt,name=file_operations,json=fileOperations,proto3" json:"file_operations,omitempty"`                     // 文件操作次数
	Cost                 float64                `protobuf:"fixed64,6,opt,name=cost,proto3" json:"cost,omitempty"`                                                              // 执行成本
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ExecutionMetrics) Reset() {
	*x = ExecutionMetrics{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionMetrics) ProtoMessage() {}

func (x *ExecutionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionMetrics.ProtoReflect.Descriptor instead.
func (*ExecutionMetrics) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{16}
}

func (x *ExecutionMetrics) GetMemoryUsed() int64 {
	if x != nil {
		return x.MemoryUsed
	}
	return 0
}

func (x *ExecutionMetrics) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *ExecutionMetrics) GetNetworkBytesSent() int64 {
	if x != nil {
		return x.NetworkBytesSent
	}
	return 0
}

func (x *ExecutionMetrics) GetNetworkBytesReceived() int64 {
	if x != nil {
		return x.NetworkBytesReceived
	}
	return 0
}

func (x *ExecutionMetrics) GetFileOperations() int32 {
	if x != nil {
		return x.FileOperations
	}
	return 0
}

func (x *ExecutionMetrics) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

// 列出工具
type ListToolsRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	McpServer        string                 `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`                                                      // MCP服务器过滤(可选)
	OnlyEnabled      bool                   `protobuf:"varint,2,opt,name=only_enabled,json=onlyEnabled,proto3" json:"only_enabled,omitempty"`                                               // 只显示启用的工具
	TypeFilter       ToolType               `protobuf:"varint,3,opt,name=type_filter,json=typeFilter,proto3,enum=api.ai.v1.ToolType" json:"type_filter,omitempty"`                          // 工具类型过滤(可选)
	CategoryFilter   ToolCategory           `protobuf:"varint,4,opt,name=category_filter,json=categoryFilter,proto3,enum=api.ai.v1.ToolCategory" json:"category_filter,omitempty"`          // 工具分类过滤(可选)
	TagFilters       []string               `protobuf:"bytes,5,rep,name=tag_filters,json=tagFilters,proto3" json:"tag_filters,omitempty"`                                                   // 标签过滤(可选)
	MaxSecurityLevel SecurityLevel          `protobuf:"varint,6,opt,name=max_security_level,json=maxSecurityLevel,proto3,enum=api.ai.v1.SecurityLevel" json:"max_security_level,omitempty"` // 最大安全级别(可选)
	Page             int32                  `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`                                                                                // 页码
	PageSize         int32                  `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                                                        // 页面大小
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ListToolsRequest) Reset() {
	*x = ListToolsRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListToolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListToolsRequest) ProtoMessage() {}

func (x *ListToolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListToolsRequest.ProtoReflect.Descriptor instead.
func (*ListToolsRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{17}
}

func (x *ListToolsRequest) GetMcpServer() string {
	if x != nil {
		return x.McpServer
	}
	return ""
}

func (x *ListToolsRequest) GetOnlyEnabled() bool {
	if x != nil {
		return x.OnlyEnabled
	}
	return false
}

func (x *ListToolsRequest) GetTypeFilter() ToolType {
	if x != nil {
		return x.TypeFilter
	}
	return ToolType_TOOL_TYPE_UNSPECIFIED
}

func (x *ListToolsRequest) GetCategoryFilter() ToolCategory {
	if x != nil {
		return x.CategoryFilter
	}
	return ToolCategory_TOOL_CATEGORY_UNSPECIFIED
}

func (x *ListToolsRequest) GetTagFilters() []string {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

func (x *ListToolsRequest) GetMaxSecurityLevel() SecurityLevel {
	if x != nil {
		return x.MaxSecurityLevel
	}
	return SecurityLevel_SECURITY_LEVEL_UNSPECIFIED
}

func (x *ListToolsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListToolsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListToolsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tools         []*ToolInfo            `protobuf:"bytes,1,rep,name=tools,proto3" json:"tools,omitempty"`                        // 工具列表
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 总数
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页面大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListToolsReply) Reset() {
	*x = ListToolsReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListToolsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListToolsReply) ProtoMessage() {}

func (x *ListToolsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListToolsReply.ProtoReflect.Descriptor instead.
func (*ListToolsReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{18}
}

func (x *ListToolsReply) GetTools() []*ToolInfo {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *ListToolsReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListToolsReply) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListToolsReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取工具
type GetToolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                         // 工具名称
	IncludeStats  bool                   `protobuf:"varint,2,opt,name=include_stats,json=includeStats,proto3" json:"include_stats,omitempty"`    // 是否包含统计信息
	IncludeConfig bool                   `protobuf:"varint,3,opt,name=include_config,json=includeConfig,proto3" json:"include_config,omitempty"` // 是否包含配置信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetToolRequest) Reset() {
	*x = GetToolRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolRequest) ProtoMessage() {}

func (x *GetToolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolRequest.ProtoReflect.Descriptor instead.
func (*GetToolRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{19}
}

func (x *GetToolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetToolRequest) GetIncludeStats() bool {
	if x != nil {
		return x.IncludeStats
	}
	return false
}

func (x *GetToolRequest) GetIncludeConfig() bool {
	if x != nil {
		return x.IncludeConfig
	}
	return false
}

type GetToolReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tool          *ToolInfo              `protobuf:"bytes,1,opt,name=tool,proto3" json:"tool,omitempty"` // 工具信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetToolReply) Reset() {
	*x = GetToolReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolReply) ProtoMessage() {}

func (x *GetToolReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolReply.ProtoReflect.Descriptor instead.
func (*GetToolReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{20}
}

func (x *GetToolReply) GetTool() *ToolInfo {
	if x != nil {
		return x.Tool
	}
	return nil
}

// 调用工具
type CallToolRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                            // 工具名称
	Arguments      string                 `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`                                  // 参数(JSON格式)
	ConversationId int64                  `protobuf:"varint,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // 对话ID(可选，用于上下文)
	Context        *ExecutionContext      `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`                                      // 执行上下文(可选)
	TimeoutSeconds int32                  `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"` // 超时时间(可选)
	Async          bool                   `protobuf:"varint,6,opt,name=async,proto3" json:"async,omitempty"`                                         // 是否异步执行
	TraceId        string                 `protobuf:"bytes,7,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`                       // 追踪ID(可选)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CallToolRequest) Reset() {
	*x = CallToolRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallToolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallToolRequest) ProtoMessage() {}

func (x *CallToolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallToolRequest.ProtoReflect.Descriptor instead.
func (*CallToolRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{21}
}

func (x *CallToolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CallToolRequest) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *CallToolRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

func (x *CallToolRequest) GetContext() *ExecutionContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *CallToolRequest) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *CallToolRequest) GetAsync() bool {
	if x != nil {
		return x.Async
	}
	return false
}

func (x *CallToolRequest) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type CallToolResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`                                                                               // 执行结果
	Status        ToolExecutionStatus    `protobuf:"varint,2,opt,name=status,proto3,enum=api.ai.v1.ToolExecutionStatus" json:"status,omitempty"`                                           // 状态码
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                               // 错误信息(如果失败)
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 执行元数据
	ExecutionId   string                 `protobuf:"bytes,5,opt,name=execution_id,json=executionId,proto3" json:"execution_id,omitempty"`                                                  // 执行ID
	Metrics       *ExecutionMetrics      `protobuf:"bytes,6,opt,name=metrics,proto3" json:"metrics,omitempty"`                                                                             // 执行指标
	Warnings      []string               `protobuf:"bytes,7,rep,name=warnings,proto3" json:"warnings,omitempty"`                                                                           // 警告信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallToolResponse) Reset() {
	*x = CallToolResponse{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallToolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallToolResponse) ProtoMessage() {}

func (x *CallToolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallToolResponse.ProtoReflect.Descriptor instead.
func (*CallToolResponse) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{22}
}

func (x *CallToolResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *CallToolResponse) GetStatus() ToolExecutionStatus {
	if x != nil {
		return x.Status
	}
	return ToolExecutionStatus_TOOL_EXECUTION_STATUS_UNSPECIFIED
}

func (x *CallToolResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CallToolResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CallToolResponse) GetExecutionId() string {
	if x != nil {
		return x.ExecutionId
	}
	return ""
}

func (x *CallToolResponse) GetMetrics() *ExecutionMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *CallToolResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// 流式工具调用响应
type CallToolStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunk         string                 `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`                                       // 数据块
	Status        ToolExecutionStatus    `protobuf:"varint,2,opt,name=status,proto3,enum=api.ai.v1.ToolExecutionStatus" json:"status,omitempty"` // 当前状态
	IsComplete    bool                   `protobuf:"varint,3,opt,name=is_complete,json=isComplete,proto3" json:"is_complete,omitempty"`          // 是否完成
	FinalResult   string                 `protobuf:"bytes,4,opt,name=final_result,json=finalResult,proto3" json:"final_result,omitempty"`        // 最终结果(完成时)
	Error         string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`                                       // 错误信息(如果有)
	Progress      float64                `protobuf:"fixed64,6,opt,name=progress,proto3" json:"progress,omitempty"`                               // 执行进度(0-1)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallToolStreamResponse) Reset() {
	*x = CallToolStreamResponse{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallToolStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallToolStreamResponse) ProtoMessage() {}

func (x *CallToolStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallToolStreamResponse.ProtoReflect.Descriptor instead.
func (*CallToolStreamResponse) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{23}
}

func (x *CallToolStreamResponse) GetChunk() string {
	if x != nil {
		return x.Chunk
	}
	return ""
}

func (x *CallToolStreamResponse) GetStatus() ToolExecutionStatus {
	if x != nil {
		return x.Status
	}
	return ToolExecutionStatus_TOOL_EXECUTION_STATUS_UNSPECIFIED
}

func (x *CallToolStreamResponse) GetIsComplete() bool {
	if x != nil {
		return x.IsComplete
	}
	return false
}

func (x *CallToolStreamResponse) GetFinalResult() string {
	if x != nil {
		return x.FinalResult
	}
	return ""
}

func (x *CallToolStreamResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *CallToolStreamResponse) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

// 获取工具Schema
type GetToolSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 工具名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetToolSchemaRequest) Reset() {
	*x = GetToolSchemaRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolSchemaRequest) ProtoMessage() {}

func (x *GetToolSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetToolSchemaRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{24}
}

func (x *GetToolSchemaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetToolSchemaReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tool          *ToolInfo              `protobuf:"bytes,1,opt,name=tool,proto3" json:"tool,omitempty"` // 工具信息和Schema
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetToolSchemaReply) Reset() {
	*x = GetToolSchemaReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolSchemaReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolSchemaReply) ProtoMessage() {}

func (x *GetToolSchemaReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolSchemaReply.ProtoReflect.Descriptor instead.
func (*GetToolSchemaReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{25}
}

func (x *GetToolSchemaReply) GetTool() *ToolInfo {
	if x != nil {
		return x.Tool
	}
	return nil
}

// 验证工具参数
type ValidateToolArgumentsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolName      string                 `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"` // 工具名称
	Arguments     string                 `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`               // 参数(JSON格式)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ValidateToolArgumentsRequest) Reset() {
	*x = ValidateToolArgumentsRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateToolArgumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateToolArgumentsRequest) ProtoMessage() {}

func (x *ValidateToolArgumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateToolArgumentsRequest.ProtoReflect.Descriptor instead.
func (*ValidateToolArgumentsRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{26}
}

func (x *ValidateToolArgumentsRequest) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *ValidateToolArgumentsRequest) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

type ValidateToolArgumentsReply struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Valid               bool                   `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`                                                       // 是否有效
	Errors              []string               `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`                                                      // 验证错误
	Warnings            []string               `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`                                                  // 验证警告
	NormalizedArguments string                 `protobuf:"bytes,4,opt,name=normalized_arguments,json=normalizedArguments,proto3" json:"normalized_arguments,omitempty"` // 规范化后的参数
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ValidateToolArgumentsReply) Reset() {
	*x = ValidateToolArgumentsReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateToolArgumentsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateToolArgumentsReply) ProtoMessage() {}

func (x *ValidateToolArgumentsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateToolArgumentsReply.ProtoReflect.Descriptor instead.
func (*ValidateToolArgumentsReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{27}
}

func (x *ValidateToolArgumentsReply) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidateToolArgumentsReply) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *ValidateToolArgumentsReply) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *ValidateToolArgumentsReply) GetNormalizedArguments() string {
	if x != nil {
		return x.NormalizedArguments
	}
	return ""
}

// 批量调用工具
type BatchCallToolsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ToolCalls      []*BatchToolCall       `protobuf:"bytes,1,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`                 // 工具调用列表
	Parallel       bool                   `protobuf:"varint,2,opt,name=parallel,proto3" json:"parallel,omitempty"`                                   // 是否并行执行
	MaxConcurrency int32                  `protobuf:"varint,3,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"` // 最大并发数
	StopOnError    bool                   `protobuf:"varint,4,opt,name=stop_on_error,json=stopOnError,proto3" json:"stop_on_error,omitempty"`        // 遇到错误时是否停止
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BatchCallToolsRequest) Reset() {
	*x = BatchCallToolsRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCallToolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCallToolsRequest) ProtoMessage() {}

func (x *BatchCallToolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCallToolsRequest.ProtoReflect.Descriptor instead.
func (*BatchCallToolsRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{28}
}

func (x *BatchCallToolsRequest) GetToolCalls() []*BatchToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

func (x *BatchCallToolsRequest) GetParallel() bool {
	if x != nil {
		return x.Parallel
	}
	return false
}

func (x *BatchCallToolsRequest) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *BatchCallToolsRequest) GetStopOnError() bool {
	if x != nil {
		return x.StopOnError
	}
	return false
}

type BatchToolCall struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                // 调用ID
	ToolName       string                 `protobuf:"bytes,2,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`                    // 工具名称
	Arguments      string                 `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`                                  // 参数
	DependsOn      []string               `protobuf:"bytes,4,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`                 // 依赖的调用ID
	TimeoutSeconds int32                  `protobuf:"varint,5,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"` // 超时时间
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BatchToolCall) Reset() {
	*x = BatchToolCall{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchToolCall) ProtoMessage() {}

func (x *BatchToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchToolCall.ProtoReflect.Descriptor instead.
func (*BatchToolCall) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{29}
}

func (x *BatchToolCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchToolCall) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *BatchToolCall) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *BatchToolCall) GetDependsOn() []string {
	if x != nil {
		return x.DependsOn
	}
	return nil
}

func (x *BatchToolCall) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

type BatchCallToolsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*BatchToolResult     `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`                                // 执行结果列表
	AllSuccess    bool                   `protobuf:"varint,2,opt,name=all_success,json=allSuccess,proto3" json:"all_success,omitempty"`       // 是否全部成功
	SuccessCount  int32                  `protobuf:"varint,3,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"` // 成功数量
	FailedCount   int32                  `protobuf:"varint,4,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`    // 失败数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCallToolsReply) Reset() {
	*x = BatchCallToolsReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCallToolsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCallToolsReply) ProtoMessage() {}

func (x *BatchCallToolsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCallToolsReply.ProtoReflect.Descriptor instead.
func (*BatchCallToolsReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{30}
}

func (x *BatchCallToolsReply) GetResults() []*BatchToolResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BatchCallToolsReply) GetAllSuccess() bool {
	if x != nil {
		return x.AllSuccess
	}
	return false
}

func (x *BatchCallToolsReply) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *BatchCallToolsReply) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

type BatchToolResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`             // 调用ID
	Response      *CallToolResponse      `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"` // 执行结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchToolResult) Reset() {
	*x = BatchToolResult{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchToolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchToolResult) ProtoMessage() {}

func (x *BatchToolResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchToolResult.ProtoReflect.Descriptor instead.
func (*BatchToolResult) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{31}
}

func (x *BatchToolResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BatchToolResult) GetResponse() *CallToolResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

// 列出MCP服务器
type ListMcpServersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StatusFilter  McpServerStatus        `protobuf:"varint,1,opt,name=status_filter,json=statusFilter,proto3,enum=api.ai.v1.McpServerStatus" json:"status_filter,omitempty"` // 状态过滤(可选)
	TagFilters    []string               `protobuf:"bytes,2,rep,name=tag_filters,json=tagFilters,proto3" json:"tag_filters,omitempty"`                                       // 标签过滤(可选)
	IncludeStats  bool                   `protobuf:"varint,3,opt,name=include_stats,json=includeStats,proto3" json:"include_stats,omitempty"`                                // 是否包含统计信息
	Page          int32                  `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`                                                                    // 页码
	PageSize      int32                  `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                                            // 页面大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMcpServersRequest) Reset() {
	*x = ListMcpServersRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMcpServersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMcpServersRequest) ProtoMessage() {}

func (x *ListMcpServersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMcpServersRequest.ProtoReflect.Descriptor instead.
func (*ListMcpServersRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{32}
}

func (x *ListMcpServersRequest) GetStatusFilter() McpServerStatus {
	if x != nil {
		return x.StatusFilter
	}
	return McpServerStatus_MCP_SERVER_STATUS_UNSPECIFIED
}

func (x *ListMcpServersRequest) GetTagFilters() []string {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

func (x *ListMcpServersRequest) GetIncludeStats() bool {
	if x != nil {
		return x.IncludeStats
	}
	return false
}

func (x *ListMcpServersRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMcpServersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListMcpServersReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Servers       []*McpServer           `protobuf:"bytes,1,rep,name=servers,proto3" json:"servers,omitempty"`                    // 服务器列表
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 总数
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页面大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMcpServersReply) Reset() {
	*x = ListMcpServersReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMcpServersReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMcpServersReply) ProtoMessage() {}

func (x *ListMcpServersReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMcpServersReply.ProtoReflect.Descriptor instead.
func (*ListMcpServersReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{33}
}

func (x *ListMcpServersReply) GetServers() []*McpServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

func (x *ListMcpServersReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListMcpServersReply) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMcpServersReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取MCP服务器
type GetMcpServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                             // 服务器ID
	IncludeStats  bool                   `protobuf:"varint,2,opt,name=include_stats,json=includeStats,proto3" json:"include_stats,omitempty"`    // 是否包含统计信息
	IncludeHealth bool                   `protobuf:"varint,3,opt,name=include_health,json=includeHealth,proto3" json:"include_health,omitempty"` // 是否包含健康状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMcpServerRequest) Reset() {
	*x = GetMcpServerRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMcpServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMcpServerRequest) ProtoMessage() {}

func (x *GetMcpServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMcpServerRequest.ProtoReflect.Descriptor instead.
func (*GetMcpServerRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{34}
}

func (x *GetMcpServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetMcpServerRequest) GetIncludeStats() bool {
	if x != nil {
		return x.IncludeStats
	}
	return false
}

func (x *GetMcpServerRequest) GetIncludeHealth() bool {
	if x != nil {
		return x.IncludeHealth
	}
	return false
}

type GetMcpServerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        *McpServer             `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"` // 服务器信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMcpServerReply) Reset() {
	*x = GetMcpServerReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMcpServerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMcpServerReply) ProtoMessage() {}

func (x *GetMcpServerReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMcpServerReply.ProtoReflect.Descriptor instead.
func (*GetMcpServerReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{35}
}

func (x *GetMcpServerReply) GetServer() *McpServer {
	if x != nil {
		return x.Server
	}
	return nil
}

// 注册MCP服务器
type RegisterMcpServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                   // 服务器名称
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                                                     // 服务器描述
	Endpoint      string                 `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`                                                                           // 服务器端点
	Config        *McpServerConfig       `protobuf:"bytes,4,opt,name=config,proto3" json:"config,omitempty"`                                                                               // 服务器配置
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 服务器元数据
	Tags          []string               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`                                                                                   // 标签
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterMcpServerRequest) Reset() {
	*x = RegisterMcpServerRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterMcpServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMcpServerRequest) ProtoMessage() {}

func (x *RegisterMcpServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMcpServerRequest.ProtoReflect.Descriptor instead.
func (*RegisterMcpServerRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{36}
}

func (x *RegisterMcpServerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterMcpServerRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *RegisterMcpServerRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *RegisterMcpServerRequest) GetConfig() *McpServerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *RegisterMcpServerRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegisterMcpServerRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type RegisterMcpServerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        *McpServer             `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"` // 注册的服务器
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterMcpServerReply) Reset() {
	*x = RegisterMcpServerReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterMcpServerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterMcpServerReply) ProtoMessage() {}

func (x *RegisterMcpServerReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterMcpServerReply.ProtoReflect.Descriptor instead.
func (*RegisterMcpServerReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{37}
}

func (x *RegisterMcpServerReply) GetServer() *McpServer {
	if x != nil {
		return x.Server
	}
	return nil
}

// 更新MCP服务器
type UpdateMcpServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                       // 服务器ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                   // 服务器名称(可选)
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                                     // 服务器描述(可选)
	Endpoint      string                 `protobuf:"bytes,4,opt,name=endpoint,proto3" json:"endpoint,omitempty"`                                                                           // 服务器端点(可选)
	Config        *McpServerConfig       `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`                                                                               // 服务器配置(可选)
	Metadata      map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 服务器元数据(可选)
	Tags          []string               `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`                                                                                   // 标签(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMcpServerRequest) Reset() {
	*x = UpdateMcpServerRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMcpServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMcpServerRequest) ProtoMessage() {}

func (x *UpdateMcpServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMcpServerRequest.ProtoReflect.Descriptor instead.
func (*UpdateMcpServerRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{38}
}

func (x *UpdateMcpServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateMcpServerRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateMcpServerRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateMcpServerRequest) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *UpdateMcpServerRequest) GetConfig() *McpServerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateMcpServerRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateMcpServerRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateMcpServerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Server        *McpServer             `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"` // 更新后的服务器
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMcpServerReply) Reset() {
	*x = UpdateMcpServerReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMcpServerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMcpServerReply) ProtoMessage() {}

func (x *UpdateMcpServerReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMcpServerReply.ProtoReflect.Descriptor instead.
func (*UpdateMcpServerReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateMcpServerReply) GetServer() *McpServer {
	if x != nil {
		return x.Server
	}
	return nil
}

// 删除MCP服务器
type DeleteMcpServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                       // 服务器ID
	ForceDelete   bool                   `protobuf:"varint,2,opt,name=force_delete,json=forceDelete,proto3" json:"force_delete,omitempty"` // 是否强制删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMcpServerRequest) Reset() {
	*x = DeleteMcpServerRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMcpServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMcpServerRequest) ProtoMessage() {}

func (x *DeleteMcpServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMcpServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteMcpServerRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{40}
}

func (x *DeleteMcpServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteMcpServerRequest) GetForceDelete() bool {
	if x != nil {
		return x.ForceDelete
	}
	return false
}

type DeleteMcpServerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMcpServerReply) Reset() {
	*x = DeleteMcpServerReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMcpServerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMcpServerReply) ProtoMessage() {}

func (x *DeleteMcpServerReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMcpServerReply.ProtoReflect.Descriptor instead.
func (*DeleteMcpServerReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{41}
}

// 测试MCP服务器
type TestMcpServerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                // 服务器ID
	TestCases     []string               `protobuf:"bytes,2,rep,name=test_cases,json=testCases,proto3" json:"test_cases,omitempty"` // 测试用例
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMcpServerRequest) Reset() {
	*x = TestMcpServerRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMcpServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMcpServerRequest) ProtoMessage() {}

func (x *TestMcpServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMcpServerRequest.ProtoReflect.Descriptor instead.
func (*TestMcpServerRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{42}
}

func (x *TestMcpServerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TestMcpServerRequest) GetTestCases() []string {
	if x != nil {
		return x.TestCases
	}
	return nil
}

type TestMcpServerReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` // 测试是否成功
	Results       []*TestResult          `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`  // 测试结果
	Health        *HealthStatus          `protobuf:"bytes,3,opt,name=health,proto3" json:"health,omitempty"`    // 健康状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMcpServerReply) Reset() {
	*x = TestMcpServerReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMcpServerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMcpServerReply) ProtoMessage() {}

func (x *TestMcpServerReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMcpServerReply.ProtoReflect.Descriptor instead.
func (*TestMcpServerReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{43}
}

func (x *TestMcpServerReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *TestMcpServerReply) GetResults() []*TestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *TestMcpServerReply) GetHealth() *HealthStatus {
	if x != nil {
		return x.Health
	}
	return nil
}

type TestResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestCase      string                 `protobuf:"bytes,1,opt,name=test_case,json=testCase,proto3" json:"test_case,omitempty"` // 测试用例
	Passed        bool                   `protobuf:"varint,2,opt,name=passed,proto3" json:"passed,omitempty"`                    // 是否通过
	Message       string                 `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`                   // 测试消息
	Duration      *durationpb.Duration   `protobuf:"bytes,4,opt,name=duration,proto3" json:"duration,omitempty"`                 // 测试耗时
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{44}
}

func (x *TestResult) GetTestCase() string {
	if x != nil {
		return x.TestCase
	}
	return ""
}

func (x *TestResult) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

func (x *TestResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TestResult) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// 列出资源
type ListResourcesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     string                 `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`                                 // MCP服务器过滤(可选)
	MimeType      string                 `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                                    // MIME类型过滤(可选)
	TypeFilter    ResourceType           `protobuf:"varint,3,opt,name=type_filter,json=typeFilter,proto3,enum=api.ai.v1.ResourceType" json:"type_filter,omitempty"` // 资源类型过滤(可选)
	TagFilters    []string               `protobuf:"bytes,4,rep,name=tag_filters,json=tagFilters,proto3" json:"tag_filters,omitempty"`                              // 标签过滤(可选)
	Page          int32                  `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`                                                           // 页码
	PageSize      int32                  `protobuf:"varint,6,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                                   // 页面大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResourcesRequest) Reset() {
	*x = ListResourcesRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcesRequest) ProtoMessage() {}

func (x *ListResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcesRequest.ProtoReflect.Descriptor instead.
func (*ListResourcesRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{45}
}

func (x *ListResourcesRequest) GetMcpServer() string {
	if x != nil {
		return x.McpServer
	}
	return ""
}

func (x *ListResourcesRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *ListResourcesRequest) GetTypeFilter() ResourceType {
	if x != nil {
		return x.TypeFilter
	}
	return ResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *ListResourcesRequest) GetTagFilters() []string {
	if x != nil {
		return x.TagFilters
	}
	return nil
}

func (x *ListResourcesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListResourcesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type ListResourcesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resources     []*Resource            `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`                // 资源列表
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 总数
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页面大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResourcesReply) Reset() {
	*x = ListResourcesReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResourcesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcesReply) ProtoMessage() {}

func (x *ListResourcesReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcesReply.ProtoReflect.Descriptor instead.
func (*ListResourcesReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{46}
}

func (x *ListResourcesReply) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ListResourcesReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListResourcesReply) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListResourcesReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取资源
type GetResourceRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Uri            string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`                                              // 资源URI
	IncludeContent bool                   `protobuf:"varint,2,opt,name=include_content,json=includeContent,proto3" json:"include_content,omitempty"` // 是否包含内容
	UseCache       bool                   `protobuf:"varint,3,opt,name=use_cache,json=useCache,proto3" json:"use_cache,omitempty"`                   // 是否使用缓存
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetResourceRequest) Reset() {
	*x = GetResourceRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceRequest) ProtoMessage() {}

func (x *GetResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceRequest.ProtoReflect.Descriptor instead.
func (*GetResourceRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{47}
}

func (x *GetResourceRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *GetResourceRequest) GetIncludeContent() bool {
	if x != nil {
		return x.IncludeContent
	}
	return false
}

func (x *GetResourceRequest) GetUseCache() bool {
	if x != nil {
		return x.UseCache
	}
	return false
}

type GetResourceReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                                                                             // 资源内容
	MimeType      string                 `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                                                           // MIME类型
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 资源元数据
	ResourceInfo  *Resource              `protobuf:"bytes,4,opt,name=resource_info,json=resourceInfo,proto3" json:"resource_info,omitempty"`                                               // 资源信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourceReply) Reset() {
	*x = GetResourceReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceReply) ProtoMessage() {}

func (x *GetResourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceReply.ProtoReflect.Descriptor instead.
func (*GetResourceReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{48}
}

func (x *GetResourceReply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetResourceReply) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *GetResourceReply) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GetResourceReply) GetResourceInfo() *Resource {
	if x != nil {
		return x.ResourceInfo
	}
	return nil
}

// 搜索资源
type SearchResourcesRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Query           string                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`                                                                                                                      // 搜索查询
	McpServers      []string               `protobuf:"bytes,2,rep,name=mcp_servers,json=mcpServers,proto3" json:"mcp_servers,omitempty"`                                                                                          // MCP服务器过滤
	MimeTypes       []string               `protobuf:"bytes,3,rep,name=mime_types,json=mimeTypes,proto3" json:"mime_types,omitempty"`                                                                                             // MIME类型过滤
	MetadataFilters map[string]string      `protobuf:"bytes,4,rep,name=metadata_filters,json=metadataFilters,proto3" json:"metadata_filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 元数据过滤器
	Limit           int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`                                                                                                                     // 结果数量限制
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SearchResourcesRequest) Reset() {
	*x = SearchResourcesRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResourcesRequest) ProtoMessage() {}

func (x *SearchResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResourcesRequest.ProtoReflect.Descriptor instead.
func (*SearchResourcesRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{49}
}

func (x *SearchResourcesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchResourcesRequest) GetMcpServers() []string {
	if x != nil {
		return x.McpServers
	}
	return nil
}

func (x *SearchResourcesRequest) GetMimeTypes() []string {
	if x != nil {
		return x.MimeTypes
	}
	return nil
}

func (x *SearchResourcesRequest) GetMetadataFilters() map[string]string {
	if x != nil {
		return x.MetadataFilters
	}
	return nil
}

func (x *SearchResourcesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SearchResourcesReply struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Results       []*ResourceSearchResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`                          // 搜索结果
	TotalCount    int32                   `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总结果数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResourcesReply) Reset() {
	*x = SearchResourcesReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResourcesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResourcesReply) ProtoMessage() {}

func (x *SearchResourcesReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResourcesReply.ProtoReflect.Descriptor instead.
func (*SearchResourcesReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{50}
}

func (x *SearchResourcesReply) GetResults() []*ResourceSearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchResourcesReply) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ResourceSearchResult struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Resource       *Resource              `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`                                     // 资源信息
	RelevanceScore float64                `protobuf:"fixed64,2,opt,name=relevance_score,json=relevanceScore,proto3" json:"relevance_score,omitempty"` // 相关性分数
	MatchedFields  []string               `protobuf:"bytes,3,rep,name=matched_fields,json=matchedFields,proto3" json:"matched_fields,omitempty"`      // 匹配的字段
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ResourceSearchResult) Reset() {
	*x = ResourceSearchResult{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSearchResult) ProtoMessage() {}

func (x *ResourceSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSearchResult.ProtoReflect.Descriptor instead.
func (*ResourceSearchResult) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{51}
}

func (x *ResourceSearchResult) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *ResourceSearchResult) GetRelevanceScore() float64 {
	if x != nil {
		return x.RelevanceScore
	}
	return 0
}

func (x *ResourceSearchResult) GetMatchedFields() []string {
	if x != nil {
		return x.MatchedFields
	}
	return nil
}

// 监视资源
type WatchResourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`                                 // 资源URI
	EventTypes    []string               `protobuf:"bytes,2,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"` // 关注的事件类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchResourceRequest) Reset() {
	*x = WatchResourceRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchResourceRequest) ProtoMessage() {}

func (x *WatchResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchResourceRequest.ProtoReflect.Descriptor instead.
func (*WatchResourceRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{52}
}

func (x *WatchResourceRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *WatchResourceRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

type WatchResourceReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EventType     string                 `protobuf:"bytes,1,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`                                                                           // 事件类型
	Resource      *Resource              `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`                                                                                              // 资源信息
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                                            // 事件时间
	EventData     map[string]string      `protobuf:"bytes,4,rep,name=event_data,json=eventData,proto3" json:"event_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 事件数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WatchResourceReply) Reset() {
	*x = WatchResourceReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WatchResourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchResourceReply) ProtoMessage() {}

func (x *WatchResourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchResourceReply.ProtoReflect.Descriptor instead.
func (*WatchResourceReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{53}
}

func (x *WatchResourceReply) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *WatchResourceReply) GetResource() *Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *WatchResourceReply) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *WatchResourceReply) GetEventData() map[string]string {
	if x != nil {
		return x.EventData
	}
	return nil
}

// 获取工具执行历史
type GetToolExecutionHistoryRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ToolName       string                 `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`                                                 // 工具名称(可选)
	UserId         string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                       // 用户ID(可选)
	ConversationId string                 `protobuf:"bytes,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`                               // 对话ID(可选)
	StartTime      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                                              // 开始时间(可选)
	EndTime        *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                                                    // 结束时间(可选)
	StatusFilter   ToolExecutionStatus    `protobuf:"varint,6,opt,name=status_filter,json=statusFilter,proto3,enum=api.ai.v1.ToolExecutionStatus" json:"status_filter,omitempty"` // 状态过滤(可选)
	Page           int32                  `protobuf:"varint,7,opt,name=page,proto3" json:"page,omitempty"`                                                                        // 页码
	PageSize       int32                  `protobuf:"varint,8,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                                                // 页面大小
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetToolExecutionHistoryRequest) Reset() {
	*x = GetToolExecutionHistoryRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolExecutionHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolExecutionHistoryRequest) ProtoMessage() {}

func (x *GetToolExecutionHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolExecutionHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetToolExecutionHistoryRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{54}
}

func (x *GetToolExecutionHistoryRequest) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *GetToolExecutionHistoryRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetToolExecutionHistoryRequest) GetConversationId() string {
	if x != nil {
		return x.ConversationId
	}
	return ""
}

func (x *GetToolExecutionHistoryRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetToolExecutionHistoryRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetToolExecutionHistoryRequest) GetStatusFilter() ToolExecutionStatus {
	if x != nil {
		return x.StatusFilter
	}
	return ToolExecutionStatus_TOOL_EXECUTION_STATUS_UNSPECIFIED
}

func (x *GetToolExecutionHistoryRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetToolExecutionHistoryRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetToolExecutionHistoryReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Executions    []*ToolExecution       `protobuf:"bytes,1,rep,name=executions,proto3" json:"executions,omitempty"`              // 执行历史
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 总数
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页面大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetToolExecutionHistoryReply) Reset() {
	*x = GetToolExecutionHistoryReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolExecutionHistoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolExecutionHistoryReply) ProtoMessage() {}

func (x *GetToolExecutionHistoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolExecutionHistoryReply.ProtoReflect.Descriptor instead.
func (*GetToolExecutionHistoryReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{55}
}

func (x *GetToolExecutionHistoryReply) GetExecutions() []*ToolExecution {
	if x != nil {
		return x.Executions
	}
	return nil
}

func (x *GetToolExecutionHistoryReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetToolExecutionHistoryReply) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetToolExecutionHistoryReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 获取工具执行统计
type GetToolExecutionStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolName      string                 `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"`    // 工具名称(可选)
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"` // 开始时间(可选)
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // 结束时间(可选)
	GroupBy       string                 `protobuf:"bytes,4,opt,name=group_by,json=groupBy,proto3" json:"group_by,omitempty"`       // 分组字段(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetToolExecutionStatsRequest) Reset() {
	*x = GetToolExecutionStatsRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[56]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolExecutionStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolExecutionStatsRequest) ProtoMessage() {}

func (x *GetToolExecutionStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[56]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolExecutionStatsRequest.ProtoReflect.Descriptor instead.
func (*GetToolExecutionStatsRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{56}
}

func (x *GetToolExecutionStatsRequest) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *GetToolExecutionStatsRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetToolExecutionStatsRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetToolExecutionStatsRequest) GetGroupBy() string {
	if x != nil {
		return x.GroupBy
	}
	return ""
}

type GetToolExecutionStatsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolStats     map[string]*ToolStats  `protobuf:"bytes,1,rep,name=tool_stats,json=toolStats,proto3" json:"tool_stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 工具统计映射
	Summary       *ExecutionSummary      `protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`                                                                                                // 执行摘要
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetToolExecutionStatsReply) Reset() {
	*x = GetToolExecutionStatsReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[57]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolExecutionStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolExecutionStatsReply) ProtoMessage() {}

func (x *GetToolExecutionStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[57]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolExecutionStatsReply.ProtoReflect.Descriptor instead.
func (*GetToolExecutionStatsReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{57}
}

func (x *GetToolExecutionStatsReply) GetToolStats() map[string]*ToolStats {
	if x != nil {
		return x.ToolStats
	}
	return nil
}

func (x *GetToolExecutionStatsReply) GetSummary() *ExecutionSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

type ExecutionSummary struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	TotalExecutions    int64                  `protobuf:"varint,1,opt,name=total_executions,json=totalExecutions,proto3" json:"total_executions,omitempty"`                                                                                    // 总执行次数
	AverageDuration    float64                `protobuf:"fixed64,2,opt,name=average_duration,json=averageDuration,proto3" json:"average_duration,omitempty"`                                                                                   // 平均持续时间
	SuccessRate        float64                `protobuf:"fixed64,3,opt,name=success_rate,json=successRate,proto3" json:"success_rate,omitempty"`                                                                                               // 成功率
	TotalCost          float64                `protobuf:"fixed64,4,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`                                                                                                     // 总成本
	StatusDistribution map[string]int64       `protobuf:"bytes,5,rep,name=status_distribution,json=statusDistribution,proto3" json:"status_distribution,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 状态分布
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ExecutionSummary) Reset() {
	*x = ExecutionSummary{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[58]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionSummary) ProtoMessage() {}

func (x *ExecutionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[58]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionSummary.ProtoReflect.Descriptor instead.
func (*ExecutionSummary) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{58}
}

func (x *ExecutionSummary) GetTotalExecutions() int64 {
	if x != nil {
		return x.TotalExecutions
	}
	return 0
}

func (x *ExecutionSummary) GetAverageDuration() float64 {
	if x != nil {
		return x.AverageDuration
	}
	return 0
}

func (x *ExecutionSummary) GetSuccessRate() float64 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *ExecutionSummary) GetTotalCost() float64 {
	if x != nil {
		return x.TotalCost
	}
	return 0
}

func (x *ExecutionSummary) GetStatusDistribution() map[string]int64 {
	if x != nil {
		return x.StatusDistribution
	}
	return nil
}

// 启用工具
type EnableToolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolName      string                 `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"` // 工具名称
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`                     // 启用原因(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableToolRequest) Reset() {
	*x = EnableToolRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[59]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableToolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableToolRequest) ProtoMessage() {}

func (x *EnableToolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[59]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableToolRequest.ProtoReflect.Descriptor instead.
func (*EnableToolRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{59}
}

func (x *EnableToolRequest) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *EnableToolRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type EnableToolReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnableToolReply) Reset() {
	*x = EnableToolReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[60]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnableToolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableToolReply) ProtoMessage() {}

func (x *EnableToolReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[60]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableToolReply.ProtoReflect.Descriptor instead.
func (*EnableToolReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{60}
}

// 禁用工具
type DisableToolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolName      string                 `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"` // 工具名称
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`                     // 禁用原因(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableToolRequest) Reset() {
	*x = DisableToolRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[61]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableToolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableToolRequest) ProtoMessage() {}

func (x *DisableToolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[61]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableToolRequest.ProtoReflect.Descriptor instead.
func (*DisableToolRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{61}
}

func (x *DisableToolRequest) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *DisableToolRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type DisableToolReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DisableToolReply) Reset() {
	*x = DisableToolReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[62]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisableToolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableToolReply) ProtoMessage() {}

func (x *DisableToolReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[62]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableToolReply.ProtoReflect.Descriptor instead.
func (*DisableToolReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{62}
}

// 配置工具
type ConfigureToolRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolName      string                 `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"` // 工具名称
	Config        *ToolConfig            `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`                     // 工具配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureToolRequest) Reset() {
	*x = ConfigureToolRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[63]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureToolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureToolRequest) ProtoMessage() {}

func (x *ConfigureToolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[63]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureToolRequest.ProtoReflect.Descriptor instead.
func (*ConfigureToolRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{63}
}

func (x *ConfigureToolRequest) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

func (x *ConfigureToolRequest) GetConfig() *ToolConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConfigureToolReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureToolReply) Reset() {
	*x = ConfigureToolReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[64]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureToolReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureToolReply) ProtoMessage() {}

func (x *ConfigureToolReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[64]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureToolReply.ProtoReflect.Descriptor instead.
func (*ConfigureToolReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{64}
}

// 获取工具配置
type GetToolConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ToolName      string                 `protobuf:"bytes,1,opt,name=tool_name,json=toolName,proto3" json:"tool_name,omitempty"` // 工具名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetToolConfigRequest) Reset() {
	*x = GetToolConfigRequest{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[65]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolConfigRequest) ProtoMessage() {}

func (x *GetToolConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[65]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolConfigRequest.ProtoReflect.Descriptor instead.
func (*GetToolConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{65}
}

func (x *GetToolConfigRequest) GetToolName() string {
	if x != nil {
		return x.ToolName
	}
	return ""
}

type GetToolConfigReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Config        *ToolConfig            `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"` // 工具配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetToolConfigReply) Reset() {
	*x = GetToolConfigReply{}
	mi := &file_api_ai_v1_tool_proto_msgTypes[66]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolConfigReply) ProtoMessage() {}

func (x *GetToolConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_tool_proto_msgTypes[66]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolConfigReply.ProtoReflect.Descriptor instead.
func (*GetToolConfigReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_tool_proto_rawDescGZIP(), []int{66}
}

func (x *GetToolConfigReply) GetConfig() *ToolConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

var File_api_ai_v1_tool_proto protoreflect.FileDescriptor

const file_api_ai_v1_tool_proto_rawDesc = "" +
	"\n" +
	"\x14api/ai/v1/tool.proto\x12\tapi.ai.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x19google/protobuf/any.proto\"\x86\x06\n" +
	"\bToolInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x16\n" +
	"\x06schema\x18\x03 \x01(\tR\x06schema\x12\x1d\n" +
	"\n" +
	"mcp_server\x18\x04 \x01(\tR\tmcpServer\x12=\n" +
	"\bmetadata\x18\x05 \x03(\v2!.api.ai.v1.ToolInfo.MetadataEntryR\bmetadata\x12\x18\n" +
	"\aenabled\x18\x06 \x01(\bR\aenabled\x12'\n" +
	"\x04type\x18\a \x01(\x0e2\x13.api.ai.v1.ToolTypeR\x04type\x123\n" +
	"\bcategory\x18\b \x01(\x0e2\x17.api.ai.v1.ToolCategoryR\bcategory\x12\x12\n" +
	"\x04tags\x18\t \x03(\tR\x04tags\x12-\n" +
	"\x06config\x18\n" +
	" \x01(\v2\x15.api.ai.v1.ToolConfigR\x06config\x12*\n" +
	"\x05stats\x18\v \x01(\v2\x14.api.ai.v1.ToolStatsR\x05stats\x12?\n" +
	"\x0esecurity_level\x18\f \x01(\x0e2\x18.api.ai.v1.SecurityLevelR\rsecurityLevel\x12=\n" +
	"\fdependencies\x18\r \x03(\v2\x19.api.ai.v1.ToolDependencyR\fdependencies\x124\n" +
	"\aversion\x18\x0e \x01(\v2\x1a.api.ai.v1.ToolVersionInfoR\aversion\x129\n" +
	"\n" +
	"created_at\x18\x0f \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa3\x05\n" +
	"\n" +
	"ToolConfig\x12'\n" +
	"\x0ftimeout_seconds\x18\x01 \x01(\x05R\x0etimeoutSeconds\x12\x1f\n" +
	"\vretry_count\x18\x02 \x01(\x05R\n" +
	"retryCount\x12#\n" +
	"\rcache_enabled\x18\x03 \x01(\bR\fcacheEnabled\x12*\n" +
	"\x11cache_ttl_seconds\x18\x04 \x01(\x05R\x0fcacheTtlSeconds\x121\n" +
	"\x15rate_limit_per_minute\x18\x05 \x01(\x05R\x12rateLimitPerMinute\x12'\n" +
	"\x0fasync_execution\x18\x06 \x01(\bR\x0easyncExecution\x12U\n" +
	"\x10environment_vars\x18\a \x03(\v2*.api.ai.v1.ToolConfig.EnvironmentVarsEntryR\x0fenvironmentVars\x121\n" +
	"\x14required_permissions\x18\b \x03(\tR\x13requiredPermissions\x12+\n" +
	"\x11execution_context\x18\t \x01(\tR\x10executionContext\x12L\n" +
	"\rcustom_config\x18\n" +
	" \x03(\v2'.api.ai.v1.ToolConfig.CustomConfigEntryR\fcustomConfig\x1aB\n" +
	"\x14EnvironmentVarsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aU\n" +
	"\x11CustomConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\"\xae\x03\n" +
	"\tToolStats\x12\x1f\n" +
	"\vtotal_calls\x18\x01 \x01(\x03R\n" +
	"totalCalls\x12)\n" +
	"\x10successful_calls\x18\x02 \x01(\x03R\x0fsuccessfulCalls\x12!\n" +
	"\ffailed_calls\x18\x03 \x01(\x03R\vfailedCalls\x12)\n" +
	"\x10average_duration\x18\x04 \x01(\x01R\x0faverageDuration\x12;\n" +
	"\vlast_called\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"lastCalled\x12!\n" +
	"\fsuccess_rate\x18\x06 \x01(\x01R\vsuccessRate\x12H\n" +
	"\ferror_counts\x18\a \x03(\v2%.api.ai.v1.ToolStats.ErrorCountsEntryR\verrorCounts\x12\x1d\n" +
	"\n" +
	"total_cost\x18\b \x01(\x01R\ttotalCost\x1a>\n" +
	"\x10ErrorCountsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xa7\x01\n" +
	"\x0eToolDependency\x12\x1b\n" +
	"\ttool_name\x18\x01 \x01(\tR\btoolName\x12-\n" +
	"\x04type\x18\x02 \x01(\x0e2\x19.api.ai.v1.DependencyTypeR\x04type\x12\x1a\n" +
	"\brequired\x18\x03 \x01(\bR\brequired\x12-\n" +
	"\x12version_constraint\x18\x04 \x01(\tR\x11versionConstraint\"\xd9\x01\n" +
	"\x0fToolVersionInfo\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x1c\n" +
	"\tchangelog\x18\x02 \x01(\tR\tchangelog\x12\x1e\n" +
	"\n" +
	"deprecated\x18\x03 \x01(\bR\n" +
	"deprecated\x12/\n" +
	"\x13deprecation_message\x18\x04 \x01(\tR\x12deprecationMessage\x12=\n" +
	"\frelease_date\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\vreleaseDate\"\x87\x06\n" +
	"\tMcpServer\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1a\n" +
	"\bendpoint\x18\x04 \x01(\tR\bendpoint\x122\n" +
	"\x06status\x18\x05 \x01(\x0e2\x1a.api.ai.v1.McpServerStatusR\x06status\x122\n" +
	"\x06config\x18\x06 \x01(\v2\x1a.api.ai.v1.McpServerConfigR\x06config\x12>\n" +
	"\bmetadata\x18\a \x03(\v2\".api.ai.v1.McpServer.MetadataEntryR\bmetadata\x129\n" +
	"\n" +
	"created_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x18\n" +
	"\aversion\x18\n" +
	" \x01(\tR\aversion\x12/\n" +
	"\x13supported_protocols\x18\v \x03(\tR\x12supportedProtocols\x12/\n" +
	"\x05stats\x18\f \x01(\v2\x19.api.ai.v1.McpServerStatsR\x05stats\x12/\n" +
	"\x06health\x18\r \x01(\v2\x17.api.ai.v1.HealthStatusR\x06health\x12\"\n" +
	"\fcapabilities\x18\x0e \x03(\tR\fcapabilities\x12\x14\n" +
	"\x05owner\x18\x0f \x01(\tR\x05owner\x12\x12\n" +
	"\x04tags\x18\x10 \x03(\tR\x04tags\x12B\n" +
	"\x0fsecurity_policy\x18\x11 \x01(\v2\x19.api.ai.v1.SecurityPolicyR\x0esecurityPolicy\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa8\x06\n" +
	"\x0fMcpServerConfig\x12%\n" +
	"\x0etransport_type\x18\x01 \x01(\tR\rtransportType\x12]\n" +
	"\x11connection_params\x18\x02 \x03(\v20.api.ai.v1.McpServerConfig.ConnectionParamsEntryR\x10connectionParams\x12-\n" +
	"\x12connection_timeout\x18\x03 \x01(\x05R\x11connectionTimeout\x12'\n" +
	"\x0frequest_timeout\x18\x04 \x01(\x05R\x0erequestTimeout\x12\x1f\n" +
	"\vmax_retries\x18\x05 \x01(\x05R\n" +
	"maxRetries\x12\x1f\n" +
	"\vssl_enabled\x18\x06 \x01(\bR\n" +
	"sslEnabled\x12\"\n" +
	"\rssl_cert_path\x18\a \x01(\tR\vsslCertPath\x127\n" +
	"\x17authentication_required\x18\b \x01(\bR\x16authenticationRequired\x12K\n" +
	"\vauth_config\x18\t \x03(\v2*.api.ai.v1.McpServerConfig.AuthConfigEntryR\n" +
	"authConfig\x12\x1d\n" +
	"\n" +
	"rate_limit\x18\n" +
	" \x01(\x05R\trateLimit\x12Q\n" +
	"\rcustom_config\x18\v \x03(\v2,.api.ai.v1.McpServerConfig.CustomConfigEntryR\fcustomConfig\x1aC\n" +
	"\x15ConnectionParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fAuthConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aU\n" +
	"\x11CustomConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\"\xf4\x03\n" +
	"\x0eMcpServerStats\x12%\n" +
	"\x0etotal_requests\x18\x01 \x01(\x03R\rtotalRequests\x12/\n" +
	"\x13successful_requests\x18\x02 \x01(\x03R\x12successfulRequests\x12'\n" +
	"\x0ffailed_requests\x18\x03 \x01(\x03R\x0efailedRequests\x122\n" +
	"\x15average_response_time\x18\x04 \x01(\x01R\x13averageResponseTime\x12B\n" +
	"\x0flast_request_at\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\rlastRequestAt\x12-\n" +
	"\x12active_connections\x18\x06 \x01(\x03R\x11activeConnections\x12M\n" +
	"\ferror_counts\x18\a \x03(\v2*.api.ai.v1.McpServerStats.ErrorCountsEntryR\verrorCounts\x12+\n" +
	"\x11uptime_percentage\x18\b \x01(\x01R\x10uptimePercentage\x1a>\n" +
	"\x10ErrorCountsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xc1\x01\n" +
	"\fHealthStatus\x12,\n" +
	"\x05level\x18\x01 \x01(\x0e2\x16.api.ai.v1.HealthLevelR\x05level\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x129\n" +
	"\n" +
	"last_check\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tlastCheck\x12.\n" +
	"\x06checks\x18\x04 \x03(\v2\x16.api.ai.v1.HealthCheckR\x06checks\"\xa2\x01\n" +
	"\vHealthCheck\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12.\n" +
	"\x06status\x18\x02 \x01(\x0e2\x16.api.ai.v1.HealthLevelR\x06status\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x125\n" +
	"\bduration\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\bduration\"\xb7\x03\n" +
	"\x0eSecurityPolicy\x12'\n" +
	"\x0fallowed_origins\x18\x01 \x03(\tR\x0eallowedOrigins\x12'\n" +
	"\x0fblocked_origins\x18\x02 \x03(\tR\x0eblockedOrigins\x121\n" +
	"\x14required_permissions\x18\x03 \x03(\tR\x13requiredPermissions\x12#\n" +
	"\raudit_enabled\x18\x04 \x01(\bR\fauditEnabled\x12(\n" +
	"\x10max_request_size\x18\x05 \x01(\x05R\x0emaxRequestSize\x122\n" +
	"\x15rate_limiting_enabled\x18\x06 \x01(\bR\x13rateLimitingEnabled\x12Y\n" +
	"\x10security_headers\x18\a \x03(\v2..api.ai.v1.SecurityPolicy.SecurityHeadersEntryR\x0fsecurityHeaders\x1aB\n" +
	"\x14SecurityHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd8\x04\n" +
	"\bResource\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1b\n" +
	"\tmime_type\x18\x04 \x01(\tR\bmimeType\x12\x1d\n" +
	"\n" +
	"mcp_server\x18\x05 \x01(\tR\tmcpServer\x12=\n" +
	"\bmetadata\x18\x06 \x03(\v2!.api.ai.v1.Resource.MetadataEntryR\bmetadata\x12+\n" +
	"\x04type\x18\a \x01(\x0e2\x17.api.ai.v1.ResourceTypeR\x04type\x12\x12\n" +
	"\x04size\x18\b \x01(\x03R\x04size\x12\x12\n" +
	"\x04hash\x18\t \x01(\tR\x04hash\x12\x16\n" +
	"\x06cached\x18\n" +
	" \x01(\bR\x06cached\x12?\n" +
	"\rlast_modified\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\flastModified\x12@\n" +
	"\vpermissions\x18\f \x01(\v2\x1e.api.ai.v1.ResourcePermissionsR\vpermissions\x12\x12\n" +
	"\x04tags\x18\r \x03(\tR\x04tags\x12\x18\n" +
	"\aversion\x18\x0e \x01(\tR\aversion\x12.\n" +
	"\x05stats\x18\x0f \x01(\v2\x18.api.ai.v1.ResourceStatsR\x05stats\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd7\x01\n" +
	"\x13ResourcePermissions\x12\x1a\n" +
	"\breadable\x18\x01 \x01(\bR\breadable\x12\x1a\n" +
	"\bwritable\x18\x02 \x01(\bR\bwritable\x12\x1e\n" +
	"\n" +
	"executable\x18\x03 \x01(\bR\n" +
	"executable\x12\x1c\n" +
	"\tdeletable\x18\x04 \x01(\bR\tdeletable\x12%\n" +
	"\x0erequired_roles\x18\x05 \x03(\tR\rrequiredRoles\x12#\n" +
	"\rallowed_users\x18\x06 \x03(\tR\fallowedUsers\"\xd2\x01\n" +
	"\rResourceStats\x12!\n" +
	"\faccess_count\x18\x01 \x01(\x03R\vaccessCount\x12?\n" +
	"\rlast_accessed\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\flastAccessed\x12%\n" +
	"\x0edownload_count\x18\x03 \x01(\x03R\rdownloadCount\x126\n" +
	"\x17average_access_duration\x18\x04 \x01(\x01R\x15averageAccessDuration\"\xe7\x04\n" +
	"\rToolExecution\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\ttool_name\x18\x02 \x01(\tR\btoolName\x12\x1c\n" +
	"\targuments\x18\x03 \x01(\tR\targuments\x12\x16\n" +
	"\x06result\x18\x04 \x01(\tR\x06result\x126\n" +
	"\x06status\x18\x05 \x01(\x0e2\x1e.api.ai.v1.ToolExecutionStatusR\x06status\x12#\n" +
	"\rerror_message\x18\x06 \x01(\tR\ferrorMessage\x129\n" +
	"\n" +
	"started_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tstartedAt\x12=\n" +
	"\fcompleted_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\vcompletedAt\x125\n" +
	"\bduration\x18\t \x01(\v2\x19.google.protobuf.DurationR\bduration\x12\x17\n" +
	"\auser_id\x18\n" +
	" \x01(\tR\x06userId\x12'\n" +
	"\x0fconversation_id\x18\v \x01(\tR\x0econversationId\x125\n" +
	"\acontext\x18\f \x01(\v2\x1b.api.ai.v1.ExecutionContextR\acontext\x125\n" +
	"\ametrics\x18\r \x01(\v2\x1b.api.ai.v1.ExecutionMetricsR\ametrics\x12\x1a\n" +
	"\bwarnings\x18\x0e \x03(\tR\bwarnings\x12\x19\n" +
	"\btrace_id\x18\x0f \x01(\tR\atraceId\"\xae\x03\n" +
	"\x10ExecutionContext\x12N\n" +
	"\venvironment\x18\x01 \x03(\v2,.api.ai.v1.ExecutionContext.EnvironmentEntryR\venvironment\x12+\n" +
	"\x11working_directory\x18\x02 \x01(\tR\x10workingDirectory\x12 \n" +
	"\vpermissions\x18\x03 \x03(\tR\vpermissions\x12H\n" +
	"\tvariables\x18\x04 \x03(\v2*.api.ai.v1.ExecutionContext.VariablesEntryR\tvariables\x12\x1d\n" +
	"\n" +
	"session_id\x18\x05 \x01(\tR\tsessionId\x1a>\n" +
	"\x10EnvironmentEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aR\n" +
	"\x0eVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.google.protobuf.AnyR\x05value:\x028\x01\"\xf1\x01\n" +
	"\x10ExecutionMetrics\x12\x1f\n" +
	"\vmemory_used\x18\x01 \x01(\x03R\n" +
	"memoryUsed\x12\x1b\n" +
	"\tcpu_usage\x18\x02 \x01(\x01R\bcpuUsage\x12,\n" +
	"\x12network_bytes_sent\x18\x03 \x01(\x03R\x10networkBytesSent\x124\n" +
	"\x16network_bytes_received\x18\x04 \x01(\x03R\x14networkBytesReceived\x12'\n" +
	"\x0ffile_operations\x18\x05 \x01(\x05R\x0efileOperations\x12\x12\n" +
	"\x04cost\x18\x06 \x01(\x01R\x04cost\"\xe6\x02\n" +
	"\x10ListToolsRequest\x12\x1d\n" +
	"\n" +
	"mcp_server\x18\x01 \x01(\tR\tmcpServer\x12!\n" +
	"\fonly_enabled\x18\x02 \x01(\bR\vonlyEnabled\x124\n" +
	"\vtype_filter\x18\x03 \x01(\x0e2\x13.api.ai.v1.ToolTypeR\n" +
	"typeFilter\x12@\n" +
	"\x0fcategory_filter\x18\x04 \x01(\x0e2\x17.api.ai.v1.ToolCategoryR\x0ecategoryFilter\x12\x1f\n" +
	"\vtag_filters\x18\x05 \x03(\tR\n" +
	"tagFilters\x12F\n" +
	"\x12max_security_level\x18\x06 \x01(\x0e2\x18.api.ai.v1.SecurityLevelR\x10maxSecurityLevel\x12\x12\n" +
	"\x04page\x18\a \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\b \x01(\x05R\bpageSize\"\x82\x01\n" +
	"\x0eListToolsReply\x12)\n" +
	"\x05tools\x18\x01 \x03(\v2\x13.api.ai.v1.ToolInfoR\x05tools\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"p\n" +
	"\x0eGetToolRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12#\n" +
	"\rinclude_stats\x18\x02 \x01(\bR\fincludeStats\x12%\n" +
	"\x0einclude_config\x18\x03 \x01(\bR\rincludeConfig\"7\n" +
	"\fGetToolReply\x12'\n" +
	"\x04tool\x18\x01 \x01(\v2\x13.api.ai.v1.ToolInfoR\x04tool\"\xfd\x01\n" +
	"\x0fCallToolRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\targuments\x18\x02 \x01(\tR\targuments\x12'\n" +
	"\x0fconversation_id\x18\x03 \x01(\x03R\x0econversationId\x125\n" +
	"\acontext\x18\x04 \x01(\v2\x1b.api.ai.v1.ExecutionContextR\acontext\x12'\n" +
	"\x0ftimeout_seconds\x18\x05 \x01(\x05R\x0etimeoutSeconds\x12\x14\n" +
	"\x05async\x18\x06 \x01(\bR\x05async\x12\x19\n" +
	"\btrace_id\x18\a \x01(\tR\atraceId\"\x81\x03\n" +
	"\x10CallToolResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\tR\x06result\x126\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1e.api.ai.v1.ToolExecutionStatusR\x06status\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\x12E\n" +
	"\bmetadata\x18\x04 \x03(\v2).api.ai.v1.CallToolResponse.MetadataEntryR\bmetadata\x12!\n" +
	"\fexecution_id\x18\x05 \x01(\tR\vexecutionId\x125\n" +
	"\ametrics\x18\x06 \x01(\v2\x1b.api.ai.v1.ExecutionMetricsR\ametrics\x12\x1a\n" +
	"\bwarnings\x18\a \x03(\tR\bwarnings\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xdc\x01\n" +
	"\x16CallToolStreamResponse\x12\x14\n" +
	"\x05chunk\x18\x01 \x01(\tR\x05chunk\x126\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1e.api.ai.v1.ToolExecutionStatusR\x06status\x12\x1f\n" +
	"\vis_complete\x18\x03 \x01(\bR\n" +
	"isComplete\x12!\n" +
	"\ffinal_result\x18\x04 \x01(\tR\vfinalResult\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\x12\x1a\n" +
	"\bprogress\x18\x06 \x01(\x01R\bprogress\"*\n" +
	"\x14GetToolSchemaRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"=\n" +
	"\x12GetToolSchemaReply\x12'\n" +
	"\x04tool\x18\x01 \x01(\v2\x13.api.ai.v1.ToolInfoR\x04tool\"Y\n" +
	"\x1cValidateToolArgumentsRequest\x12\x1b\n" +
	"\ttool_name\x18\x01 \x01(\tR\btoolName\x12\x1c\n" +
	"\targuments\x18\x02 \x01(\tR\targuments\"\x99\x01\n" +
	"\x1aValidateToolArgumentsReply\x12\x14\n" +
	"\x05valid\x18\x01 \x01(\bR\x05valid\x12\x16\n" +
	"\x06errors\x18\x02 \x03(\tR\x06errors\x12\x1a\n" +
	"\bwarnings\x18\x03 \x03(\tR\bwarnings\x121\n" +
	"\x14normalized_arguments\x18\x04 \x01(\tR\x13normalizedArguments\"\xb9\x01\n" +
	"\x15BatchCallToolsRequest\x127\n" +
	"\n" +
	"tool_calls\x18\x01 \x03(\v2\x18.api.ai.v1.BatchToolCallR\ttoolCalls\x12\x1a\n" +
	"\bparallel\x18\x02 \x01(\bR\bparallel\x12'\n" +
	"\x0fmax_concurrency\x18\x03 \x01(\x05R\x0emaxConcurrency\x12\"\n" +
	"\rstop_on_error\x18\x04 \x01(\bR\vstopOnError\"\xa2\x01\n" +
	"\rBatchToolCall\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1b\n" +
	"\ttool_name\x18\x02 \x01(\tR\btoolName\x12\x1c\n" +
	"\targuments\x18\x03 \x01(\tR\targuments\x12\x1d\n" +
	"\n" +
	"depends_on\x18\x04 \x03(\tR\tdependsOn\x12'\n" +
	"\x0ftimeout_seconds\x18\x05 \x01(\x05R\x0etimeoutSeconds\"\xb4\x01\n" +
	"\x13BatchCallToolsReply\x124\n" +
	"\aresults\x18\x01 \x03(\v2\x1a.api.ai.v1.BatchToolResultR\aresults\x12\x1f\n" +
	"\vall_success\x18\x02 \x01(\bR\n" +
	"allSuccess\x12#\n" +
	"\rsuccess_count\x18\x03 \x01(\x05R\fsuccessCount\x12!\n" +
	"\ffailed_count\x18\x04 \x01(\x05R\vfailedCount\"Z\n" +
	"\x0fBatchToolResult\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x127\n" +
	"\bresponse\x18\x02 \x01(\v2\x1b.api.ai.v1.CallToolResponseR\bresponse\"\xcf\x01\n" +
	"\x15ListMcpServersRequest\x12?\n" +
	"\rstatus_filter\x18\x01 \x01(\x0e2\x1a.api.ai.v1.McpServerStatusR\fstatusFilter\x12\x1f\n" +
	"\vtag_filters\x18\x02 \x03(\tR\n" +
	"tagFilters\x12#\n" +
	"\rinclude_stats\x18\x03 \x01(\bR\fincludeStats\x12\x12\n" +
	"\x04page\x18\x04 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x05 \x01(\x05R\bpageSize\"\x8c\x01\n" +
	"\x13ListMcpServersReply\x12.\n" +
	"\aservers\x18\x01 \x03(\v2\x14.api.ai.v1.McpServerR\aservers\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"q\n" +
	"\x13GetMcpServerRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12#\n" +
	"\rinclude_stats\x18\x02 \x01(\bR\fincludeStats\x12%\n" +
	"\x0einclude_health\x18\x03 \x01(\bR\rincludeHealth\"A\n" +
	"\x11GetMcpServerReply\x12,\n" +
	"\x06server\x18\x01 \x01(\v2\x14.api.ai.v1.McpServerR\x06server\"\xc0\x02\n" +
	"\x18RegisterMcpServerRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x1a\n" +
	"\bendpoint\x18\x03 \x01(\tR\bendpoint\x122\n" +
	"\x06config\x18\x04 \x01(\v2\x1a.api.ai.v1.McpServerConfigR\x06config\x12M\n" +
	"\bmetadata\x18\x05 \x03(\v21.api.ai.v1.RegisterMcpServerRequest.MetadataEntryR\bmetadata\x12\x12\n" +
	"\x04tags\x18\x06 \x03(\tR\x04tags\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"F\n" +
	"\x16RegisterMcpServerReply\x12,\n" +
	"\x06server\x18\x01 \x01(\v2\x14.api.ai.v1.McpServerR\x06server\"\xcc\x02\n" +
	"\x16UpdateMcpServerRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1a\n" +
	"\bendpoint\x18\x04 \x01(\tR\bendpoint\x122\n" +
	"\x06config\x18\x05 \x01(\v2\x1a.api.ai.v1.McpServerConfigR\x06config\x12K\n" +
	"\bmetadata\x18\x06 \x03(\v2/.api.ai.v1.UpdateMcpServerRequest.MetadataEntryR\bmetadata\x12\x12\n" +
	"\x04tags\x18\a \x03(\tR\x04tags\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"D\n" +
	"\x14UpdateMcpServerReply\x12,\n" +
	"\x06server\x18\x01 \x01(\v2\x14.api.ai.v1.McpServerR\x06server\"K\n" +
	"\x16DeleteMcpServerRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12!\n" +
	"\fforce_delete\x18\x02 \x01(\bR\vforceDelete\"\x16\n" +
	"\x14DeleteMcpServerReply\"E\n" +
	"\x14TestMcpServerRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"test_cases\x18\x02 \x03(\tR\ttestCases\"\x90\x01\n" +
	"\x12TestMcpServerReply\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12/\n" +
	"\aresults\x18\x02 \x03(\v2\x15.api.ai.v1.TestResultR\aresults\x12/\n" +
	"\x06health\x18\x03 \x01(\v2\x17.api.ai.v1.HealthStatusR\x06health\"\x92\x01\n" +
	"\n" +
	"TestResult\x12\x1b\n" +
	"\ttest_case\x18\x01 \x01(\tR\btestCase\x12\x16\n" +
	"\x06passed\x18\x02 \x01(\bR\x06passed\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x125\n" +
	"\bduration\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\bduration\"\xde\x01\n" +
	"\x14ListResourcesRequest\x12\x1d\n" +
	"\n" +
	"mcp_server\x18\x01 \x01(\tR\tmcpServer\x12\x1b\n" +
	"\tmime_type\x18\x02 \x01(\tR\bmimeType\x128\n" +
	"\vtype_filter\x18\x03 \x01(\x0e2\x17.api.ai.v1.ResourceTypeR\n" +
	"typeFilter\x12\x1f\n" +
	"\vtag_filters\x18\x04 \x03(\tR\n" +
	"tagFilters\x12\x12\n" +
	"\x04page\x18\x05 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x06 \x01(\x05R\bpageSize\"\x8e\x01\n" +
	"\x12ListResourcesReply\x121\n" +
	"\tresources\x18\x01 \x03(\v2\x13.api.ai.v1.ResourceR\tresources\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"l\n" +
	"\x12GetResourceRequest\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12'\n" +
	"\x0finclude_content\x18\x02 \x01(\bR\x0eincludeContent\x12\x1b\n" +
	"\tuse_cache\x18\x03 \x01(\bR\buseCache\"\x87\x02\n" +
	"\x10GetResourceReply\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x12\x1b\n" +
	"\tmime_type\x18\x02 \x01(\tR\bmimeType\x12E\n" +
	"\bmetadata\x18\x03 \x03(\v2).api.ai.v1.GetResourceReply.MetadataEntryR\bmetadata\x128\n" +
	"\rresource_info\x18\x04 \x01(\v2\x13.api.ai.v1.ResourceR\fresourceInfo\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xab\x02\n" +
	"\x16SearchResourcesRequest\x12\x14\n" +
	"\x05query\x18\x01 \x01(\tR\x05query\x12\x1f\n" +
	"\vmcp_servers\x18\x02 \x03(\tR\n" +
	"mcpServers\x12\x1d\n" +
	"\n" +
	"mime_types\x18\x03 \x03(\tR\tmimeTypes\x12a\n" +
	"\x10metadata_filters\x18\x04 \x03(\v26.api.ai.v1.SearchResourcesRequest.MetadataFiltersEntryR\x0fmetadataFilters\x12\x14\n" +
	"\x05limit\x18\x05 \x01(\x05R\x05limit\x1aB\n" +
	"\x14MetadataFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"r\n" +
	"\x14SearchResourcesReply\x129\n" +
	"\aresults\x18\x01 \x03(\v2\x1f.api.ai.v1.ResourceSearchResultR\aresults\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount\"\x97\x01\n" +
	"\x14ResourceSearchResult\x12/\n" +
	"\bresource\x18\x01 \x01(\v2\x13.api.ai.v1.ResourceR\bresource\x12'\n" +
	"\x0frelevance_score\x18\x02 \x01(\x01R\x0erelevanceScore\x12%\n" +
	"\x0ematched_fields\x18\x03 \x03(\tR\rmatchedFields\"I\n" +
	"\x14WatchResourceRequest\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x1f\n" +
	"\vevent_types\x18\x02 \x03(\tR\n" +
	"eventTypes\"\xa9\x02\n" +
	"\x12WatchResourceReply\x12\x1d\n" +
	"\n" +
	"event_type\x18\x01 \x01(\tR\teventType\x12/\n" +
	"\bresource\x18\x02 \x01(\v2\x13.api.ai.v1.ResourceR\bresource\x128\n" +
	"\ttimestamp\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12K\n" +
	"\n" +
	"event_data\x18\x04 \x03(\v2,.api.ai.v1.WatchResourceReply.EventDataEntryR\teventData\x1a<\n" +
	"\x0eEventDataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe7\x02\n" +
	"\x1eGetToolExecutionHistoryRequest\x12\x1b\n" +
	"\ttool_name\x18\x01 \x01(\tR\btoolName\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\tR\x06userId\x12'\n" +
	"\x0fconversation_id\x18\x03 \x01(\tR\x0econversationId\x129\n" +
	"\n" +
	"start_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12C\n" +
	"\rstatus_filter\x18\x06 \x01(\x0e2\x1e.api.ai.v1.ToolExecutionStatusR\fstatusFilter\x12\x12\n" +
	"\x04page\x18\a \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\b \x01(\x05R\bpageSize\"\x9f\x01\n" +
	"\x1cGetToolExecutionHistoryReply\x128\n" +
	"\n" +
	"executions\x18\x01 \x03(\v2\x18.api.ai.v1.ToolExecutionR\n" +
	"executions\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"\xc8\x01\n" +
	"\x1cGetToolExecutionStatsRequest\x12\x1b\n" +
	"\ttool_name\x18\x01 \x01(\tR\btoolName\x129\n" +
	"\n" +
	"start_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x19\n" +
	"\bgroup_by\x18\x04 \x01(\tR\agroupBy\"\xfc\x01\n" +
	"\x1aGetToolExecutionStatsReply\x12S\n" +
	"\n" +
	"tool_stats\x18\x01 \x03(\v24.api.ai.v1.GetToolExecutionStatsReply.ToolStatsEntryR\ttoolStats\x125\n" +
	"\asummary\x18\x02 \x01(\v2\x1b.api.ai.v1.ExecutionSummaryR\asummary\x1aR\n" +
	"\x0eToolStatsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.api.ai.v1.ToolStatsR\x05value:\x028\x01\"\xd7\x02\n" +
	"\x10ExecutionSummary\x12)\n" +
	"\x10total_executions\x18\x01 \x01(\x03R\x0ftotalExecutions\x12)\n" +
	"\x10average_duration\x18\x02 \x01(\x01R\x0faverageDuration\x12!\n" +
	"\fsuccess_rate\x18\x03 \x01(\x01R\vsuccessRate\x12\x1d\n" +
	"\n" +
	"total_cost\x18\x04 \x01(\x01R\ttotalCost\x12d\n" +
	"\x13status_distribution\x18\x05 \x03(\v23.api.ai.v1.ExecutionSummary.StatusDistributionEntryR\x12statusDistribution\x1aE\n" +
	"\x17StatusDistributionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"H\n" +
	"\x11EnableToolRequest\x12\x1b\n" +
	"\ttool_name\x18\x01 \x01(\tR\btoolName\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"\x11\n" +
	"\x0fEnableToolReply\"I\n" +
	"\x12DisableToolRequest\x12\x1b\n" +
	"\ttool_name\x18\x01 \x01(\tR\btoolName\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"\x12\n" +
	"\x10DisableToolReply\"b\n" +
	"\x14ConfigureToolRequest\x12\x1b\n" +
	"\ttool_name\x18\x01 \x01(\tR\btoolName\x12-\n" +
	"\x06config\x18\x02 \x01(\v2\x15.api.ai.v1.ToolConfigR\x06config\"\x14\n" +
	"\x12ConfigureToolReply\"3\n" +
	"\x14GetToolConfigRequest\x12\x1b\n" +
	"\ttool_name\x18\x01 \x01(\tR\btoolName\"C\n" +
	"\x12GetToolConfigReply\x12-\n" +
	"\x06config\x18\x01 \x01(\v2\x15.api.ai.v1.ToolConfigR\x06config*\xc0\x01\n" +
	"\bToolType\x12\x19\n" +
	"\x15TOOL_TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12TOOL_TYPE_FUNCTION\x10\x01\x12\x11\n" +
	"\rTOOL_TYPE_API\x10\x02\x12\x14\n" +
	"\x10TOOL_TYPE_SCRIPT\x10\x03\x12\x15\n" +
	"\x11TOOL_TYPE_SERVICE\x10\x04\x12\x16\n" +
	"\x12TOOL_TYPE_DATABASE\x10\x05\x12\x12\n" +
	"\x0eTOOL_TYPE_FILE\x10\x06\x12\x15\n" +
	"\x11TOOL_TYPE_NETWORK\x10\a*\xf9\x01\n" +
	"\fToolCategory\x12\x1d\n" +
	"\x19TOOL_CATEGORY_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aTOOL_CATEGORY_PRODUCTIVITY\x10\x01\x12\x1d\n" +
	"\x19TOOL_CATEGORY_DEVELOPMENT\x10\x02\x12\x1a\n" +
	"\x16TOOL_CATEGORY_ANALYSIS\x10\x03\x12\x1f\n" +
	"\x1bTOOL_CATEGORY_COMMUNICATION\x10\x04\x12\x19\n" +
	"\x15TOOL_CATEGORY_CONTENT\x10\x05\x12\x18\n" +
	"\x14TOOL_CATEGORY_SYSTEM\x10\x06\x12\x19\n" +
	"\x15TOOL_CATEGORY_UTILITY\x10\a*\x9f\x01\n" +
	"\rSecurityLevel\x12\x1e\n" +
	"\x1aSECURITY_LEVEL_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15SECURITY_LEVEL_PUBLIC\x10\x01\x12\x1d\n" +
	"\x19SECURITY_LEVEL_RESTRICTED\x10\x02\x12\x1a\n" +
	"\x16SECURITY_LEVEL_PRIVATE\x10\x03\x12\x18\n" +
	"\x14SECURITY_LEVEL_ADMIN\x10\x04*\x8f\x01\n" +
	"\x0eDependencyType\x12\x1f\n" +
	"\x1bDEPENDENCY_TYPE_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cDEPENDENCY_TYPE_PREREQUISITE\x10\x01\x12\x1c\n" +
	"\x18DEPENDENCY_TYPE_OPTIONAL\x10\x02\x12\x1c\n" +
	"\x18DEPENDENCY_TYPE_CONFLICT\x10\x03*\xd4\x01\n" +
	"\x0fMcpServerStatus\x12!\n" +
	"\x1dMCP_SERVER_STATUS_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18MCP_SERVER_STATUS_ACTIVE\x10\x01\x12\x1e\n" +
	"\x1aMCP_SERVER_STATUS_INACTIVE\x10\x02\x12\x1b\n" +
	"\x17MCP_SERVER_STATUS_ERROR\x10\x03\x12!\n" +
	"\x1dMCP_SERVER_STATUS_MAINTENANCE\x10\x04\x12 \n" +
	"\x1cMCP_SERVER_STATUS_DEPRECATED\x10\x05*\x94\x01\n" +
	"\vHealthLevel\x12\x1c\n" +
	"\x18HEALTH_LEVEL_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14HEALTH_LEVEL_HEALTHY\x10\x01\x12\x18\n" +
	"\x14HEALTH_LEVEL_WARNING\x10\x02\x12\x19\n" +
	"\x15HEALTH_LEVEL_CRITICAL\x10\x03\x12\x18\n" +
	"\x14HEALTH_LEVEL_UNKNOWN\x10\x04*\xc5\x01\n" +
	"\fResourceType\x12\x1d\n" +
	"\x19RESOURCE_TYPE_UNSPECIFIED\x10\x00\x12\x16\n" +
	"\x12RESOURCE_TYPE_FILE\x10\x01\x12\x1a\n" +
	"\x16RESOURCE_TYPE_DATABASE\x10\x02\x12\x15\n" +
	"\x11RESOURCE_TYPE_API\x10\x03\x12\x18\n" +
	"\x14RESOURCE_TYPE_STREAM\x10\x04\x12\x18\n" +
	"\x14RESOURCE_TYPE_MEMORY\x10\x05\x12\x17\n" +
	"\x13RESOURCE_TYPE_CACHE\x10\x06*\x8f\x02\n" +
	"\x13ToolExecutionStatus\x12%\n" +
	"!TOOL_EXECUTION_STATUS_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dTOOL_EXECUTION_STATUS_PENDING\x10\x01\x12!\n" +
	"\x1dTOOL_EXECUTION_STATUS_RUNNING\x10\x02\x12!\n" +
	"\x1dTOOL_EXECUTION_STATUS_SUCCESS\x10\x03\x12 \n" +
	"\x1cTOOL_EXECUTION_STATUS_FAILED\x10\x04\x12!\n" +
	"\x1dTOOL_EXECUTION_STATUS_TIMEOUT\x10\x05\x12#\n" +
	"\x1fTOOL_EXECUTION_STATUS_CANCELLED\x10\x062\x81\x0f\n" +
	"\x04Tool\x12C\n" +
	"\tListTools\x12\x1b.api.ai.v1.ListToolsRequest\x1a\x19.api.ai.v1.ListToolsReply\x12=\n" +
	"\aGetTool\x12\x19.api.ai.v1.GetToolRequest\x1a\x17.api.ai.v1.GetToolReply\x12C\n" +
	"\bCallTool\x12\x1a.api.ai.v1.CallToolRequest\x1a\x1b.api.ai.v1.CallToolResponse\x12Q\n" +
	"\x0eCallToolStream\x12\x1a.api.ai.v1.CallToolRequest\x1a!.api.ai.v1.CallToolStreamResponse0\x01\x12O\n" +
	"\rGetToolSchema\x12\x1f.api.ai.v1.GetToolSchemaRequest\x1a\x1d.api.ai.v1.GetToolSchemaReply\x12g\n" +
	"\x15ValidateToolArguments\x12'.api.ai.v1.ValidateToolArgumentsRequest\x1a%.api.ai.v1.ValidateToolArgumentsReply\x12R\n" +
	"\x0eBatchCallTools\x12 .api.ai.v1.BatchCallToolsRequest\x1a\x1e.api.ai.v1.BatchCallToolsReply\x12R\n" +
	"\x0eListMcpServers\x12 .api.ai.v1.ListMcpServersRequest\x1a\x1e.api.ai.v1.ListMcpServersReply\x12L\n" +
	"\fGetMcpServer\x12\x1e.api.ai.v1.GetMcpServerRequest\x1a\x1c.api.ai.v1.GetMcpServerReply\x12[\n" +
	"\x11RegisterMcpServer\x12#.api.ai.v1.RegisterMcpServerRequest\x1a!.api.ai.v1.RegisterMcpServerReply\x12U\n" +
	"\x0fUpdateMcpServer\x12!.api.ai.v1.UpdateMcpServerRequest\x1a\x1f.api.ai.v1.UpdateMcpServerReply\x12U\n" +
	"\x0fDeleteMcpServer\x12!.api.ai.v1.DeleteMcpServerRequest\x1a\x1f.api.ai.v1.DeleteMcpServerReply\x12O\n" +
	"\rTestMcpServer\x12\x1f.api.ai.v1.TestMcpServerRequest\x1a\x1d.api.ai.v1.TestMcpServerReply\x12O\n" +
	"\rListResources\x12\x1f.api.ai.v1.ListResourcesRequest\x1a\x1d.api.ai.v1.ListResourcesReply\x12I\n" +
	"\vGetResource\x12\x1d.api.ai.v1.GetResourceRequest\x1a\x1b.api.ai.v1.GetResourceReply\x12U\n" +
	"\x0fSearchResources\x12!.api.ai.v1.SearchResourcesRequest\x1a\x1f.api.ai.v1.SearchResourcesReply\x12Q\n" +
	"\rWatchResource\x12\x1f.api.ai.v1.WatchResourceRequest\x1a\x1d.api.ai.v1.WatchResourceReply0\x01\x12m\n" +
	"\x17GetToolExecutionHistory\x12).api.ai.v1.GetToolExecutionHistoryRequest\x1a'.api.ai.v1.GetToolExecutionHistoryReply\x12g\n" +
	"\x15GetToolExecutionStats\x12'.api.ai.v1.GetToolExecutionStatsRequest\x1a%.api.ai.v1.GetToolExecutionStatsReply\x12F\n" +
	"\n" +
	"EnableTool\x12\x1c.api.ai.v1.EnableToolRequest\x1a\x1a.api.ai.v1.EnableToolReply\x12I\n" +
	"\vDisableTool\x12\x1d.api.ai.v1.DisableToolRequest\x1a\x1b.api.ai.v1.DisableToolReply\x12O\n" +
	"\rConfigureTool\x12\x1f.api.ai.v1.ConfigureToolRequest\x1a\x1d.api.ai.v1.ConfigureToolReply\x12O\n" +
	"\rGetToolConfig\x12\x1f.api.ai.v1.GetToolConfigRequest\x1a\x1d.api.ai.v1.GetToolConfigReplyBG\n" +
	"\x1ecom.oldwei.universal.api.ai.v1B\vToolProtoV1P\x01Z\x16universal/api/ai/v1;v1b\x06proto3"

var (
	file_api_ai_v1_tool_proto_rawDescOnce sync.Once
	file_api_ai_v1_tool_proto_rawDescData []byte
)

func file_api_ai_v1_tool_proto_rawDescGZIP() []byte {
	file_api_ai_v1_tool_proto_rawDescOnce.Do(func() {
		file_api_ai_v1_tool_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_ai_v1_tool_proto_rawDesc), len(file_api_ai_v1_tool_proto_rawDesc)))
	})
	return file_api_ai_v1_tool_proto_rawDescData
}

var file_api_ai_v1_tool_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_api_ai_v1_tool_proto_msgTypes = make([]protoimpl.MessageInfo, 88)
var file_api_ai_v1_tool_proto_goTypes = []any{
	(ToolType)(0),                          // 0: api.ai.v1.ToolType
	(ToolCategory)(0),                      // 1: api.ai.v1.ToolCategory
	(SecurityLevel)(0),                     // 2: api.ai.v1.SecurityLevel
	(DependencyType)(0),                    // 3: api.ai.v1.DependencyType
	(McpServerStatus)(0),                   // 4: api.ai.v1.McpServerStatus
	(HealthLevel)(0),                       // 5: api.ai.v1.HealthLevel
	(ResourceType)(0),                      // 6: api.ai.v1.ResourceType
	(ToolExecutionStatus)(0),               // 7: api.ai.v1.ToolExecutionStatus
	(*ToolInfo)(nil),                       // 8: api.ai.v1.ToolInfo
	(*ToolConfig)(nil),                     // 9: api.ai.v1.ToolConfig
	(*ToolStats)(nil),                      // 10: api.ai.v1.ToolStats
	(*ToolDependency)(nil),                 // 11: api.ai.v1.ToolDependency
	(*ToolVersionInfo)(nil),                // 12: api.ai.v1.ToolVersionInfo
	(*McpServer)(nil),                      // 13: api.ai.v1.McpServer
	(*McpServerConfig)(nil),                // 14: api.ai.v1.McpServerConfig
	(*McpServerStats)(nil),                 // 15: api.ai.v1.McpServerStats
	(*HealthStatus)(nil),                   // 16: api.ai.v1.HealthStatus
	(*HealthCheck)(nil),                    // 17: api.ai.v1.HealthCheck
	(*SecurityPolicy)(nil),                 // 18: api.ai.v1.SecurityPolicy
	(*Resource)(nil),                       // 19: api.ai.v1.Resource
	(*ResourcePermissions)(nil),            // 20: api.ai.v1.ResourcePermissions
	(*ResourceStats)(nil),                  // 21: api.ai.v1.ResourceStats
	(*ToolExecution)(nil),                  // 22: api.ai.v1.ToolExecution
	(*ExecutionContext)(nil),               // 23: api.ai.v1.ExecutionContext
	(*ExecutionMetrics)(nil),               // 24: api.ai.v1.ExecutionMetrics
	(*ListToolsRequest)(nil),               // 25: api.ai.v1.ListToolsRequest
	(*ListToolsReply)(nil),                 // 26: api.ai.v1.ListToolsReply
	(*GetToolRequest)(nil),                 // 27: api.ai.v1.GetToolRequest
	(*GetToolReply)(nil),                   // 28: api.ai.v1.GetToolReply
	(*CallToolRequest)(nil),                // 29: api.ai.v1.CallToolRequest
	(*CallToolResponse)(nil),               // 30: api.ai.v1.CallToolResponse
	(*CallToolStreamResponse)(nil),         // 31: api.ai.v1.CallToolStreamResponse
	(*GetToolSchemaRequest)(nil),           // 32: api.ai.v1.GetToolSchemaRequest
	(*GetToolSchemaReply)(nil),             // 33: api.ai.v1.GetToolSchemaReply
	(*ValidateToolArgumentsRequest)(nil),   // 34: api.ai.v1.ValidateToolArgumentsRequest
	(*ValidateToolArgumentsReply)(nil),     // 35: api.ai.v1.ValidateToolArgumentsReply
	(*BatchCallToolsRequest)(nil),          // 36: api.ai.v1.BatchCallToolsRequest
	(*BatchToolCall)(nil),                  // 37: api.ai.v1.BatchToolCall
	(*BatchCallToolsReply)(nil),            // 38: api.ai.v1.BatchCallToolsReply
	(*BatchToolResult)(nil),                // 39: api.ai.v1.BatchToolResult
	(*ListMcpServersRequest)(nil),          // 40: api.ai.v1.ListMcpServersRequest
	(*ListMcpServersReply)(nil),            // 41: api.ai.v1.ListMcpServersReply
	(*GetMcpServerRequest)(nil),            // 42: api.ai.v1.GetMcpServerRequest
	(*GetMcpServerReply)(nil),              // 43: api.ai.v1.GetMcpServerReply
	(*RegisterMcpServerRequest)(nil),       // 44: api.ai.v1.RegisterMcpServerRequest
	(*RegisterMcpServerReply)(nil),         // 45: api.ai.v1.RegisterMcpServerReply
	(*UpdateMcpServerRequest)(nil),         // 46: api.ai.v1.UpdateMcpServerRequest
	(*UpdateMcpServerReply)(nil),           // 47: api.ai.v1.UpdateMcpServerReply
	(*DeleteMcpServerRequest)(nil),         // 48: api.ai.v1.DeleteMcpServerRequest
	(*DeleteMcpServerReply)(nil),           // 49: api.ai.v1.DeleteMcpServerReply
	(*TestMcpServerRequest)(nil),           // 50: api.ai.v1.TestMcpServerRequest
	(*TestMcpServerReply)(nil),             // 51: api.ai.v1.TestMcpServerReply
	(*TestResult)(nil),                     // 52: api.ai.v1.TestResult
	(*ListResourcesRequest)(nil),           // 53: api.ai.v1.ListResourcesRequest
	(*ListResourcesReply)(nil),             // 54: api.ai.v1.ListResourcesReply
	(*GetResourceRequest)(nil),             // 55: api.ai.v1.GetResourceRequest
	(*GetResourceReply)(nil),               // 56: api.ai.v1.GetResourceReply
	(*SearchResourcesRequest)(nil),         // 57: api.ai.v1.SearchResourcesRequest
	(*SearchResourcesReply)(nil),           // 58: api.ai.v1.SearchResourcesReply
	(*ResourceSearchResult)(nil),           // 59: api.ai.v1.ResourceSearchResult
	(*WatchResourceRequest)(nil),           // 60: api.ai.v1.WatchResourceRequest
	(*WatchResourceReply)(nil),             // 61: api.ai.v1.WatchResourceReply
	(*GetToolExecutionHistoryRequest)(nil), // 62: api.ai.v1.GetToolExecutionHistoryRequest
	(*GetToolExecutionHistoryReply)(nil),   // 63: api.ai.v1.GetToolExecutionHistoryReply
	(*GetToolExecutionStatsRequest)(nil),   // 64: api.ai.v1.GetToolExecutionStatsRequest
	(*GetToolExecutionStatsReply)(nil),     // 65: api.ai.v1.GetToolExecutionStatsReply
	(*ExecutionSummary)(nil),               // 66: api.ai.v1.ExecutionSummary
	(*EnableToolRequest)(nil),              // 67: api.ai.v1.EnableToolRequest
	(*EnableToolReply)(nil),                // 68: api.ai.v1.EnableToolReply
	(*DisableToolRequest)(nil),             // 69: api.ai.v1.DisableToolRequest
	(*DisableToolReply)(nil),               // 70: api.ai.v1.DisableToolReply
	(*ConfigureToolRequest)(nil),           // 71: api.ai.v1.ConfigureToolRequest
	(*ConfigureToolReply)(nil),             // 72: api.ai.v1.ConfigureToolReply
	(*GetToolConfigRequest)(nil),           // 73: api.ai.v1.GetToolConfigRequest
	(*GetToolConfigReply)(nil),             // 74: api.ai.v1.GetToolConfigReply
	nil,                                    // 75: api.ai.v1.ToolInfo.MetadataEntry
	nil,                                    // 76: api.ai.v1.ToolConfig.EnvironmentVarsEntry
	nil,                                    // 77: api.ai.v1.ToolConfig.CustomConfigEntry
	nil,                                    // 78: api.ai.v1.ToolStats.ErrorCountsEntry
	nil,                                    // 79: api.ai.v1.McpServer.MetadataEntry
	nil,                                    // 80: api.ai.v1.McpServerConfig.ConnectionParamsEntry
	nil,                                    // 81: api.ai.v1.McpServerConfig.AuthConfigEntry
	nil,                                    // 82: api.ai.v1.McpServerConfig.CustomConfigEntry
	nil,                                    // 83: api.ai.v1.McpServerStats.ErrorCountsEntry
	nil,                                    // 84: api.ai.v1.SecurityPolicy.SecurityHeadersEntry
	nil,                                    // 85: api.ai.v1.Resource.MetadataEntry
	nil,                                    // 86: api.ai.v1.ExecutionContext.EnvironmentEntry
	nil,                                    // 87: api.ai.v1.ExecutionContext.VariablesEntry
	nil,                                    // 88: api.ai.v1.CallToolResponse.MetadataEntry
	nil,                                    // 89: api.ai.v1.RegisterMcpServerRequest.MetadataEntry
	nil,                                    // 90: api.ai.v1.UpdateMcpServerRequest.MetadataEntry
	nil,                                    // 91: api.ai.v1.GetResourceReply.MetadataEntry
	nil,                                    // 92: api.ai.v1.SearchResourcesRequest.MetadataFiltersEntry
	nil,                                    // 93: api.ai.v1.WatchResourceReply.EventDataEntry
	nil,                                    // 94: api.ai.v1.GetToolExecutionStatsReply.ToolStatsEntry
	nil,                                    // 95: api.ai.v1.ExecutionSummary.StatusDistributionEntry
	(*timestamppb.Timestamp)(nil),          // 96: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),            // 97: google.protobuf.Duration
	(*anypb.Any)(nil),                      // 98: google.protobuf.Any
}
var file_api_ai_v1_tool_proto_depIdxs = []int32{
	75,  // 0: api.ai.v1.ToolInfo.metadata:type_name -> api.ai.v1.ToolInfo.MetadataEntry
	0,   // 1: api.ai.v1.ToolInfo.type:type_name -> api.ai.v1.ToolType
	1,   // 2: api.ai.v1.ToolInfo.category:type_name -> api.ai.v1.ToolCategory
	9,   // 3: api.ai.v1.ToolInfo.config:type_name -> api.ai.v1.ToolConfig
	10,  // 4: api.ai.v1.ToolInfo.stats:type_name -> api.ai.v1.ToolStats
	2,   // 5: api.ai.v1.ToolInfo.security_level:type_name -> api.ai.v1.SecurityLevel
	11,  // 6: api.ai.v1.ToolInfo.dependencies:type_name -> api.ai.v1.ToolDependency
	12,  // 7: api.ai.v1.ToolInfo.version:type_name -> api.ai.v1.ToolVersionInfo
	96,  // 8: api.ai.v1.ToolInfo.created_at:type_name -> google.protobuf.Timestamp
	96,  // 9: api.ai.v1.ToolInfo.updated_at:type_name -> google.protobuf.Timestamp
	76,  // 10: api.ai.v1.ToolConfig.environment_vars:type_name -> api.ai.v1.ToolConfig.EnvironmentVarsEntry
	77,  // 11: api.ai.v1.ToolConfig.custom_config:type_name -> api.ai.v1.ToolConfig.CustomConfigEntry
	96,  // 12: api.ai.v1.ToolStats.last_called:type_name -> google.protobuf.Timestamp
	78,  // 13: api.ai.v1.ToolStats.error_counts:type_name -> api.ai.v1.ToolStats.ErrorCountsEntry
	3,   // 14: api.ai.v1.ToolDependency.type:type_name -> api.ai.v1.DependencyType
	96,  // 15: api.ai.v1.ToolVersionInfo.release_date:type_name -> google.protobuf.Timestamp
	4,   // 16: api.ai.v1.McpServer.status:type_name -> api.ai.v1.McpServerStatus
	14,  // 17: api.ai.v1.McpServer.config:type_name -> api.ai.v1.McpServerConfig
	79,  // 18: api.ai.v1.McpServer.metadata:type_name -> api.ai.v1.McpServer.MetadataEntry
	96,  // 19: api.ai.v1.McpServer.created_at:type_name -> google.protobuf.Timestamp
	96,  // 20: api.ai.v1.McpServer.updated_at:type_name -> google.protobuf.Timestamp
	15,  // 21: api.ai.v1.McpServer.stats:type_name -> api.ai.v1.McpServerStats
	16,  // 22: api.ai.v1.McpServer.health:type_name -> api.ai.v1.HealthStatus
	18,  // 23: api.ai.v1.McpServer.security_policy:type_name -> api.ai.v1.SecurityPolicy
	80,  // 24: api.ai.v1.McpServerConfig.connection_params:type_name -> api.ai.v1.McpServerConfig.ConnectionParamsEntry
	81,  // 25: api.ai.v1.McpServerConfig.auth_config:type_name -> api.ai.v1.McpServerConfig.AuthConfigEntry
	82,  // 26: api.ai.v1.McpServerConfig.custom_config:type_name -> api.ai.v1.McpServerConfig.CustomConfigEntry
	96,  // 27: api.ai.v1.McpServerStats.last_request_at:type_name -> google.protobuf.Timestamp
	83,  // 28: api.ai.v1.McpServerStats.error_counts:type_name -> api.ai.v1.McpServerStats.ErrorCountsEntry
	5,   // 29: api.ai.v1.HealthStatus.level:type_name -> api.ai.v1.HealthLevel
	96,  // 30: api.ai.v1.HealthStatus.last_check:type_name -> google.protobuf.Timestamp
	17,  // 31: api.ai.v1.HealthStatus.checks:type_name -> api.ai.v1.HealthCheck
	5,   // 32: api.ai.v1.HealthCheck.status:type_name -> api.ai.v1.HealthLevel
	97,  // 33: api.ai.v1.HealthCheck.duration:type_name -> google.protobuf.Duration
	84,  // 34: api.ai.v1.SecurityPolicy.security_headers:type_name -> api.ai.v1.SecurityPolicy.SecurityHeadersEntry
	85,  // 35: api.ai.v1.Resource.metadata:type_name -> api.ai.v1.Resource.MetadataEntry
	6,   // 36: api.ai.v1.Resource.type:type_name -> api.ai.v1.ResourceType
	96,  // 37: api.ai.v1.Resource.last_modified:type_name -> google.protobuf.Timestamp
	20,  // 38: api.ai.v1.Resource.permissions:type_name -> api.ai.v1.ResourcePermissions
	21,  // 39: api.ai.v1.Resource.stats:type_name -> api.ai.v1.ResourceStats
	96,  // 40: api.ai.v1.ResourceStats.last_accessed:type_name -> google.protobuf.Timestamp
	7,   // 41: api.ai.v1.ToolExecution.status:type_name -> api.ai.v1.ToolExecutionStatus
	96,  // 42: api.ai.v1.ToolExecution.started_at:type_name -> google.protobuf.Timestamp
	96,  // 43: api.ai.v1.ToolExecution.completed_at:type_name -> google.protobuf.Timestamp
	97,  // 44: api.ai.v1.ToolExecution.duration:type_name -> google.protobuf.Duration
	23,  // 45: api.ai.v1.ToolExecution.context:type_name -> api.ai.v1.ExecutionContext
	24,  // 46: api.ai.v1.ToolExecution.metrics:type_name -> api.ai.v1.ExecutionMetrics
	86,  // 47: api.ai.v1.ExecutionContext.environment:type_name -> api.ai.v1.ExecutionContext.EnvironmentEntry
	87,  // 48: api.ai.v1.ExecutionContext.variables:type_name -> api.ai.v1.ExecutionContext.VariablesEntry
	0,   // 49: api.ai.v1.ListToolsRequest.type_filter:type_name -> api.ai.v1.ToolType
	1,   // 50: api.ai.v1.ListToolsRequest.category_filter:type_name -> api.ai.v1.ToolCategory
	2,   // 51: api.ai.v1.ListToolsRequest.max_security_level:type_name -> api.ai.v1.SecurityLevel
	8,   // 52: api.ai.v1.ListToolsReply.tools:type_name -> api.ai.v1.ToolInfo
	8,   // 53: api.ai.v1.GetToolReply.tool:type_name -> api.ai.v1.ToolInfo
	23,  // 54: api.ai.v1.CallToolRequest.context:type_name -> api.ai.v1.ExecutionContext
	7,   // 55: api.ai.v1.CallToolResponse.status:type_name -> api.ai.v1.ToolExecutionStatus
	88,  // 56: api.ai.v1.CallToolResponse.metadata:type_name -> api.ai.v1.CallToolResponse.MetadataEntry
	24,  // 57: api.ai.v1.CallToolResponse.metrics:type_name -> api.ai.v1.ExecutionMetrics
	7,   // 58: api.ai.v1.CallToolStreamResponse.status:type_name -> api.ai.v1.ToolExecutionStatus
	8,   // 59: api.ai.v1.GetToolSchemaReply.tool:type_name -> api.ai.v1.ToolInfo
	37,  // 60: api.ai.v1.BatchCallToolsRequest.tool_calls:type_name -> api.ai.v1.BatchToolCall
	39,  // 61: api.ai.v1.BatchCallToolsReply.results:type_name -> api.ai.v1.BatchToolResult
	30,  // 62: api.ai.v1.BatchToolResult.response:type_name -> api.ai.v1.CallToolResponse
	4,   // 63: api.ai.v1.ListMcpServersRequest.status_filter:type_name -> api.ai.v1.McpServerStatus
	13,  // 64: api.ai.v1.ListMcpServersReply.servers:type_name -> api.ai.v1.McpServer
	13,  // 65: api.ai.v1.GetMcpServerReply.server:type_name -> api.ai.v1.McpServer
	14,  // 66: api.ai.v1.RegisterMcpServerRequest.config:type_name -> api.ai.v1.McpServerConfig
	89,  // 67: api.ai.v1.RegisterMcpServerRequest.metadata:type_name -> api.ai.v1.RegisterMcpServerRequest.MetadataEntry
	13,  // 68: api.ai.v1.RegisterMcpServerReply.server:type_name -> api.ai.v1.McpServer
	14,  // 69: api.ai.v1.UpdateMcpServerRequest.config:type_name -> api.ai.v1.McpServerConfig
	90,  // 70: api.ai.v1.UpdateMcpServerRequest.metadata:type_name -> api.ai.v1.UpdateMcpServerRequest.MetadataEntry
	13,  // 71: api.ai.v1.UpdateMcpServerReply.server:type_name -> api.ai.v1.McpServer
	52,  // 72: api.ai.v1.TestMcpServerReply.results:type_name -> api.ai.v1.TestResult
	16,  // 73: api.ai.v1.TestMcpServerReply.health:type_name -> api.ai.v1.HealthStatus
	97,  // 74: api.ai.v1.TestResult.duration:type_name -> google.protobuf.Duration
	6,   // 75: api.ai.v1.ListResourcesRequest.type_filter:type_name -> api.ai.v1.ResourceType
	19,  // 76: api.ai.v1.ListResourcesReply.resources:type_name -> api.ai.v1.Resource
	91,  // 77: api.ai.v1.GetResourceReply.metadata:type_name -> api.ai.v1.GetResourceReply.MetadataEntry
	19,  // 78: api.ai.v1.GetResourceReply.resource_info:type_name -> api.ai.v1.Resource
	92,  // 79: api.ai.v1.SearchResourcesRequest.metadata_filters:type_name -> api.ai.v1.SearchResourcesRequest.MetadataFiltersEntry
	59,  // 80: api.ai.v1.SearchResourcesReply.results:type_name -> api.ai.v1.ResourceSearchResult
	19,  // 81: api.ai.v1.ResourceSearchResult.resource:type_name -> api.ai.v1.Resource
	19,  // 82: api.ai.v1.WatchResourceReply.resource:type_name -> api.ai.v1.Resource
	96,  // 83: api.ai.v1.WatchResourceReply.timestamp:type_name -> google.protobuf.Timestamp
	93,  // 84: api.ai.v1.WatchResourceReply.event_data:type_name -> api.ai.v1.WatchResourceReply.EventDataEntry
	96,  // 85: api.ai.v1.GetToolExecutionHistoryRequest.start_time:type_name -> google.protobuf.Timestamp
	96,  // 86: api.ai.v1.GetToolExecutionHistoryRequest.end_time:type_name -> google.protobuf.Timestamp
	7,   // 87: api.ai.v1.GetToolExecutionHistoryRequest.status_filter:type_name -> api.ai.v1.ToolExecutionStatus
	22,  // 88: api.ai.v1.GetToolExecutionHistoryReply.executions:type_name -> api.ai.v1.ToolExecution
	96,  // 89: api.ai.v1.GetToolExecutionStatsRequest.start_time:type_name -> google.protobuf.Timestamp
	96,  // 90: api.ai.v1.GetToolExecutionStatsRequest.end_time:type_name -> google.protobuf.Timestamp
	94,  // 91: api.ai.v1.GetToolExecutionStatsReply.tool_stats:type_name -> api.ai.v1.GetToolExecutionStatsReply.ToolStatsEntry
	66,  // 92: api.ai.v1.GetToolExecutionStatsReply.summary:type_name -> api.ai.v1.ExecutionSummary
	95,  // 93: api.ai.v1.ExecutionSummary.status_distribution:type_name -> api.ai.v1.ExecutionSummary.StatusDistributionEntry
	9,   // 94: api.ai.v1.ConfigureToolRequest.config:type_name -> api.ai.v1.ToolConfig
	9,   // 95: api.ai.v1.GetToolConfigReply.config:type_name -> api.ai.v1.ToolConfig
	98,  // 96: api.ai.v1.ToolConfig.CustomConfigEntry.value:type_name -> google.protobuf.Any
	98,  // 97: api.ai.v1.McpServerConfig.CustomConfigEntry.value:type_name -> google.protobuf.Any
	98,  // 98: api.ai.v1.ExecutionContext.VariablesEntry.value:type_name -> google.protobuf.Any
	10,  // 99: api.ai.v1.GetToolExecutionStatsReply.ToolStatsEntry.value:type_name -> api.ai.v1.ToolStats
	25,  // 100: api.ai.v1.Tool.ListTools:input_type -> api.ai.v1.ListToolsRequest
	27,  // 101: api.ai.v1.Tool.GetTool:input_type -> api.ai.v1.GetToolRequest
	29,  // 102: api.ai.v1.Tool.CallTool:input_type -> api.ai.v1.CallToolRequest
	29,  // 103: api.ai.v1.Tool.CallToolStream:input_type -> api.ai.v1.CallToolRequest
	32,  // 104: api.ai.v1.Tool.GetToolSchema:input_type -> api.ai.v1.GetToolSchemaRequest
	34,  // 105: api.ai.v1.Tool.ValidateToolArguments:input_type -> api.ai.v1.ValidateToolArgumentsRequest
	36,  // 106: api.ai.v1.Tool.BatchCallTools:input_type -> api.ai.v1.BatchCallToolsRequest
	40,  // 107: api.ai.v1.Tool.ListMcpServers:input_type -> api.ai.v1.ListMcpServersRequest
	42,  // 108: api.ai.v1.Tool.GetMcpServer:input_type -> api.ai.v1.GetMcpServerRequest
	44,  // 109: api.ai.v1.Tool.RegisterMcpServer:input_type -> api.ai.v1.RegisterMcpServerRequest
	46,  // 110: api.ai.v1.Tool.UpdateMcpServer:input_type -> api.ai.v1.UpdateMcpServerRequest
	48,  // 111: api.ai.v1.Tool.DeleteMcpServer:input_type -> api.ai.v1.DeleteMcpServerRequest
	50,  // 112: api.ai.v1.Tool.TestMcpServer:input_type -> api.ai.v1.TestMcpServerRequest
	53,  // 113: api.ai.v1.Tool.ListResources:input_type -> api.ai.v1.ListResourcesRequest
	55,  // 114: api.ai.v1.Tool.GetResource:input_type -> api.ai.v1.GetResourceRequest
	57,  // 115: api.ai.v1.Tool.SearchResources:input_type -> api.ai.v1.SearchResourcesRequest
	60,  // 116: api.ai.v1.Tool.WatchResource:input_type -> api.ai.v1.WatchResourceRequest
	62,  // 117: api.ai.v1.Tool.GetToolExecutionHistory:input_type -> api.ai.v1.GetToolExecutionHistoryRequest
	64,  // 118: api.ai.v1.Tool.GetToolExecutionStats:input_type -> api.ai.v1.GetToolExecutionStatsRequest
	67,  // 119: api.ai.v1.Tool.EnableTool:input_type -> api.ai.v1.EnableToolRequest
	69,  // 120: api.ai.v1.Tool.DisableTool:input_type -> api.ai.v1.DisableToolRequest
	71,  // 121: api.ai.v1.Tool.ConfigureTool:input_type -> api.ai.v1.ConfigureToolRequest
	73,  // 122: api.ai.v1.Tool.GetToolConfig:input_type -> api.ai.v1.GetToolConfigRequest
	26,  // 123: api.ai.v1.Tool.ListTools:output_type -> api.ai.v1.ListToolsReply
	28,  // 124: api.ai.v1.Tool.GetTool:output_type -> api.ai.v1.GetToolReply
	30,  // 125: api.ai.v1.Tool.CallTool:output_type -> api.ai.v1.CallToolResponse
	31,  // 126: api.ai.v1.Tool.CallToolStream:output_type -> api.ai.v1.CallToolStreamResponse
	33,  // 127: api.ai.v1.Tool.GetToolSchema:output_type -> api.ai.v1.GetToolSchemaReply
	35,  // 128: api.ai.v1.Tool.ValidateToolArguments:output_type -> api.ai.v1.ValidateToolArgumentsReply
	38,  // 129: api.ai.v1.Tool.BatchCallTools:output_type -> api.ai.v1.BatchCallToolsReply
	41,  // 130: api.ai.v1.Tool.ListMcpServers:output_type -> api.ai.v1.ListMcpServersReply
	43,  // 131: api.ai.v1.Tool.GetMcpServer:output_type -> api.ai.v1.GetMcpServerReply
	45,  // 132: api.ai.v1.Tool.RegisterMcpServer:output_type -> api.ai.v1.RegisterMcpServerReply
	47,  // 133: api.ai.v1.Tool.UpdateMcpServer:output_type -> api.ai.v1.UpdateMcpServerReply
	49,  // 134: api.ai.v1.Tool.DeleteMcpServer:output_type -> api.ai.v1.DeleteMcpServerReply
	51,  // 135: api.ai.v1.Tool.TestMcpServer:output_type -> api.ai.v1.TestMcpServerReply
	54,  // 136: api.ai.v1.Tool.ListResources:output_type -> api.ai.v1.ListResourcesReply
	56,  // 137: api.ai.v1.Tool.GetResource:output_type -> api.ai.v1.GetResourceReply
	58,  // 138: api.ai.v1.Tool.SearchResources:output_type -> api.ai.v1.SearchResourcesReply
	61,  // 139: api.ai.v1.Tool.WatchResource:output_type -> api.ai.v1.WatchResourceReply
	63,  // 140: api.ai.v1.Tool.GetToolExecutionHistory:output_type -> api.ai.v1.GetToolExecutionHistoryReply
	65,  // 141: api.ai.v1.Tool.GetToolExecutionStats:output_type -> api.ai.v1.GetToolExecutionStatsReply
	68,  // 142: api.ai.v1.Tool.EnableTool:output_type -> api.ai.v1.EnableToolReply
	70,  // 143: api.ai.v1.Tool.DisableTool:output_type -> api.ai.v1.DisableToolReply
	72,  // 144: api.ai.v1.Tool.ConfigureTool:output_type -> api.ai.v1.ConfigureToolReply
	74,  // 145: api.ai.v1.Tool.GetToolConfig:output_type -> api.ai.v1.GetToolConfigReply
	123, // [123:146] is the sub-list for method output_type
	100, // [100:123] is the sub-list for method input_type
	100, // [100:100] is the sub-list for extension type_name
	100, // [100:100] is the sub-list for extension extendee
	0,   // [0:100] is the sub-list for field type_name
}

func init() { file_api_ai_v1_tool_proto_init() }
func file_api_ai_v1_tool_proto_init() {
	if File_api_ai_v1_tool_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_ai_v1_tool_proto_rawDesc), len(file_api_ai_v1_tool_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   88,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_ai_v1_tool_proto_goTypes,
		DependencyIndexes: file_api_ai_v1_tool_proto_depIdxs,
		EnumInfos:         file_api_ai_v1_tool_proto_enumTypes,
		MessageInfos:      file_api_ai_v1_tool_proto_msgTypes,
	}.Build()
	File_api_ai_v1_tool_proto = out.File
	file_api_ai_v1_tool_proto_goTypes = nil
	file_api_ai_v1_tool_proto_depIdxs = nil
}
