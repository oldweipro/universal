// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: api/ai/v1/ai.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 对话记录
type Conversation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                  // 对话ID
	UserId        int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                            // 用户ID
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`                                                                             // 对话标题
	ModelName     string                 `protobuf:"bytes,4,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`                                                    // 使用的模型名称
	SystemPrompt  string                 `protobuf:"bytes,5,opt,name=system_prompt,json=systemPrompt,proto3" json:"system_prompt,omitempty"`                                           // 系统提示词
	Config        map[string]string      `protobuf:"bytes,6,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 对话配置参数
	Status        int32                  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`                                                                          // 对话状态 (0:正常, 1:已删除)
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                    // 创建时间
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                    // 更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Conversation) Reset() {
	*x = Conversation{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Conversation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversation) ProtoMessage() {}

func (x *Conversation) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversation.ProtoReflect.Descriptor instead.
func (*Conversation) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{0}
}

func (x *Conversation) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Conversation) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Conversation) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Conversation) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *Conversation) GetSystemPrompt() string {
	if x != nil {
		return x.SystemPrompt
	}
	return ""
}

func (x *Conversation) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Conversation) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Conversation) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Conversation) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// 消息记录
type Message struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                      // 消息ID
	ConversationId int64                  `protobuf:"varint,2,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`                                        // 对话ID
	Role           string                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`                                                                                   // 角色 (user/assistant/system)
	Content        string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                                                                             // 消息内容
	ToolCalls      []*ToolCall            `protobuf:"bytes,5,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`                                                        // 工具调用记录
	Metadata       map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 消息元数据
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                        // 创建时间
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{1}
}

func (x *Message) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Message) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

func (x *Message) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetToolCalls() []*ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

func (x *Message) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Message) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// 工具调用记录
type ToolCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // 调用ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                     // 工具名称
	Arguments     string                 `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`                           // 调用参数(JSON格式)
	Result        string                 `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`                                 // 执行结果
	Status        int32                  `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                // 执行状态 (0:成功, 1:失败)
	ErrorMessage  string                 `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"` // 错误信息
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`          // 执行时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolCall) Reset() {
	*x = ToolCall{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolCall) ProtoMessage() {}

func (x *ToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolCall.ProtoReflect.Descriptor instead.
func (*ToolCall) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{2}
}

func (x *ToolCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ToolCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToolCall) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *ToolCall) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *ToolCall) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ToolCall) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *ToolCall) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// 模型配置
type ModelConfig struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                                             // 模型名称
	Provider         string                 `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`                                                                                                     // 提供商 (openai/anthropic/local)
	ApiKey           string                 `protobuf:"bytes,3,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`                                                                                           // API密钥
	ApiBase          string                 `protobuf:"bytes,4,opt,name=api_base,json=apiBase,proto3" json:"api_base,omitempty"`                                                                                        // API基础URL
	Temperature      float64                `protobuf:"fixed64,5,opt,name=temperature,proto3" json:"temperature,omitempty"`                                                                                             // 温度参数
	MaxTokens        int32                  `protobuf:"varint,6,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`                                                                                 // 最大token数
	TopP             float64                `protobuf:"fixed64,7,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`                                                                                               // top_p参数
	FrequencyPenalty float64                `protobuf:"fixed64,8,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`                                                           // 频率惩罚
	PresencePenalty  float64                `protobuf:"fixed64,9,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`                                                              // 存在惩罚
	StopSequences    []string               `protobuf:"bytes,10,rep,name=stop_sequences,json=stopSequences,proto3" json:"stop_sequences,omitempty"`                                                                     // 停止序列
	SupportsTools    bool                   `protobuf:"varint,11,opt,name=supports_tools,json=supportsTools,proto3" json:"supports_tools,omitempty"`                                                                    // 是否支持工具调用
	SupportsVision   bool                   `protobuf:"varint,12,opt,name=supports_vision,json=supportsVision,proto3" json:"supports_vision,omitempty"`                                                                 // 是否支持视觉输入
	ExtraParams      map[string]string      `protobuf:"bytes,13,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 额外参数
	Status           int32                  `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`                                                                                                       // 状态 (0:可用, 1:不可用)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ModelConfig) Reset() {
	*x = ModelConfig{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelConfig) ProtoMessage() {}

func (x *ModelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelConfig.ProtoReflect.Descriptor instead.
func (*ModelConfig) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{3}
}

func (x *ModelConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelConfig) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ModelConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *ModelConfig) GetApiBase() string {
	if x != nil {
		return x.ApiBase
	}
	return ""
}

func (x *ModelConfig) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *ModelConfig) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *ModelConfig) GetTopP() float64 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *ModelConfig) GetFrequencyPenalty() float64 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *ModelConfig) GetPresencePenalty() float64 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *ModelConfig) GetStopSequences() []string {
	if x != nil {
		return x.StopSequences
	}
	return nil
}

func (x *ModelConfig) GetSupportsTools() bool {
	if x != nil {
		return x.SupportsTools
	}
	return false
}

func (x *ModelConfig) GetSupportsVision() bool {
	if x != nil {
		return x.SupportsVision
	}
	return false
}

func (x *ModelConfig) GetExtraParams() map[string]string {
	if x != nil {
		return x.ExtraParams
	}
	return nil
}

func (x *ModelConfig) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// MCP工具定义
type Tool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                   // 工具名称
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`                                                                     // 工具描述
	Schema        string                 `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`                                                                               // 参数schema(JSON格式)
	McpServer     string                 `protobuf:"bytes,4,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`                                                        // MCP服务器标识
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 工具元数据
	Enabled       bool                   `protobuf:"varint,6,opt,name=enabled,proto3" json:"enabled,omitempty"`                                                                            // 是否启用
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tool) Reset() {
	*x = Tool{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{4}
}

func (x *Tool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tool) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tool) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Tool) GetMcpServer() string {
	if x != nil {
		return x.McpServer
	}
	return ""
}

func (x *Tool) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Tool) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// 资源定义
type Resource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`                                                                                     // 资源URI
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                   // 资源名称
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                                     // 资源描述
	MimeType      string                 `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                                                           // MIME类型
	McpServer     string                 `protobuf:"bytes,5,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`                                                        // MCP服务器标识
	Metadata      map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 资源元数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Resource) Reset() {
	*x = Resource{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{5}
}

func (x *Resource) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Resource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Resource) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Resource) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Resource) GetMcpServer() string {
	if x != nil {
		return x.McpServer
	}
	return ""
}

func (x *Resource) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 知识库定义
type KnowledgeBase struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // 知识库ID
	UserId         int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                           // 知识库名称
	Description    string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                             // 知识库描述
	EmbeddingModel string                 `protobuf:"bytes,5,opt,name=embedding_model,json=embeddingModel,proto3" json:"embedding_model,omitempty"` // 向量化模型
	ChunkSize      int32                  `protobuf:"varint,6,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`               // 文档分块大小
	ChunkOverlap   int32                  `protobuf:"varint,7,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`      // 分块重叠大小
	Status         int32                  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`                                      // 状态 (0:正常, 1:已删除)
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                // 创建时间
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`               // 更新时间
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KnowledgeBase) Reset() {
	*x = KnowledgeBase{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase) ProtoMessage() {}

func (x *KnowledgeBase) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase.ProtoReflect.Descriptor instead.
func (*KnowledgeBase) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{6}
}

func (x *KnowledgeBase) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KnowledgeBase) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *KnowledgeBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KnowledgeBase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KnowledgeBase) GetEmbeddingModel() string {
	if x != nil {
		return x.EmbeddingModel
	}
	return ""
}

func (x *KnowledgeBase) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *KnowledgeBase) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

func (x *KnowledgeBase) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *KnowledgeBase) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KnowledgeBase) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// 文档定义
type Document struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                    // 文档ID
	KnowledgeBaseId int64                  `protobuf:"varint,2,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"` // 知识库ID
	Name            string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                 // 文档名称
	Content         string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                                           // 文档内容
	FilePath        string                 `protobuf:"bytes,5,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`                         // 文件路径
	MimeType        string                 `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                         // 文件类型
	FileSize        int64                  `protobuf:"varint,7,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`                        // 文件大小
	ChunkCount      int32                  `protobuf:"varint,8,opt,name=chunk_count,json=chunkCount,proto3" json:"chunk_count,omitempty"`                  // 分块数量
	Status          int32                  `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                            // 状态 (0:处理中, 1:完成, 2:失败)
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                     // 创建时间
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                     // 更新时间
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Document) Reset() {
	*x = Document{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{7}
}

func (x *Document) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Document) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *Document) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Document) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Document) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Document) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Document) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *Document) GetChunkCount() int32 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *Document) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Document) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Document) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// 创建对话
type CreateConversationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                            // 用户ID
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                             // 对话标题
	ModelName     string                 `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`                                                    // 使用的模型名称
	SystemPrompt  string                 `protobuf:"bytes,4,opt,name=system_prompt,json=systemPrompt,proto3" json:"system_prompt,omitempty"`                                           // 系统提示词(可选)
	Config        map[string]string      `protobuf:"bytes,5,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 对话配置参数(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConversationRequest) Reset() {
	*x = CreateConversationRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationRequest) ProtoMessage() {}

func (x *CreateConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationRequest.ProtoReflect.Descriptor instead.
func (*CreateConversationRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{8}
}

func (x *CreateConversationRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateConversationRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateConversationRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *CreateConversationRequest) GetSystemPrompt() string {
	if x != nil {
		return x.SystemPrompt
	}
	return ""
}

func (x *CreateConversationRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type CreateConversationReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conversation  *Conversation          `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"` // 创建的对话
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateConversationReply) Reset() {
	*x = CreateConversationReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateConversationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConversationReply) ProtoMessage() {}

func (x *CreateConversationReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConversationReply.ProtoReflect.Descriptor instead.
func (*CreateConversationReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{9}
}

func (x *CreateConversationReply) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// 获取对话
type GetConversationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 对话ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationRequest) Reset() {
	*x = GetConversationRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationRequest) ProtoMessage() {}

func (x *GetConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationRequest.ProtoReflect.Descriptor instead.
func (*GetConversationRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{10}
}

func (x *GetConversationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetConversationReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conversation  *Conversation          `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"` // 对话信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConversationReply) Reset() {
	*x = GetConversationReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConversationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConversationReply) ProtoMessage() {}

func (x *GetConversationReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConversationReply.ProtoReflect.Descriptor instead.
func (*GetConversationReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{11}
}

func (x *GetConversationReply) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// 更新对话
type UpdateConversationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                  // 对话ID
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                             // 对话标题(可选)
	SystemPrompt  string                 `protobuf:"bytes,3,opt,name=system_prompt,json=systemPrompt,proto3" json:"system_prompt,omitempty"`                                           // 系统提示词(可选)
	Config        map[string]string      `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 对话配置参数(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConversationRequest) Reset() {
	*x = UpdateConversationRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationRequest) ProtoMessage() {}

func (x *UpdateConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationRequest.ProtoReflect.Descriptor instead.
func (*UpdateConversationRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateConversationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateConversationRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateConversationRequest) GetSystemPrompt() string {
	if x != nil {
		return x.SystemPrompt
	}
	return ""
}

func (x *UpdateConversationRequest) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateConversationReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conversation  *Conversation          `protobuf:"bytes,1,opt,name=conversation,proto3" json:"conversation,omitempty"` // 更新后的对话
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateConversationReply) Reset() {
	*x = UpdateConversationReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateConversationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConversationReply) ProtoMessage() {}

func (x *UpdateConversationReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConversationReply.ProtoReflect.Descriptor instead.
func (*UpdateConversationReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateConversationReply) GetConversation() *Conversation {
	if x != nil {
		return x.Conversation
	}
	return nil
}

// 删除对话
type DeleteConversationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 对话ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConversationRequest) Reset() {
	*x = DeleteConversationRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConversationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConversationRequest) ProtoMessage() {}

func (x *DeleteConversationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConversationRequest.ProtoReflect.Descriptor instead.
func (*DeleteConversationRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteConversationRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteConversationReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteConversationReply) Reset() {
	*x = DeleteConversationReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteConversationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteConversationReply) ProtoMessage() {}

func (x *DeleteConversationReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteConversationReply.ProtoReflect.Descriptor instead.
func (*DeleteConversationReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{15}
}

// 列出对话
type ListConversationsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户ID
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页面大小
	Keyword       string                 `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`                    // 搜索关键词(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConversationsRequest) Reset() {
	*x = ListConversationsRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConversationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationsRequest) ProtoMessage() {}

func (x *ListConversationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationsRequest.ProtoReflect.Descriptor instead.
func (*ListConversationsRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{16}
}

func (x *ListConversationsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListConversationsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListConversationsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListConversationsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type ListConversationsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Conversations []*Conversation        `protobuf:"bytes,1,rep,name=conversations,proto3" json:"conversations,omitempty"`        // 对话列表
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 总数
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页面大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConversationsReply) Reset() {
	*x = ListConversationsReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConversationsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConversationsReply) ProtoMessage() {}

func (x *ListConversationsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConversationsReply.ProtoReflect.Descriptor instead.
func (*ListConversationsReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{17}
}

func (x *ListConversationsReply) GetConversations() []*Conversation {
	if x != nil {
		return x.Conversations
	}
	return nil
}

func (x *ListConversationsReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListConversationsReply) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListConversationsReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 发送消息
type SendMessageRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ConversationId int64                  `protobuf:"varint,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`                                      // 对话ID
	Content        string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                                                           // 消息内容
	Attachments    []string               `protobuf:"bytes,3,rep,name=attachments,proto3" json:"attachments,omitempty"`                                                                   // 附件列表(文件路径或URL)
	EnableTools    bool                   `protobuf:"varint,4,opt,name=enable_tools,json=enableTools,proto3" json:"enable_tools,omitempty"`                                               // 是否启用工具调用
	AllowedTools   []string               `protobuf:"bytes,5,rep,name=allowed_tools,json=allowedTools,proto3" json:"allowed_tools,omitempty"`                                             // 允许使用的工具列表(空表示所有)
	Options        map[string]string      `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 额外选项
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SendMessageRequest) Reset() {
	*x = SendMessageRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageRequest) ProtoMessage() {}

func (x *SendMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMessageRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{18}
}

func (x *SendMessageRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

func (x *SendMessageRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendMessageRequest) GetAttachments() []string {
	if x != nil {
		return x.Attachments
	}
	return nil
}

func (x *SendMessageRequest) GetEnableTools() bool {
	if x != nil {
		return x.EnableTools
	}
	return false
}

func (x *SendMessageRequest) GetAllowedTools() []string {
	if x != nil {
		return x.AllowedTools
	}
	return nil
}

func (x *SendMessageRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type SendMessageReply struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserMessage      *Message               `protobuf:"bytes,1,opt,name=user_message,json=userMessage,proto3" json:"user_message,omitempty"`                // 用户消息
	AssistantMessage *Message               `protobuf:"bytes,2,opt,name=assistant_message,json=assistantMessage,proto3" json:"assistant_message,omitempty"` // AI助手回复
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SendMessageReply) Reset() {
	*x = SendMessageReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMessageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageReply) ProtoMessage() {}

func (x *SendMessageReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageReply.ProtoReflect.Descriptor instead.
func (*SendMessageReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{19}
}

func (x *SendMessageReply) GetUserMessage() *Message {
	if x != nil {
		return x.UserMessage
	}
	return nil
}

func (x *SendMessageReply) GetAssistantMessage() *Message {
	if x != nil {
		return x.AssistantMessage
	}
	return nil
}

// 获取消息列表
type GetMessagesRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ConversationId   int64                  `protobuf:"varint,1,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"`         // 对话ID
	Page             int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                                                   // 页码
	PageSize         int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                           // 页面大小
	IncludeToolCalls bool                   `protobuf:"varint,4,opt,name=include_tool_calls,json=includeToolCalls,proto3" json:"include_tool_calls,omitempty"` // 是否包含工具调用详情
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMessagesRequest) Reset() {
	*x = GetMessagesRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesRequest) ProtoMessage() {}

func (x *GetMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesRequest.ProtoReflect.Descriptor instead.
func (*GetMessagesRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{20}
}

func (x *GetMessagesRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

func (x *GetMessagesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetMessagesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *GetMessagesRequest) GetIncludeToolCalls() bool {
	if x != nil {
		return x.IncludeToolCalls
	}
	return false
}

type GetMessagesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*Message             `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`                  // 消息列表
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 总数
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页面大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMessagesReply) Reset() {
	*x = GetMessagesReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMessagesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMessagesReply) ProtoMessage() {}

func (x *GetMessagesReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMessagesReply.ProtoReflect.Descriptor instead.
func (*GetMessagesReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{21}
}

func (x *GetMessagesReply) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *GetMessagesReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetMessagesReply) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetMessagesReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 列出可用模型
type ListModelsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Provider      string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`                           // 提供商过滤(可选)
	OnlyEnabled   bool                   `protobuf:"varint,2,opt,name=only_enabled,json=onlyEnabled,proto3" json:"only_enabled,omitempty"` // 只显示启用的模型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{22}
}

func (x *ListModelsRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListModelsRequest) GetOnlyEnabled() bool {
	if x != nil {
		return x.OnlyEnabled
	}
	return false
}

type ListModelsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Models        []*ModelConfig         `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"` // 模型列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListModelsReply) Reset() {
	*x = ListModelsReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsReply) ProtoMessage() {}

func (x *ListModelsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsReply.ProtoReflect.Descriptor instead.
func (*ListModelsReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{23}
}

func (x *ListModelsReply) GetModels() []*ModelConfig {
	if x != nil {
		return x.Models
	}
	return nil
}

// 获取模型配置
type GetModelConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 模型名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetModelConfigRequest) Reset() {
	*x = GetModelConfigRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelConfigRequest) ProtoMessage() {}

func (x *GetModelConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelConfigRequest.ProtoReflect.Descriptor instead.
func (*GetModelConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{24}
}

func (x *GetModelConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetModelConfigReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Model         *ModelConfig           `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"` // 模型配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetModelConfigReply) Reset() {
	*x = GetModelConfigReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetModelConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetModelConfigReply) ProtoMessage() {}

func (x *GetModelConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetModelConfigReply.ProtoReflect.Descriptor instead.
func (*GetModelConfigReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{25}
}

func (x *GetModelConfigReply) GetModel() *ModelConfig {
	if x != nil {
		return x.Model
	}
	return nil
}

// 更新模型配置
type UpdateModelConfigRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     // 模型名称
	Config        *ModelConfig           `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"` // 新配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateModelConfigRequest) Reset() {
	*x = UpdateModelConfigRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateModelConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModelConfigRequest) ProtoMessage() {}

func (x *UpdateModelConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModelConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateModelConfigRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateModelConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateModelConfigRequest) GetConfig() *ModelConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type UpdateModelConfigReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Model         *ModelConfig           `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"` // 更新后的配置
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateModelConfigReply) Reset() {
	*x = UpdateModelConfigReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateModelConfigReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateModelConfigReply) ProtoMessage() {}

func (x *UpdateModelConfigReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateModelConfigReply.ProtoReflect.Descriptor instead.
func (*UpdateModelConfigReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateModelConfigReply) GetModel() *ModelConfig {
	if x != nil {
		return x.Model
	}
	return nil
}

// 列出可用工具
type ListToolsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     string                 `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`        // MCP服务器过滤(可选)
	OnlyEnabled   bool                   `protobuf:"varint,2,opt,name=only_enabled,json=onlyEnabled,proto3" json:"only_enabled,omitempty"` // 只显示启用的工具
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListToolsRequest) Reset() {
	*x = ListToolsRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListToolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListToolsRequest) ProtoMessage() {}

func (x *ListToolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListToolsRequest.ProtoReflect.Descriptor instead.
func (*ListToolsRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{28}
}

func (x *ListToolsRequest) GetMcpServer() string {
	if x != nil {
		return x.McpServer
	}
	return ""
}

func (x *ListToolsRequest) GetOnlyEnabled() bool {
	if x != nil {
		return x.OnlyEnabled
	}
	return false
}

type ListToolsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tools         []*Tool                `protobuf:"bytes,1,rep,name=tools,proto3" json:"tools,omitempty"` // 工具列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListToolsReply) Reset() {
	*x = ListToolsReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListToolsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListToolsReply) ProtoMessage() {}

func (x *ListToolsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListToolsReply.ProtoReflect.Descriptor instead.
func (*ListToolsReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{29}
}

func (x *ListToolsReply) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

// 调用工具
type CallToolRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Name           string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                            // 工具名称
	Arguments      string                 `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`                                  // 参数(JSON格式)
	ConversationId int64                  `protobuf:"varint,3,opt,name=conversation_id,json=conversationId,proto3" json:"conversation_id,omitempty"` // 对话ID(可选，用于上下文)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CallToolRequest) Reset() {
	*x = CallToolRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallToolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallToolRequest) ProtoMessage() {}

func (x *CallToolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallToolRequest.ProtoReflect.Descriptor instead.
func (*CallToolRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{30}
}

func (x *CallToolRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CallToolRequest) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *CallToolRequest) GetConversationId() int64 {
	if x != nil {
		return x.ConversationId
	}
	return 0
}

type CallToolResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`                                                                               // 执行结果
	Status        int32                  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`                                                                              // 状态码 (0:成功, 非0:失败)
	ErrorMessage  string                 `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                               // 错误信息(如果失败)
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 执行元数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallToolResponse) Reset() {
	*x = CallToolResponse{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallToolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallToolResponse) ProtoMessage() {}

func (x *CallToolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallToolResponse.ProtoReflect.Descriptor instead.
func (*CallToolResponse) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{31}
}

func (x *CallToolResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

func (x *CallToolResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CallToolResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CallToolResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 获取工具Schema
type GetToolSchemaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // 工具名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetToolSchemaRequest) Reset() {
	*x = GetToolSchemaRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolSchemaRequest) ProtoMessage() {}

func (x *GetToolSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolSchemaRequest.ProtoReflect.Descriptor instead.
func (*GetToolSchemaRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{32}
}

func (x *GetToolSchemaRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetToolSchemaReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tool          *Tool                  `protobuf:"bytes,1,opt,name=tool,proto3" json:"tool,omitempty"` // 工具信息和Schema
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetToolSchemaReply) Reset() {
	*x = GetToolSchemaReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetToolSchemaReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetToolSchemaReply) ProtoMessage() {}

func (x *GetToolSchemaReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetToolSchemaReply.ProtoReflect.Descriptor instead.
func (*GetToolSchemaReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{33}
}

func (x *GetToolSchemaReply) GetTool() *Tool {
	if x != nil {
		return x.Tool
	}
	return nil
}

// 列出资源
type ListResourcesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpServer     string                 `protobuf:"bytes,1,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"` // MCP服务器过滤(可选)
	MimeType      string                 `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`    // MIME类型过滤(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResourcesRequest) Reset() {
	*x = ListResourcesRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcesRequest) ProtoMessage() {}

func (x *ListResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcesRequest.ProtoReflect.Descriptor instead.
func (*ListResourcesRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{34}
}

func (x *ListResourcesRequest) GetMcpServer() string {
	if x != nil {
		return x.McpServer
	}
	return ""
}

func (x *ListResourcesRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type ListResourcesReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resources     []*Resource            `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"` // 资源列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListResourcesReply) Reset() {
	*x = ListResourcesReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListResourcesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListResourcesReply) ProtoMessage() {}

func (x *ListResourcesReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListResourcesReply.ProtoReflect.Descriptor instead.
func (*ListResourcesReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{35}
}

func (x *ListResourcesReply) GetResources() []*Resource {
	if x != nil {
		return x.Resources
	}
	return nil
}

// 获取资源
type GetResourceRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"` // 资源URI
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourceRequest) Reset() {
	*x = GetResourceRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceRequest) ProtoMessage() {}

func (x *GetResourceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceRequest.ProtoReflect.Descriptor instead.
func (*GetResourceRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{36}
}

func (x *GetResourceRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

type GetResourceReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       string                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`                                                                             // 资源内容
	MimeType      string                 `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                                                           // MIME类型
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 资源元数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResourceReply) Reset() {
	*x = GetResourceReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResourceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResourceReply) ProtoMessage() {}

func (x *GetResourceReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResourceReply.ProtoReflect.Descriptor instead.
func (*GetResourceReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{37}
}

func (x *GetResourceReply) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *GetResourceReply) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *GetResourceReply) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// 创建知识库
type CreateKnowledgeBaseRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                           // 知识库名称
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                             // 知识库描述
	EmbeddingModel string                 `protobuf:"bytes,4,opt,name=embedding_model,json=embeddingModel,proto3" json:"embedding_model,omitempty"` // 向量化模型(可选)
	ChunkSize      int32                  `protobuf:"varint,5,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`               // 文档分块大小(可选)
	ChunkOverlap   int32                  `protobuf:"varint,6,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`      // 分块重叠大小(可选)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateKnowledgeBaseRequest) Reset() {
	*x = CreateKnowledgeBaseRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseRequest) ProtoMessage() {}

func (x *CreateKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{38}
}

func (x *CreateKnowledgeBaseRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateKnowledgeBaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateKnowledgeBaseRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateKnowledgeBaseRequest) GetEmbeddingModel() string {
	if x != nil {
		return x.EmbeddingModel
	}
	return ""
}

func (x *CreateKnowledgeBaseRequest) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *CreateKnowledgeBaseRequest) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

type CreateKnowledgeBaseReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBase *KnowledgeBase         `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"` // 创建的知识库
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateKnowledgeBaseReply) Reset() {
	*x = CreateKnowledgeBaseReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseReply) ProtoMessage() {}

func (x *CreateKnowledgeBaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseReply.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{39}
}

func (x *CreateKnowledgeBaseReply) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

// 更新知识库
type UpdateKnowledgeBaseRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // 知识库ID
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                           // 知识库名称(可选)
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                             // 知识库描述(可选)
	EmbeddingModel string                 `protobuf:"bytes,4,opt,name=embedding_model,json=embeddingModel,proto3" json:"embedding_model,omitempty"` // 向量化模型(可选)
	ChunkSize      int32                  `protobuf:"varint,5,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`               // 文档分块大小(可选)
	ChunkOverlap   int32                  `protobuf:"varint,6,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`      // 分块重叠大小(可选)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpdateKnowledgeBaseRequest) Reset() {
	*x = UpdateKnowledgeBaseRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseRequest) ProtoMessage() {}

func (x *UpdateKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateKnowledgeBaseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateKnowledgeBaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateKnowledgeBaseRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateKnowledgeBaseRequest) GetEmbeddingModel() string {
	if x != nil {
		return x.EmbeddingModel
	}
	return ""
}

func (x *UpdateKnowledgeBaseRequest) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *UpdateKnowledgeBaseRequest) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

type UpdateKnowledgeBaseReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBase *KnowledgeBase         `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"` // 更新后的知识库
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKnowledgeBaseReply) Reset() {
	*x = UpdateKnowledgeBaseReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseReply) ProtoMessage() {}

func (x *UpdateKnowledgeBaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseReply.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateKnowledgeBaseReply) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

// 删除知识库
type DeleteKnowledgeBaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 知识库ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKnowledgeBaseRequest) Reset() {
	*x = DeleteKnowledgeBaseRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseRequest) ProtoMessage() {}

func (x *DeleteKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteKnowledgeBaseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteKnowledgeBaseReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKnowledgeBaseReply) Reset() {
	*x = DeleteKnowledgeBaseReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseReply) ProtoMessage() {}

func (x *DeleteKnowledgeBaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseReply.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{43}
}

// 列出知识库
type ListKnowledgeBasesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户ID
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页面大小
	Keyword       string                 `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`                    // 搜索关键词(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKnowledgeBasesRequest) Reset() {
	*x = ListKnowledgeBasesRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKnowledgeBasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeBasesRequest) ProtoMessage() {}

func (x *ListKnowledgeBasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeBasesRequest.ProtoReflect.Descriptor instead.
func (*ListKnowledgeBasesRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{44}
}

func (x *ListKnowledgeBasesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListKnowledgeBasesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListKnowledgeBasesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKnowledgeBasesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

type ListKnowledgeBasesReply struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBases []*KnowledgeBase       `protobuf:"bytes,1,rep,name=knowledge_bases,json=knowledgeBases,proto3" json:"knowledge_bases,omitempty"` // 知识库列表
	Total          int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                                        // 总数
	Page           int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                                          // 当前页
	PageSize       int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 页面大小
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListKnowledgeBasesReply) Reset() {
	*x = ListKnowledgeBasesReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKnowledgeBasesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeBasesReply) ProtoMessage() {}

func (x *ListKnowledgeBasesReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeBasesReply.ProtoReflect.Descriptor instead.
func (*ListKnowledgeBasesReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{45}
}

func (x *ListKnowledgeBasesReply) GetKnowledgeBases() []*KnowledgeBase {
	if x != nil {
		return x.KnowledgeBases
	}
	return nil
}

func (x *ListKnowledgeBasesReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListKnowledgeBasesReply) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListKnowledgeBasesReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 上传文档
type UploadDocumentRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"` // 知识库ID
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                 // 文档名称
	Content         []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                                           // 文档内容
	MimeType        string                 `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                         // 文件类型
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UploadDocumentRequest) Reset() {
	*x = UploadDocumentRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocumentRequest) ProtoMessage() {}

func (x *UploadDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocumentRequest.ProtoReflect.Descriptor instead.
func (*UploadDocumentRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{46}
}

func (x *UploadDocumentRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *UploadDocumentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadDocumentRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UploadDocumentRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

type UploadDocumentReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Document      *Document              `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"` // 上传的文档
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadDocumentReply) Reset() {
	*x = UploadDocumentReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadDocumentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocumentReply) ProtoMessage() {}

func (x *UploadDocumentReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocumentReply.ProtoReflect.Descriptor instead.
func (*UploadDocumentReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{47}
}

func (x *UploadDocumentReply) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

// 搜索知识
type SearchKnowledgeRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"` // 知识库ID
	Query           string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`                                               // 搜索查询
	Limit           int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                                              // 返回结果数量限制
	Threshold       float64                `protobuf:"fixed64,4,opt,name=threshold,proto3" json:"threshold,omitempty"`                                     // 相似度阈值
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SearchKnowledgeRequest) Reset() {
	*x = SearchKnowledgeRequest{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchKnowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKnowledgeRequest) ProtoMessage() {}

func (x *SearchKnowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKnowledgeRequest.ProtoReflect.Descriptor instead.
func (*SearchKnowledgeRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{48}
}

func (x *SearchKnowledgeRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *SearchKnowledgeRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchKnowledgeRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchKnowledgeRequest) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type SearchKnowledgeReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunks        []*KnowledgeChunk      `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"` // 搜索结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchKnowledgeReply) Reset() {
	*x = SearchKnowledgeReply{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchKnowledgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKnowledgeReply) ProtoMessage() {}

func (x *SearchKnowledgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKnowledgeReply.ProtoReflect.Descriptor instead.
func (*SearchKnowledgeReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{49}
}

func (x *SearchKnowledgeReply) GetChunks() []*KnowledgeChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// 知识库块
type KnowledgeChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                      // 块ID
	DocumentId    int64                  `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`                                                    // 文档ID
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                                                                             // 块内容
	Score         float64                `protobuf:"fixed64,4,opt,name=score,proto3" json:"score,omitempty"`                                                                               // 相似度分数
	Metadata      map[string]string      `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 块元数据
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KnowledgeChunk) Reset() {
	*x = KnowledgeChunk{}
	mi := &file_api_ai_v1_ai_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeChunk) ProtoMessage() {}

func (x *KnowledgeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_ai_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeChunk.ProtoReflect.Descriptor instead.
func (*KnowledgeChunk) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_ai_proto_rawDescGZIP(), []int{50}
}

func (x *KnowledgeChunk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KnowledgeChunk) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *KnowledgeChunk) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *KnowledgeChunk) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *KnowledgeChunk) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

var File_api_ai_v1_ai_proto protoreflect.FileDescriptor

const file_api_ai_v1_ai_proto_rawDesc = "" +
	"\n" +
	"\x12api/ai/v1/ai.proto\x12\tapi.ai.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\x97\x03\n" +
	"\fConversation\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\x12\x14\n" +
	"\x05title\x18\x03 \x01(\tR\x05title\x12\x1d\n" +
	"\n" +
	"model_name\x18\x04 \x01(\tR\tmodelName\x12#\n" +
	"\rsystem_prompt\x18\x05 \x01(\tR\fsystemPrompt\x12;\n" +
	"\x06config\x18\x06 \x03(\v2#.api.ai.v1.Conversation.ConfigEntryR\x06config\x12\x16\n" +
	"\x06status\x18\a \x01(\x05R\x06status\x129\n" +
	"\n" +
	"created_at\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x1a9\n" +
	"\vConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xda\x02\n" +
	"\aMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12'\n" +
	"\x0fconversation_id\x18\x02 \x01(\x03R\x0econversationId\x12\x12\n" +
	"\x04role\x18\x03 \x01(\tR\x04role\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x122\n" +
	"\n" +
	"tool_calls\x18\x05 \x03(\v2\x13.api.ai.v1.ToolCallR\ttoolCalls\x12<\n" +
	"\bmetadata\x18\x06 \x03(\v2 .api.ai.v1.Message.MetadataEntryR\bmetadata\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xdc\x01\n" +
	"\bToolCall\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1c\n" +
	"\targuments\x18\x03 \x01(\tR\targuments\x12\x16\n" +
	"\x06result\x18\x04 \x01(\tR\x06result\x12\x16\n" +
	"\x06status\x18\x05 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x06 \x01(\tR\ferrorMessage\x129\n" +
	"\n" +
	"created_at\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\"\xba\x04\n" +
	"\vModelConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bprovider\x18\x02 \x01(\tR\bprovider\x12\x17\n" +
	"\aapi_key\x18\x03 \x01(\tR\x06apiKey\x12\x19\n" +
	"\bapi_base\x18\x04 \x01(\tR\aapiBase\x12 \n" +
	"\vtemperature\x18\x05 \x01(\x01R\vtemperature\x12\x1d\n" +
	"\n" +
	"max_tokens\x18\x06 \x01(\x05R\tmaxTokens\x12\x13\n" +
	"\x05top_p\x18\a \x01(\x01R\x04topP\x12+\n" +
	"\x11frequency_penalty\x18\b \x01(\x01R\x10frequencyPenalty\x12)\n" +
	"\x10presence_penalty\x18\t \x01(\x01R\x0fpresencePenalty\x12%\n" +
	"\x0estop_sequences\x18\n" +
	" \x03(\tR\rstopSequences\x12%\n" +
	"\x0esupports_tools\x18\v \x01(\bR\rsupportsTools\x12'\n" +
	"\x0fsupports_vision\x18\f \x01(\bR\x0esupportsVision\x12J\n" +
	"\fextra_params\x18\r \x03(\v2'.api.ai.v1.ModelConfig.ExtraParamsEntryR\vextraParams\x12\x16\n" +
	"\x06status\x18\x0e \x01(\x05R\x06status\x1a>\n" +
	"\x10ExtraParamsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x85\x02\n" +
	"\x04Tool\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12\x16\n" +
	"\x06schema\x18\x03 \x01(\tR\x06schema\x12\x1d\n" +
	"\n" +
	"mcp_server\x18\x04 \x01(\tR\tmcpServer\x129\n" +
	"\bmetadata\x18\x05 \x03(\v2\x1d.api.ai.v1.Tool.MetadataEntryR\bmetadata\x12\x18\n" +
	"\aenabled\x18\x06 \x01(\bR\aenabled\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8a\x02\n" +
	"\bResource\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12\x1b\n" +
	"\tmime_type\x18\x04 \x01(\tR\bmimeType\x12\x1d\n" +
	"\n" +
	"mcp_server\x18\x05 \x01(\tR\tmcpServer\x12=\n" +
	"\bmetadata\x18\x06 \x03(\v2!.api.ai.v1.Resource.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe9\x02\n" +
	"\rKnowledgeBase\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12'\n" +
	"\x0fembedding_model\x18\x05 \x01(\tR\x0eembeddingModel\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x06 \x01(\x05R\tchunkSize\x12#\n" +
	"\rchunk_overlap\x18\a \x01(\x05R\fchunkOverlap\x12\x16\n" +
	"\x06status\x18\b \x01(\x05R\x06status\x129\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\"\xfa\x02\n" +
	"\bDocument\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12*\n" +
	"\x11knowledge_base_id\x18\x02 \x01(\x03R\x0fknowledgeBaseId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12\x1b\n" +
	"\tfile_path\x18\x05 \x01(\tR\bfilePath\x12\x1b\n" +
	"\tmime_type\x18\x06 \x01(\tR\bmimeType\x12\x1b\n" +
	"\tfile_size\x18\a \x01(\x03R\bfileSize\x12\x1f\n" +
	"\vchunk_count\x18\b \x01(\x05R\n" +
	"chunkCount\x12\x16\n" +
	"\x06status\x18\t \x01(\x05R\x06status\x129\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\"\x93\x02\n" +
	"\x19CreateConversationRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x1d\n" +
	"\n" +
	"model_name\x18\x03 \x01(\tR\tmodelName\x12#\n" +
	"\rsystem_prompt\x18\x04 \x01(\tR\fsystemPrompt\x12H\n" +
	"\x06config\x18\x05 \x03(\v20.api.ai.v1.CreateConversationRequest.ConfigEntryR\x06config\x1a9\n" +
	"\vConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"V\n" +
	"\x17CreateConversationReply\x12;\n" +
	"\fconversation\x18\x01 \x01(\v2\x17.api.ai.v1.ConversationR\fconversation\"(\n" +
	"\x16GetConversationRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"S\n" +
	"\x14GetConversationReply\x12;\n" +
	"\fconversation\x18\x01 \x01(\v2\x17.api.ai.v1.ConversationR\fconversation\"\xeb\x01\n" +
	"\x19UpdateConversationRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12#\n" +
	"\rsystem_prompt\x18\x03 \x01(\tR\fsystemPrompt\x12H\n" +
	"\x06config\x18\x04 \x03(\v20.api.ai.v1.UpdateConversationRequest.ConfigEntryR\x06config\x1a9\n" +
	"\vConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"V\n" +
	"\x17UpdateConversationReply\x12;\n" +
	"\fconversation\x18\x01 \x01(\v2\x17.api.ai.v1.ConversationR\fconversation\"+\n" +
	"\x19DeleteConversationRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"\x19\n" +
	"\x17DeleteConversationReply\"~\n" +
	"\x18ListConversationsRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x18\n" +
	"\akeyword\x18\x04 \x01(\tR\akeyword\"\x9e\x01\n" +
	"\x16ListConversationsReply\x12=\n" +
	"\rconversations\x18\x01 \x03(\v2\x17.api.ai.v1.ConversationR\rconversations\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"\xc3\x02\n" +
	"\x12SendMessageRequest\x12'\n" +
	"\x0fconversation_id\x18\x01 \x01(\x03R\x0econversationId\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12 \n" +
	"\vattachments\x18\x03 \x03(\tR\vattachments\x12!\n" +
	"\fenable_tools\x18\x04 \x01(\bR\venableTools\x12#\n" +
	"\rallowed_tools\x18\x05 \x03(\tR\fallowedTools\x12D\n" +
	"\aoptions\x18\x06 \x03(\v2*.api.ai.v1.SendMessageRequest.OptionsEntryR\aoptions\x1a:\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8a\x01\n" +
	"\x10SendMessageReply\x125\n" +
	"\fuser_message\x18\x01 \x01(\v2\x12.api.ai.v1.MessageR\vuserMessage\x12?\n" +
	"\x11assistant_message\x18\x02 \x01(\v2\x12.api.ai.v1.MessageR\x10assistantMessage\"\x9c\x01\n" +
	"\x12GetMessagesRequest\x12'\n" +
	"\x0fconversation_id\x18\x01 \x01(\x03R\x0econversationId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12,\n" +
	"\x12include_tool_calls\x18\x04 \x01(\bR\x10includeToolCalls\"\x89\x01\n" +
	"\x10GetMessagesReply\x12.\n" +
	"\bmessages\x18\x01 \x03(\v2\x12.api.ai.v1.MessageR\bmessages\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"R\n" +
	"\x11ListModelsRequest\x12\x1a\n" +
	"\bprovider\x18\x01 \x01(\tR\bprovider\x12!\n" +
	"\fonly_enabled\x18\x02 \x01(\bR\vonlyEnabled\"A\n" +
	"\x0fListModelsReply\x12.\n" +
	"\x06models\x18\x01 \x03(\v2\x16.api.ai.v1.ModelConfigR\x06models\"+\n" +
	"\x15GetModelConfigRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"C\n" +
	"\x13GetModelConfigReply\x12,\n" +
	"\x05model\x18\x01 \x01(\v2\x16.api.ai.v1.ModelConfigR\x05model\"^\n" +
	"\x18UpdateModelConfigRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12.\n" +
	"\x06config\x18\x02 \x01(\v2\x16.api.ai.v1.ModelConfigR\x06config\"F\n" +
	"\x16UpdateModelConfigReply\x12,\n" +
	"\x05model\x18\x01 \x01(\v2\x16.api.ai.v1.ModelConfigR\x05model\"T\n" +
	"\x10ListToolsRequest\x12\x1d\n" +
	"\n" +
	"mcp_server\x18\x01 \x01(\tR\tmcpServer\x12!\n" +
	"\fonly_enabled\x18\x02 \x01(\bR\vonlyEnabled\"7\n" +
	"\x0eListToolsReply\x12%\n" +
	"\x05tools\x18\x01 \x03(\v2\x0f.api.ai.v1.ToolR\x05tools\"l\n" +
	"\x0fCallToolRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1c\n" +
	"\targuments\x18\x02 \x01(\tR\targuments\x12'\n" +
	"\x0fconversation_id\x18\x03 \x01(\x03R\x0econversationId\"\xeb\x01\n" +
	"\x10CallToolResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\tR\x06result\x12\x16\n" +
	"\x06status\x18\x02 \x01(\x05R\x06status\x12#\n" +
	"\rerror_message\x18\x03 \x01(\tR\ferrorMessage\x12E\n" +
	"\bmetadata\x18\x04 \x03(\v2).api.ai.v1.CallToolResponse.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"*\n" +
	"\x14GetToolSchemaRequest\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\"9\n" +
	"\x12GetToolSchemaReply\x12#\n" +
	"\x04tool\x18\x01 \x01(\v2\x0f.api.ai.v1.ToolR\x04tool\"R\n" +
	"\x14ListResourcesRequest\x12\x1d\n" +
	"\n" +
	"mcp_server\x18\x01 \x01(\tR\tmcpServer\x12\x1b\n" +
	"\tmime_type\x18\x02 \x01(\tR\bmimeType\"G\n" +
	"\x12ListResourcesReply\x121\n" +
	"\tresources\x18\x01 \x03(\v2\x13.api.ai.v1.ResourceR\tresources\"&\n" +
	"\x12GetResourceRequest\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\"\xcd\x01\n" +
	"\x10GetResourceReply\x12\x18\n" +
	"\acontent\x18\x01 \x01(\tR\acontent\x12\x1b\n" +
	"\tmime_type\x18\x02 \x01(\tR\bmimeType\x12E\n" +
	"\bmetadata\x18\x03 \x03(\v2).api.ai.v1.GetResourceReply.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd8\x01\n" +
	"\x1aCreateKnowledgeBaseRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12'\n" +
	"\x0fembedding_model\x18\x04 \x01(\tR\x0eembeddingModel\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x05 \x01(\x05R\tchunkSize\x12#\n" +
	"\rchunk_overlap\x18\x06 \x01(\x05R\fchunkOverlap\"[\n" +
	"\x18CreateKnowledgeBaseReply\x12?\n" +
	"\x0eknowledge_base\x18\x01 \x01(\v2\x18.api.ai.v1.KnowledgeBaseR\rknowledgeBase\"\xcf\x01\n" +
	"\x1aUpdateKnowledgeBaseRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12'\n" +
	"\x0fembedding_model\x18\x04 \x01(\tR\x0eembeddingModel\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x05 \x01(\x05R\tchunkSize\x12#\n" +
	"\rchunk_overlap\x18\x06 \x01(\x05R\fchunkOverlap\"[\n" +
	"\x18UpdateKnowledgeBaseReply\x12?\n" +
	"\x0eknowledge_base\x18\x01 \x01(\v2\x18.api.ai.v1.KnowledgeBaseR\rknowledgeBase\",\n" +
	"\x1aDeleteKnowledgeBaseRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"\x1a\n" +
	"\x18DeleteKnowledgeBaseReply\"\x7f\n" +
	"\x19ListKnowledgeBasesRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x18\n" +
	"\akeyword\x18\x04 \x01(\tR\akeyword\"\xa3\x01\n" +
	"\x17ListKnowledgeBasesReply\x12A\n" +
	"\x0fknowledge_bases\x18\x01 \x03(\v2\x18.api.ai.v1.KnowledgeBaseR\x0eknowledgeBases\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"\x8e\x01\n" +
	"\x15UploadDocumentRequest\x12*\n" +
	"\x11knowledge_base_id\x18\x01 \x01(\x03R\x0fknowledgeBaseId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\acontent\x18\x03 \x01(\fR\acontent\x12\x1b\n" +
	"\tmime_type\x18\x04 \x01(\tR\bmimeType\"F\n" +
	"\x13UploadDocumentReply\x12/\n" +
	"\bdocument\x18\x01 \x01(\v2\x13.api.ai.v1.DocumentR\bdocument\"\x8e\x01\n" +
	"\x16SearchKnowledgeRequest\x12*\n" +
	"\x11knowledge_base_id\x18\x01 \x01(\x03R\x0fknowledgeBaseId\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x1c\n" +
	"\tthreshold\x18\x04 \x01(\x01R\tthreshold\"I\n" +
	"\x14SearchKnowledgeReply\x121\n" +
	"\x06chunks\x18\x01 \x03(\v2\x19.api.ai.v1.KnowledgeChunkR\x06chunks\"\xf3\x01\n" +
	"\x0eKnowledgeChunk\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1f\n" +
	"\vdocument_id\x18\x02 \x01(\x03R\n" +
	"documentId\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12\x14\n" +
	"\x05score\x18\x04 \x01(\x01R\x05score\x12C\n" +
	"\bmetadata\x18\x05 \x03(\v2'.api.ai.v1.KnowledgeChunk.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x012\x92\x0e\n" +
	"\x02Ai\x12^\n" +
	"\x12CreateConversation\x12$.api.ai.v1.CreateConversationRequest\x1a\".api.ai.v1.CreateConversationReply\x12U\n" +
	"\x0fGetConversation\x12!.api.ai.v1.GetConversationRequest\x1a\x1f.api.ai.v1.GetConversationReply\x12^\n" +
	"\x12UpdateConversation\x12$.api.ai.v1.UpdateConversationRequest\x1a\".api.ai.v1.UpdateConversationReply\x12^\n" +
	"\x12DeleteConversation\x12$.api.ai.v1.DeleteConversationRequest\x1a\".api.ai.v1.DeleteConversationReply\x12[\n" +
	"\x11ListConversations\x12#.api.ai.v1.ListConversationsRequest\x1a!.api.ai.v1.ListConversationsReply\x12I\n" +
	"\vSendMessage\x12\x1d.api.ai.v1.SendMessageRequest\x1a\x1b.api.ai.v1.SendMessageReply\x12I\n" +
	"\vGetMessages\x12\x1d.api.ai.v1.GetMessagesRequest\x1a\x1b.api.ai.v1.GetMessagesReply\x12F\n" +
	"\n" +
	"ListModels\x12\x1c.api.ai.v1.ListModelsRequest\x1a\x1a.api.ai.v1.ListModelsReply\x12R\n" +
	"\x0eGetModelConfig\x12 .api.ai.v1.GetModelConfigRequest\x1a\x1e.api.ai.v1.GetModelConfigReply\x12[\n" +
	"\x11UpdateModelConfig\x12#.api.ai.v1.UpdateModelConfigRequest\x1a!.api.ai.v1.UpdateModelConfigReply\x12C\n" +
	"\tListTools\x12\x1b.api.ai.v1.ListToolsRequest\x1a\x19.api.ai.v1.ListToolsReply\x12C\n" +
	"\bCallTool\x12\x1a.api.ai.v1.CallToolRequest\x1a\x1b.api.ai.v1.CallToolResponse\x12O\n" +
	"\rGetToolSchema\x12\x1f.api.ai.v1.GetToolSchemaRequest\x1a\x1d.api.ai.v1.GetToolSchemaReply\x12O\n" +
	"\rListResources\x12\x1f.api.ai.v1.ListResourcesRequest\x1a\x1d.api.ai.v1.ListResourcesReply\x12I\n" +
	"\vGetResource\x12\x1d.api.ai.v1.GetResourceRequest\x1a\x1b.api.ai.v1.GetResourceReply\x12a\n" +
	"\x13CreateKnowledgeBase\x12%.api.ai.v1.CreateKnowledgeBaseRequest\x1a#.api.ai.v1.CreateKnowledgeBaseReply\x12a\n" +
	"\x13UpdateKnowledgeBase\x12%.api.ai.v1.UpdateKnowledgeBaseRequest\x1a#.api.ai.v1.UpdateKnowledgeBaseReply\x12a\n" +
	"\x13DeleteKnowledgeBase\x12%.api.ai.v1.DeleteKnowledgeBaseRequest\x1a#.api.ai.v1.DeleteKnowledgeBaseReply\x12^\n" +
	"\x12ListKnowledgeBases\x12$.api.ai.v1.ListKnowledgeBasesRequest\x1a\".api.ai.v1.ListKnowledgeBasesReply\x12R\n" +
	"\x0eUploadDocument\x12 .api.ai.v1.UploadDocumentRequest\x1a\x1e.api.ai.v1.UploadDocumentReply\x12U\n" +
	"\x0fSearchKnowledge\x12!.api.ai.v1.SearchKnowledgeRequest\x1a\x1f.api.ai.v1.SearchKnowledgeReplyBE\n" +
	"\x1ecom.oldwei.universal.api.ai.v1B\tAiProtoV1P\x01Z\x16universal/api/ai/v1;v1b\x06proto3"

var (
	file_api_ai_v1_ai_proto_rawDescOnce sync.Once
	file_api_ai_v1_ai_proto_rawDescData []byte
)

func file_api_ai_v1_ai_proto_rawDescGZIP() []byte {
	file_api_ai_v1_ai_proto_rawDescOnce.Do(func() {
		file_api_ai_v1_ai_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_ai_v1_ai_proto_rawDesc), len(file_api_ai_v1_ai_proto_rawDesc)))
	})
	return file_api_ai_v1_ai_proto_rawDescData
}

var file_api_ai_v1_ai_proto_msgTypes = make([]protoimpl.MessageInfo, 62)
var file_api_ai_v1_ai_proto_goTypes = []any{
	(*Conversation)(nil),               // 0: api.ai.v1.Conversation
	(*Message)(nil),                    // 1: api.ai.v1.Message
	(*ToolCall)(nil),                   // 2: api.ai.v1.ToolCall
	(*ModelConfig)(nil),                // 3: api.ai.v1.ModelConfig
	(*Tool)(nil),                       // 4: api.ai.v1.Tool
	(*Resource)(nil),                   // 5: api.ai.v1.Resource
	(*KnowledgeBase)(nil),              // 6: api.ai.v1.KnowledgeBase
	(*Document)(nil),                   // 7: api.ai.v1.Document
	(*CreateConversationRequest)(nil),  // 8: api.ai.v1.CreateConversationRequest
	(*CreateConversationReply)(nil),    // 9: api.ai.v1.CreateConversationReply
	(*GetConversationRequest)(nil),     // 10: api.ai.v1.GetConversationRequest
	(*GetConversationReply)(nil),       // 11: api.ai.v1.GetConversationReply
	(*UpdateConversationRequest)(nil),  // 12: api.ai.v1.UpdateConversationRequest
	(*UpdateConversationReply)(nil),    // 13: api.ai.v1.UpdateConversationReply
	(*DeleteConversationRequest)(nil),  // 14: api.ai.v1.DeleteConversationRequest
	(*DeleteConversationReply)(nil),    // 15: api.ai.v1.DeleteConversationReply
	(*ListConversationsRequest)(nil),   // 16: api.ai.v1.ListConversationsRequest
	(*ListConversationsReply)(nil),     // 17: api.ai.v1.ListConversationsReply
	(*SendMessageRequest)(nil),         // 18: api.ai.v1.SendMessageRequest
	(*SendMessageReply)(nil),           // 19: api.ai.v1.SendMessageReply
	(*GetMessagesRequest)(nil),         // 20: api.ai.v1.GetMessagesRequest
	(*GetMessagesReply)(nil),           // 21: api.ai.v1.GetMessagesReply
	(*ListModelsRequest)(nil),          // 22: api.ai.v1.ListModelsRequest
	(*ListModelsReply)(nil),            // 23: api.ai.v1.ListModelsReply
	(*GetModelConfigRequest)(nil),      // 24: api.ai.v1.GetModelConfigRequest
	(*GetModelConfigReply)(nil),        // 25: api.ai.v1.GetModelConfigReply
	(*UpdateModelConfigRequest)(nil),   // 26: api.ai.v1.UpdateModelConfigRequest
	(*UpdateModelConfigReply)(nil),     // 27: api.ai.v1.UpdateModelConfigReply
	(*ListToolsRequest)(nil),           // 28: api.ai.v1.ListToolsRequest
	(*ListToolsReply)(nil),             // 29: api.ai.v1.ListToolsReply
	(*CallToolRequest)(nil),            // 30: api.ai.v1.CallToolRequest
	(*CallToolResponse)(nil),           // 31: api.ai.v1.CallToolResponse
	(*GetToolSchemaRequest)(nil),       // 32: api.ai.v1.GetToolSchemaRequest
	(*GetToolSchemaReply)(nil),         // 33: api.ai.v1.GetToolSchemaReply
	(*ListResourcesRequest)(nil),       // 34: api.ai.v1.ListResourcesRequest
	(*ListResourcesReply)(nil),         // 35: api.ai.v1.ListResourcesReply
	(*GetResourceRequest)(nil),         // 36: api.ai.v1.GetResourceRequest
	(*GetResourceReply)(nil),           // 37: api.ai.v1.GetResourceReply
	(*CreateKnowledgeBaseRequest)(nil), // 38: api.ai.v1.CreateKnowledgeBaseRequest
	(*CreateKnowledgeBaseReply)(nil),   // 39: api.ai.v1.CreateKnowledgeBaseReply
	(*UpdateKnowledgeBaseRequest)(nil), // 40: api.ai.v1.UpdateKnowledgeBaseRequest
	(*UpdateKnowledgeBaseReply)(nil),   // 41: api.ai.v1.UpdateKnowledgeBaseReply
	(*DeleteKnowledgeBaseRequest)(nil), // 42: api.ai.v1.DeleteKnowledgeBaseRequest
	(*DeleteKnowledgeBaseReply)(nil),   // 43: api.ai.v1.DeleteKnowledgeBaseReply
	(*ListKnowledgeBasesRequest)(nil),  // 44: api.ai.v1.ListKnowledgeBasesRequest
	(*ListKnowledgeBasesReply)(nil),    // 45: api.ai.v1.ListKnowledgeBasesReply
	(*UploadDocumentRequest)(nil),      // 46: api.ai.v1.UploadDocumentRequest
	(*UploadDocumentReply)(nil),        // 47: api.ai.v1.UploadDocumentReply
	(*SearchKnowledgeRequest)(nil),     // 48: api.ai.v1.SearchKnowledgeRequest
	(*SearchKnowledgeReply)(nil),       // 49: api.ai.v1.SearchKnowledgeReply
	(*KnowledgeChunk)(nil),             // 50: api.ai.v1.KnowledgeChunk
	nil,                                // 51: api.ai.v1.Conversation.ConfigEntry
	nil,                                // 52: api.ai.v1.Message.MetadataEntry
	nil,                                // 53: api.ai.v1.ModelConfig.ExtraParamsEntry
	nil,                                // 54: api.ai.v1.Tool.MetadataEntry
	nil,                                // 55: api.ai.v1.Resource.MetadataEntry
	nil,                                // 56: api.ai.v1.CreateConversationRequest.ConfigEntry
	nil,                                // 57: api.ai.v1.UpdateConversationRequest.ConfigEntry
	nil,                                // 58: api.ai.v1.SendMessageRequest.OptionsEntry
	nil,                                // 59: api.ai.v1.CallToolResponse.MetadataEntry
	nil,                                // 60: api.ai.v1.GetResourceReply.MetadataEntry
	nil,                                // 61: api.ai.v1.KnowledgeChunk.MetadataEntry
	(*timestamppb.Timestamp)(nil),      // 62: google.protobuf.Timestamp
}
var file_api_ai_v1_ai_proto_depIdxs = []int32{
	51, // 0: api.ai.v1.Conversation.config:type_name -> api.ai.v1.Conversation.ConfigEntry
	62, // 1: api.ai.v1.Conversation.created_at:type_name -> google.protobuf.Timestamp
	62, // 2: api.ai.v1.Conversation.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 3: api.ai.v1.Message.tool_calls:type_name -> api.ai.v1.ToolCall
	52, // 4: api.ai.v1.Message.metadata:type_name -> api.ai.v1.Message.MetadataEntry
	62, // 5: api.ai.v1.Message.created_at:type_name -> google.protobuf.Timestamp
	62, // 6: api.ai.v1.ToolCall.created_at:type_name -> google.protobuf.Timestamp
	53, // 7: api.ai.v1.ModelConfig.extra_params:type_name -> api.ai.v1.ModelConfig.ExtraParamsEntry
	54, // 8: api.ai.v1.Tool.metadata:type_name -> api.ai.v1.Tool.MetadataEntry
	55, // 9: api.ai.v1.Resource.metadata:type_name -> api.ai.v1.Resource.MetadataEntry
	62, // 10: api.ai.v1.KnowledgeBase.created_at:type_name -> google.protobuf.Timestamp
	62, // 11: api.ai.v1.KnowledgeBase.updated_at:type_name -> google.protobuf.Timestamp
	62, // 12: api.ai.v1.Document.created_at:type_name -> google.protobuf.Timestamp
	62, // 13: api.ai.v1.Document.updated_at:type_name -> google.protobuf.Timestamp
	56, // 14: api.ai.v1.CreateConversationRequest.config:type_name -> api.ai.v1.CreateConversationRequest.ConfigEntry
	0,  // 15: api.ai.v1.CreateConversationReply.conversation:type_name -> api.ai.v1.Conversation
	0,  // 16: api.ai.v1.GetConversationReply.conversation:type_name -> api.ai.v1.Conversation
	57, // 17: api.ai.v1.UpdateConversationRequest.config:type_name -> api.ai.v1.UpdateConversationRequest.ConfigEntry
	0,  // 18: api.ai.v1.UpdateConversationReply.conversation:type_name -> api.ai.v1.Conversation
	0,  // 19: api.ai.v1.ListConversationsReply.conversations:type_name -> api.ai.v1.Conversation
	58, // 20: api.ai.v1.SendMessageRequest.options:type_name -> api.ai.v1.SendMessageRequest.OptionsEntry
	1,  // 21: api.ai.v1.SendMessageReply.user_message:type_name -> api.ai.v1.Message
	1,  // 22: api.ai.v1.SendMessageReply.assistant_message:type_name -> api.ai.v1.Message
	1,  // 23: api.ai.v1.GetMessagesReply.messages:type_name -> api.ai.v1.Message
	3,  // 24: api.ai.v1.ListModelsReply.models:type_name -> api.ai.v1.ModelConfig
	3,  // 25: api.ai.v1.GetModelConfigReply.model:type_name -> api.ai.v1.ModelConfig
	3,  // 26: api.ai.v1.UpdateModelConfigRequest.config:type_name -> api.ai.v1.ModelConfig
	3,  // 27: api.ai.v1.UpdateModelConfigReply.model:type_name -> api.ai.v1.ModelConfig
	4,  // 28: api.ai.v1.ListToolsReply.tools:type_name -> api.ai.v1.Tool
	59, // 29: api.ai.v1.CallToolResponse.metadata:type_name -> api.ai.v1.CallToolResponse.MetadataEntry
	4,  // 30: api.ai.v1.GetToolSchemaReply.tool:type_name -> api.ai.v1.Tool
	5,  // 31: api.ai.v1.ListResourcesReply.resources:type_name -> api.ai.v1.Resource
	60, // 32: api.ai.v1.GetResourceReply.metadata:type_name -> api.ai.v1.GetResourceReply.MetadataEntry
	6,  // 33: api.ai.v1.CreateKnowledgeBaseReply.knowledge_base:type_name -> api.ai.v1.KnowledgeBase
	6,  // 34: api.ai.v1.UpdateKnowledgeBaseReply.knowledge_base:type_name -> api.ai.v1.KnowledgeBase
	6,  // 35: api.ai.v1.ListKnowledgeBasesReply.knowledge_bases:type_name -> api.ai.v1.KnowledgeBase
	7,  // 36: api.ai.v1.UploadDocumentReply.document:type_name -> api.ai.v1.Document
	50, // 37: api.ai.v1.SearchKnowledgeReply.chunks:type_name -> api.ai.v1.KnowledgeChunk
	61, // 38: api.ai.v1.KnowledgeChunk.metadata:type_name -> api.ai.v1.KnowledgeChunk.MetadataEntry
	8,  // 39: api.ai.v1.Ai.CreateConversation:input_type -> api.ai.v1.CreateConversationRequest
	10, // 40: api.ai.v1.Ai.GetConversation:input_type -> api.ai.v1.GetConversationRequest
	12, // 41: api.ai.v1.Ai.UpdateConversation:input_type -> api.ai.v1.UpdateConversationRequest
	14, // 42: api.ai.v1.Ai.DeleteConversation:input_type -> api.ai.v1.DeleteConversationRequest
	16, // 43: api.ai.v1.Ai.ListConversations:input_type -> api.ai.v1.ListConversationsRequest
	18, // 44: api.ai.v1.Ai.SendMessage:input_type -> api.ai.v1.SendMessageRequest
	20, // 45: api.ai.v1.Ai.GetMessages:input_type -> api.ai.v1.GetMessagesRequest
	22, // 46: api.ai.v1.Ai.ListModels:input_type -> api.ai.v1.ListModelsRequest
	24, // 47: api.ai.v1.Ai.GetModelConfig:input_type -> api.ai.v1.GetModelConfigRequest
	26, // 48: api.ai.v1.Ai.UpdateModelConfig:input_type -> api.ai.v1.UpdateModelConfigRequest
	28, // 49: api.ai.v1.Ai.ListTools:input_type -> api.ai.v1.ListToolsRequest
	30, // 50: api.ai.v1.Ai.CallTool:input_type -> api.ai.v1.CallToolRequest
	32, // 51: api.ai.v1.Ai.GetToolSchema:input_type -> api.ai.v1.GetToolSchemaRequest
	34, // 52: api.ai.v1.Ai.ListResources:input_type -> api.ai.v1.ListResourcesRequest
	36, // 53: api.ai.v1.Ai.GetResource:input_type -> api.ai.v1.GetResourceRequest
	38, // 54: api.ai.v1.Ai.CreateKnowledgeBase:input_type -> api.ai.v1.CreateKnowledgeBaseRequest
	40, // 55: api.ai.v1.Ai.UpdateKnowledgeBase:input_type -> api.ai.v1.UpdateKnowledgeBaseRequest
	42, // 56: api.ai.v1.Ai.DeleteKnowledgeBase:input_type -> api.ai.v1.DeleteKnowledgeBaseRequest
	44, // 57: api.ai.v1.Ai.ListKnowledgeBases:input_type -> api.ai.v1.ListKnowledgeBasesRequest
	46, // 58: api.ai.v1.Ai.UploadDocument:input_type -> api.ai.v1.UploadDocumentRequest
	48, // 59: api.ai.v1.Ai.SearchKnowledge:input_type -> api.ai.v1.SearchKnowledgeRequest
	9,  // 60: api.ai.v1.Ai.CreateConversation:output_type -> api.ai.v1.CreateConversationReply
	11, // 61: api.ai.v1.Ai.GetConversation:output_type -> api.ai.v1.GetConversationReply
	13, // 62: api.ai.v1.Ai.UpdateConversation:output_type -> api.ai.v1.UpdateConversationReply
	15, // 63: api.ai.v1.Ai.DeleteConversation:output_type -> api.ai.v1.DeleteConversationReply
	17, // 64: api.ai.v1.Ai.ListConversations:output_type -> api.ai.v1.ListConversationsReply
	19, // 65: api.ai.v1.Ai.SendMessage:output_type -> api.ai.v1.SendMessageReply
	21, // 66: api.ai.v1.Ai.GetMessages:output_type -> api.ai.v1.GetMessagesReply
	23, // 67: api.ai.v1.Ai.ListModels:output_type -> api.ai.v1.ListModelsReply
	25, // 68: api.ai.v1.Ai.GetModelConfig:output_type -> api.ai.v1.GetModelConfigReply
	27, // 69: api.ai.v1.Ai.UpdateModelConfig:output_type -> api.ai.v1.UpdateModelConfigReply
	29, // 70: api.ai.v1.Ai.ListTools:output_type -> api.ai.v1.ListToolsReply
	31, // 71: api.ai.v1.Ai.CallTool:output_type -> api.ai.v1.CallToolResponse
	33, // 72: api.ai.v1.Ai.GetToolSchema:output_type -> api.ai.v1.GetToolSchemaReply
	35, // 73: api.ai.v1.Ai.ListResources:output_type -> api.ai.v1.ListResourcesReply
	37, // 74: api.ai.v1.Ai.GetResource:output_type -> api.ai.v1.GetResourceReply
	39, // 75: api.ai.v1.Ai.CreateKnowledgeBase:output_type -> api.ai.v1.CreateKnowledgeBaseReply
	41, // 76: api.ai.v1.Ai.UpdateKnowledgeBase:output_type -> api.ai.v1.UpdateKnowledgeBaseReply
	43, // 77: api.ai.v1.Ai.DeleteKnowledgeBase:output_type -> api.ai.v1.DeleteKnowledgeBaseReply
	45, // 78: api.ai.v1.Ai.ListKnowledgeBases:output_type -> api.ai.v1.ListKnowledgeBasesReply
	47, // 79: api.ai.v1.Ai.UploadDocument:output_type -> api.ai.v1.UploadDocumentReply
	49, // 80: api.ai.v1.Ai.SearchKnowledge:output_type -> api.ai.v1.SearchKnowledgeReply
	60, // [60:81] is the sub-list for method output_type
	39, // [39:60] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_api_ai_v1_ai_proto_init() }
func file_api_ai_v1_ai_proto_init() {
	if File_api_ai_v1_ai_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_ai_v1_ai_proto_rawDesc), len(file_api_ai_v1_ai_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   62,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_ai_v1_ai_proto_goTypes,
		DependencyIndexes: file_api_ai_v1_ai_proto_depIdxs,
		MessageInfos:      file_api_ai_v1_ai_proto_msgTypes,
	}.Build()
	File_api_ai_v1_ai_proto = out.File
	file_api_ai_v1_ai_proto_goTypes = nil
	file_api_ai_v1_ai_proto_depIdxs = nil
}
