// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: api/ai/v1/ai.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Ai_GetConversationAnalytics_FullMethodName = "/api.ai.v1.Ai/GetConversationAnalytics"
	Ai_GetUserUsageStats_FullMethodName        = "/api.ai.v1.Ai/GetUserUsageStats"
	Ai_GetModelPerformanceStats_FullMethodName = "/api.ai.v1.Ai/GetModelPerformanceStats"
	Ai_GetConversationTrends_FullMethodName    = "/api.ai.v1.Ai/GetConversationTrends"
	Ai_GetTopicAnalysis_FullMethodName         = "/api.ai.v1.Ai/GetTopicAnalysis"
	Ai_GetSystemOverview_FullMethodName        = "/api.ai.v1.Ai/GetSystemOverview"
)

// AiClient is the client API for Ai service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AI服务接口定义
type AiClient interface {
	// GetConversationAnalytics 获取对话统计分析数据
	// 提供用户对话行为的统计分析，包括使用频率、模型偏好、话题分布等
	GetConversationAnalytics(ctx context.Context, in *GetConversationAnalyticsRequest, opts ...grpc.CallOption) (*GetConversationAnalyticsReply, error)
	// GetUserUsageStats 获取用户使用统计
	// 分析用户的AI使用情况，包括token消耗、成本统计、时间分布等
	GetUserUsageStats(ctx context.Context, in *GetUserUsageStatsRequest, opts ...grpc.CallOption) (*GetUserUsageStatsReply, error)
	// GetModelPerformanceStats 获取模型性能统计
	// 分析不同模型的使用情况和性能指标
	GetModelPerformanceStats(ctx context.Context, in *GetModelPerformanceStatsRequest, opts ...grpc.CallOption) (*GetModelPerformanceStatsReply, error)
	// GetConversationTrends 获取对话趋势分析
	// 提供时间序列的对话趋势分析数据
	GetConversationTrends(ctx context.Context, in *GetConversationTrendsRequest, opts ...grpc.CallOption) (*GetConversationTrendsReply, error)
	// GetTopicAnalysis 获取话题分析
	// 分析对话中的主要话题和内容分布
	GetTopicAnalysis(ctx context.Context, in *GetTopicAnalysisRequest, opts ...grpc.CallOption) (*GetTopicAnalysisReply, error)
	// GetSystemOverview 获取系统总览统计
	// 提供整个AI系统的总体使用情况和健康状况
	GetSystemOverview(ctx context.Context, in *GetSystemOverviewRequest, opts ...grpc.CallOption) (*GetSystemOverviewReply, error)
}

type aiClient struct {
	cc grpc.ClientConnInterface
}

func NewAiClient(cc grpc.ClientConnInterface) AiClient {
	return &aiClient{cc}
}

func (c *aiClient) GetConversationAnalytics(ctx context.Context, in *GetConversationAnalyticsRequest, opts ...grpc.CallOption) (*GetConversationAnalyticsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationAnalyticsReply)
	err := c.cc.Invoke(ctx, Ai_GetConversationAnalytics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) GetUserUsageStats(ctx context.Context, in *GetUserUsageStatsRequest, opts ...grpc.CallOption) (*GetUserUsageStatsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserUsageStatsReply)
	err := c.cc.Invoke(ctx, Ai_GetUserUsageStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) GetModelPerformanceStats(ctx context.Context, in *GetModelPerformanceStatsRequest, opts ...grpc.CallOption) (*GetModelPerformanceStatsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetModelPerformanceStatsReply)
	err := c.cc.Invoke(ctx, Ai_GetModelPerformanceStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) GetConversationTrends(ctx context.Context, in *GetConversationTrendsRequest, opts ...grpc.CallOption) (*GetConversationTrendsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationTrendsReply)
	err := c.cc.Invoke(ctx, Ai_GetConversationTrends_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) GetTopicAnalysis(ctx context.Context, in *GetTopicAnalysisRequest, opts ...grpc.CallOption) (*GetTopicAnalysisReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTopicAnalysisReply)
	err := c.cc.Invoke(ctx, Ai_GetTopicAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aiClient) GetSystemOverview(ctx context.Context, in *GetSystemOverviewRequest, opts ...grpc.CallOption) (*GetSystemOverviewReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSystemOverviewReply)
	err := c.cc.Invoke(ctx, Ai_GetSystemOverview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AiServer is the server API for Ai service.
// All implementations must embed UnimplementedAiServer
// for forward compatibility.
//
// AI服务接口定义
type AiServer interface {
	// GetConversationAnalytics 获取对话统计分析数据
	// 提供用户对话行为的统计分析，包括使用频率、模型偏好、话题分布等
	GetConversationAnalytics(context.Context, *GetConversationAnalyticsRequest) (*GetConversationAnalyticsReply, error)
	// GetUserUsageStats 获取用户使用统计
	// 分析用户的AI使用情况，包括token消耗、成本统计、时间分布等
	GetUserUsageStats(context.Context, *GetUserUsageStatsRequest) (*GetUserUsageStatsReply, error)
	// GetModelPerformanceStats 获取模型性能统计
	// 分析不同模型的使用情况和性能指标
	GetModelPerformanceStats(context.Context, *GetModelPerformanceStatsRequest) (*GetModelPerformanceStatsReply, error)
	// GetConversationTrends 获取对话趋势分析
	// 提供时间序列的对话趋势分析数据
	GetConversationTrends(context.Context, *GetConversationTrendsRequest) (*GetConversationTrendsReply, error)
	// GetTopicAnalysis 获取话题分析
	// 分析对话中的主要话题和内容分布
	GetTopicAnalysis(context.Context, *GetTopicAnalysisRequest) (*GetTopicAnalysisReply, error)
	// GetSystemOverview 获取系统总览统计
	// 提供整个AI系统的总体使用情况和健康状况
	GetSystemOverview(context.Context, *GetSystemOverviewRequest) (*GetSystemOverviewReply, error)
	mustEmbedUnimplementedAiServer()
}

// UnimplementedAiServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAiServer struct{}

func (UnimplementedAiServer) GetConversationAnalytics(context.Context, *GetConversationAnalyticsRequest) (*GetConversationAnalyticsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationAnalytics not implemented")
}
func (UnimplementedAiServer) GetUserUsageStats(context.Context, *GetUserUsageStatsRequest) (*GetUserUsageStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserUsageStats not implemented")
}
func (UnimplementedAiServer) GetModelPerformanceStats(context.Context, *GetModelPerformanceStatsRequest) (*GetModelPerformanceStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelPerformanceStats not implemented")
}
func (UnimplementedAiServer) GetConversationTrends(context.Context, *GetConversationTrendsRequest) (*GetConversationTrendsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationTrends not implemented")
}
func (UnimplementedAiServer) GetTopicAnalysis(context.Context, *GetTopicAnalysisRequest) (*GetTopicAnalysisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicAnalysis not implemented")
}
func (UnimplementedAiServer) GetSystemOverview(context.Context, *GetSystemOverviewRequest) (*GetSystemOverviewReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemOverview not implemented")
}
func (UnimplementedAiServer) mustEmbedUnimplementedAiServer() {}
func (UnimplementedAiServer) testEmbeddedByValue()            {}

// UnsafeAiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AiServer will
// result in compilation errors.
type UnsafeAiServer interface {
	mustEmbedUnimplementedAiServer()
}

func RegisterAiServer(s grpc.ServiceRegistrar, srv AiServer) {
	// If the following call pancis, it indicates UnimplementedAiServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Ai_ServiceDesc, srv)
}

func _Ai_GetConversationAnalytics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationAnalyticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).GetConversationAnalytics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_GetConversationAnalytics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).GetConversationAnalytics(ctx, req.(*GetConversationAnalyticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_GetUserUsageStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserUsageStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).GetUserUsageStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_GetUserUsageStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).GetUserUsageStats(ctx, req.(*GetUserUsageStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_GetModelPerformanceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelPerformanceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).GetModelPerformanceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_GetModelPerformanceStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).GetModelPerformanceStats(ctx, req.(*GetModelPerformanceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_GetConversationTrends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationTrendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).GetConversationTrends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_GetConversationTrends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).GetConversationTrends(ctx, req.(*GetConversationTrendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_GetTopicAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).GetTopicAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_GetTopicAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).GetTopicAnalysis(ctx, req.(*GetTopicAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ai_GetSystemOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSystemOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AiServer).GetSystemOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ai_GetSystemOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AiServer).GetSystemOverview(ctx, req.(*GetSystemOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ai_ServiceDesc is the grpc.ServiceDesc for Ai service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ai_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ai.v1.Ai",
	HandlerType: (*AiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConversationAnalytics",
			Handler:    _Ai_GetConversationAnalytics_Handler,
		},
		{
			MethodName: "GetUserUsageStats",
			Handler:    _Ai_GetUserUsageStats_Handler,
		},
		{
			MethodName: "GetModelPerformanceStats",
			Handler:    _Ai_GetModelPerformanceStats_Handler,
		},
		{
			MethodName: "GetConversationTrends",
			Handler:    _Ai_GetConversationTrends_Handler,
		},
		{
			MethodName: "GetTopicAnalysis",
			Handler:    _Ai_GetTopicAnalysis_Handler,
		},
		{
			MethodName: "GetSystemOverview",
			Handler:    _Ai_GetSystemOverview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ai/v1/ai.proto",
}
