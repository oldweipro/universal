// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: api/ai/v1/conversation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Conversation_CreateConversation_FullMethodName        = "/api.ai.v1.Conversation/CreateConversation"
	Conversation_GetConversation_FullMethodName           = "/api.ai.v1.Conversation/GetConversation"
	Conversation_UpdateConversation_FullMethodName        = "/api.ai.v1.Conversation/UpdateConversation"
	Conversation_DeleteConversation_FullMethodName        = "/api.ai.v1.Conversation/DeleteConversation"
	Conversation_ListConversations_FullMethodName         = "/api.ai.v1.Conversation/ListConversations"
	Conversation_ArchiveConversation_FullMethodName       = "/api.ai.v1.Conversation/ArchiveConversation"
	Conversation_RestoreConversation_FullMethodName       = "/api.ai.v1.Conversation/RestoreConversation"
	Conversation_SendMessage_FullMethodName               = "/api.ai.v1.Conversation/SendMessage"
	Conversation_SendStreamMessage_FullMethodName         = "/api.ai.v1.Conversation/SendStreamMessage"
	Conversation_GetMessages_FullMethodName               = "/api.ai.v1.Conversation/GetMessages"
	Conversation_DeleteMessage_FullMethodName             = "/api.ai.v1.Conversation/DeleteMessage"
	Conversation_RegenerateMessage_FullMethodName         = "/api.ai.v1.Conversation/RegenerateMessage"
	Conversation_GetConversationContext_FullMethodName    = "/api.ai.v1.Conversation/GetConversationContext"
	Conversation_UpdateConversationContext_FullMethodName = "/api.ai.v1.Conversation/UpdateConversationContext"
	Conversation_SummarizeConversation_FullMethodName     = "/api.ai.v1.Conversation/SummarizeConversation"
	Conversation_ClearConversationHistory_FullMethodName  = "/api.ai.v1.Conversation/ClearConversationHistory"
	Conversation_SetConversationMemory_FullMethodName     = "/api.ai.v1.Conversation/SetConversationMemory"
	Conversation_GetConversationMemory_FullMethodName     = "/api.ai.v1.Conversation/GetConversationMemory"
	Conversation_GetConversationStats_FullMethodName      = "/api.ai.v1.Conversation/GetConversationStats"
	Conversation_ExportConversation_FullMethodName        = "/api.ai.v1.Conversation/ExportConversation"
	Conversation_ImportConversation_FullMethodName        = "/api.ai.v1.Conversation/ImportConversation"
)

// ConversationClient is the client API for Conversation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 对话管理服务 - 合并了会话管理、消息发送和对话功能
type ConversationClient interface {
	// CreateConversation 创建新的对话会话
	// 为指定用户创建一个新的对话，可以指定模型、系统提示词等配置
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationReply, error)
	// GetConversation 获取指定对话的详细信息
	// 根据对话ID获取对话的基本信息，包括标题、模型、配置等
	GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationReply, error)
	// UpdateConversation 更新对话的配置信息
	// 可以修改对话的标题、系统提示词、模型配置等
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationReply, error)
	// DeleteConversation 删除指定的对话
	// 软删除对话，同时会删除该对话下的所有消息记录
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationReply, error)
	// ListConversations 获取用户的对话列表
	// 支持分页查询和关键词搜索，返回用户的所有对话
	ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsReply, error)
	// ArchiveConversation 归档对话
	// 归档对话但保留数据，用于长期存储管理
	ArchiveConversation(ctx context.Context, in *ArchiveConversationRequest, opts ...grpc.CallOption) (*ArchiveConversationReply, error)
	// RestoreConversation 恢复已删除的对话
	// 从软删除状态恢复对话及其消息历史
	RestoreConversation(ctx context.Context, in *RestoreConversationRequest, opts ...grpc.CallOption) (*RestoreConversationReply, error)
	// SendMessage 向指定对话发送消息并获取AI回复
	// 支持文件附件、工具调用、模型参数配置等高级功能
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error)
	// SendStreamMessage 流式发送消息并获取AI回复
	// 支持实时流式响应，提供更好的用户体验
	SendStreamMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendMessageStreamReply], error)
	// GetMessages 获取对话的消息历史
	// 支持分页查询，可选择是否包含工具调用详情
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesReply, error)
	// DeleteMessage 删除指定消息
	// 软删除消息，支持批量删除
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageReply, error)
	// RegenerateMessage 重新生成AI回复
	// 基于上下文重新生成指定消息的回复
	RegenerateMessage(ctx context.Context, in *RegenerateMessageRequest, opts ...grpc.CallOption) (*RegenerateMessageReply, error)
	// GetConversationContext 获取对话上下文信息
	// 返回对话的完整上下文，包括系统提示、历史消息摘要等
	GetConversationContext(ctx context.Context, in *GetConversationContextRequest, opts ...grpc.CallOption) (*GetConversationContextReply, error)
	// UpdateConversationContext 更新对话上下文
	// 手动更新对话上下文，用于记忆管理
	UpdateConversationContext(ctx context.Context, in *UpdateConversationContextRequest, opts ...grpc.CallOption) (*UpdateConversationContextReply, error)
	// SummarizeConversation 总结对话内容
	// 生成对话摘要，用于长期记忆管理
	SummarizeConversation(ctx context.Context, in *SummarizeConversationRequest, opts ...grpc.CallOption) (*SummarizeConversationReply, error)
	// ClearConversationHistory 清空对话历史
	// 清空对话的消息历史，但保留对话配置
	ClearConversationHistory(ctx context.Context, in *ClearConversationHistoryRequest, opts ...grpc.CallOption) (*ClearConversationHistoryReply, error)
	// SetConversationMemory 设置对话记忆
	// 为对话设置长期记忆，用于跨会话的上下文保持
	SetConversationMemory(ctx context.Context, in *SetConversationMemoryRequest, opts ...grpc.CallOption) (*SetConversationMemoryReply, error)
	// GetConversationMemory 获取对话记忆
	// 检索对话的长期记忆信息
	GetConversationMemory(ctx context.Context, in *GetConversationMemoryRequest, opts ...grpc.CallOption) (*GetConversationMemoryReply, error)
	// GetConversationStats 获取对话统计信息
	// 返回对话的消息数量、token使用情况等统计数据
	GetConversationStats(ctx context.Context, in *GetConversationStatsRequest, opts ...grpc.CallOption) (*GetConversationStatsReply, error)
	// ExportConversation 导出对话数据
	// 将对话导出为指定格式（JSON、Markdown等）
	ExportConversation(ctx context.Context, in *ExportConversationRequest, opts ...grpc.CallOption) (*ExportConversationReply, error)
	// ImportConversation 导入对话数据
	// 从导出的数据中导入对话
	ImportConversation(ctx context.Context, in *ImportConversationRequest, opts ...grpc.CallOption) (*ImportConversationReply, error)
}

type conversationClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationClient(cc grpc.ClientConnInterface) ConversationClient {
	return &conversationClient{cc}
}

func (c *conversationClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConversationReply)
	err := c.cc.Invoke(ctx, Conversation_CreateConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) GetConversation(ctx context.Context, in *GetConversationRequest, opts ...grpc.CallOption) (*GetConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationReply)
	err := c.cc.Invoke(ctx, Conversation_GetConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConversationReply)
	err := c.cc.Invoke(ctx, Conversation_UpdateConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConversationReply)
	err := c.cc.Invoke(ctx, Conversation_DeleteConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) ListConversations(ctx context.Context, in *ListConversationsRequest, opts ...grpc.CallOption) (*ListConversationsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConversationsReply)
	err := c.cc.Invoke(ctx, Conversation_ListConversations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) ArchiveConversation(ctx context.Context, in *ArchiveConversationRequest, opts ...grpc.CallOption) (*ArchiveConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ArchiveConversationReply)
	err := c.cc.Invoke(ctx, Conversation_ArchiveConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) RestoreConversation(ctx context.Context, in *RestoreConversationRequest, opts ...grpc.CallOption) (*RestoreConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreConversationReply)
	err := c.cc.Invoke(ctx, Conversation_RestoreConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendMessageReply)
	err := c.cc.Invoke(ctx, Conversation_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) SendStreamMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendMessageStreamReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Conversation_ServiceDesc.Streams[0], Conversation_SendStreamMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendMessageRequest, SendMessageStreamReply]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Conversation_SendStreamMessageClient = grpc.ServerStreamingClient[SendMessageStreamReply]

func (c *conversationClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessagesReply)
	err := c.cc.Invoke(ctx, Conversation_GetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMessageReply)
	err := c.cc.Invoke(ctx, Conversation_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) RegenerateMessage(ctx context.Context, in *RegenerateMessageRequest, opts ...grpc.CallOption) (*RegenerateMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegenerateMessageReply)
	err := c.cc.Invoke(ctx, Conversation_RegenerateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) GetConversationContext(ctx context.Context, in *GetConversationContextRequest, opts ...grpc.CallOption) (*GetConversationContextReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationContextReply)
	err := c.cc.Invoke(ctx, Conversation_GetConversationContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) UpdateConversationContext(ctx context.Context, in *UpdateConversationContextRequest, opts ...grpc.CallOption) (*UpdateConversationContextReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConversationContextReply)
	err := c.cc.Invoke(ctx, Conversation_UpdateConversationContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) SummarizeConversation(ctx context.Context, in *SummarizeConversationRequest, opts ...grpc.CallOption) (*SummarizeConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SummarizeConversationReply)
	err := c.cc.Invoke(ctx, Conversation_SummarizeConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) ClearConversationHistory(ctx context.Context, in *ClearConversationHistoryRequest, opts ...grpc.CallOption) (*ClearConversationHistoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearConversationHistoryReply)
	err := c.cc.Invoke(ctx, Conversation_ClearConversationHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) SetConversationMemory(ctx context.Context, in *SetConversationMemoryRequest, opts ...grpc.CallOption) (*SetConversationMemoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetConversationMemoryReply)
	err := c.cc.Invoke(ctx, Conversation_SetConversationMemory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) GetConversationMemory(ctx context.Context, in *GetConversationMemoryRequest, opts ...grpc.CallOption) (*GetConversationMemoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationMemoryReply)
	err := c.cc.Invoke(ctx, Conversation_GetConversationMemory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) GetConversationStats(ctx context.Context, in *GetConversationStatsRequest, opts ...grpc.CallOption) (*GetConversationStatsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConversationStatsReply)
	err := c.cc.Invoke(ctx, Conversation_GetConversationStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) ExportConversation(ctx context.Context, in *ExportConversationRequest, opts ...grpc.CallOption) (*ExportConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportConversationReply)
	err := c.cc.Invoke(ctx, Conversation_ExportConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationClient) ImportConversation(ctx context.Context, in *ImportConversationRequest, opts ...grpc.CallOption) (*ImportConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportConversationReply)
	err := c.cc.Invoke(ctx, Conversation_ImportConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConversationServer is the server API for Conversation service.
// All implementations must embed UnimplementedConversationServer
// for forward compatibility.
//
// 对话管理服务 - 合并了会话管理、消息发送和对话功能
type ConversationServer interface {
	// CreateConversation 创建新的对话会话
	// 为指定用户创建一个新的对话，可以指定模型、系统提示词等配置
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationReply, error)
	// GetConversation 获取指定对话的详细信息
	// 根据对话ID获取对话的基本信息，包括标题、模型、配置等
	GetConversation(context.Context, *GetConversationRequest) (*GetConversationReply, error)
	// UpdateConversation 更新对话的配置信息
	// 可以修改对话的标题、系统提示词、模型配置等
	UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationReply, error)
	// DeleteConversation 删除指定的对话
	// 软删除对话，同时会删除该对话下的所有消息记录
	DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationReply, error)
	// ListConversations 获取用户的对话列表
	// 支持分页查询和关键词搜索，返回用户的所有对话
	ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsReply, error)
	// ArchiveConversation 归档对话
	// 归档对话但保留数据，用于长期存储管理
	ArchiveConversation(context.Context, *ArchiveConversationRequest) (*ArchiveConversationReply, error)
	// RestoreConversation 恢复已删除的对话
	// 从软删除状态恢复对话及其消息历史
	RestoreConversation(context.Context, *RestoreConversationRequest) (*RestoreConversationReply, error)
	// SendMessage 向指定对话发送消息并获取AI回复
	// 支持文件附件、工具调用、模型参数配置等高级功能
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error)
	// SendStreamMessage 流式发送消息并获取AI回复
	// 支持实时流式响应，提供更好的用户体验
	SendStreamMessage(*SendMessageRequest, grpc.ServerStreamingServer[SendMessageStreamReply]) error
	// GetMessages 获取对话的消息历史
	// 支持分页查询，可选择是否包含工具调用详情
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesReply, error)
	// DeleteMessage 删除指定消息
	// 软删除消息，支持批量删除
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageReply, error)
	// RegenerateMessage 重新生成AI回复
	// 基于上下文重新生成指定消息的回复
	RegenerateMessage(context.Context, *RegenerateMessageRequest) (*RegenerateMessageReply, error)
	// GetConversationContext 获取对话上下文信息
	// 返回对话的完整上下文，包括系统提示、历史消息摘要等
	GetConversationContext(context.Context, *GetConversationContextRequest) (*GetConversationContextReply, error)
	// UpdateConversationContext 更新对话上下文
	// 手动更新对话上下文，用于记忆管理
	UpdateConversationContext(context.Context, *UpdateConversationContextRequest) (*UpdateConversationContextReply, error)
	// SummarizeConversation 总结对话内容
	// 生成对话摘要，用于长期记忆管理
	SummarizeConversation(context.Context, *SummarizeConversationRequest) (*SummarizeConversationReply, error)
	// ClearConversationHistory 清空对话历史
	// 清空对话的消息历史，但保留对话配置
	ClearConversationHistory(context.Context, *ClearConversationHistoryRequest) (*ClearConversationHistoryReply, error)
	// SetConversationMemory 设置对话记忆
	// 为对话设置长期记忆，用于跨会话的上下文保持
	SetConversationMemory(context.Context, *SetConversationMemoryRequest) (*SetConversationMemoryReply, error)
	// GetConversationMemory 获取对话记忆
	// 检索对话的长期记忆信息
	GetConversationMemory(context.Context, *GetConversationMemoryRequest) (*GetConversationMemoryReply, error)
	// GetConversationStats 获取对话统计信息
	// 返回对话的消息数量、token使用情况等统计数据
	GetConversationStats(context.Context, *GetConversationStatsRequest) (*GetConversationStatsReply, error)
	// ExportConversation 导出对话数据
	// 将对话导出为指定格式（JSON、Markdown等）
	ExportConversation(context.Context, *ExportConversationRequest) (*ExportConversationReply, error)
	// ImportConversation 导入对话数据
	// 从导出的数据中导入对话
	ImportConversation(context.Context, *ImportConversationRequest) (*ImportConversationReply, error)
	mustEmbedUnimplementedConversationServer()
}

// UnimplementedConversationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConversationServer struct{}

func (UnimplementedConversationServer) CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedConversationServer) GetConversation(context.Context, *GetConversationRequest) (*GetConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedConversationServer) UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversation not implemented")
}
func (UnimplementedConversationServer) DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversation not implemented")
}
func (UnimplementedConversationServer) ListConversations(context.Context, *ListConversationsRequest) (*ListConversationsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedConversationServer) ArchiveConversation(context.Context, *ArchiveConversationRequest) (*ArchiveConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchiveConversation not implemented")
}
func (UnimplementedConversationServer) RestoreConversation(context.Context, *RestoreConversationRequest) (*RestoreConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreConversation not implemented")
}
func (UnimplementedConversationServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedConversationServer) SendStreamMessage(*SendMessageRequest, grpc.ServerStreamingServer[SendMessageStreamReply]) error {
	return status.Errorf(codes.Unimplemented, "method SendStreamMessage not implemented")
}
func (UnimplementedConversationServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedConversationServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedConversationServer) RegenerateMessage(context.Context, *RegenerateMessageRequest) (*RegenerateMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenerateMessage not implemented")
}
func (UnimplementedConversationServer) GetConversationContext(context.Context, *GetConversationContextRequest) (*GetConversationContextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationContext not implemented")
}
func (UnimplementedConversationServer) UpdateConversationContext(context.Context, *UpdateConversationContextRequest) (*UpdateConversationContextReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversationContext not implemented")
}
func (UnimplementedConversationServer) SummarizeConversation(context.Context, *SummarizeConversationRequest) (*SummarizeConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SummarizeConversation not implemented")
}
func (UnimplementedConversationServer) ClearConversationHistory(context.Context, *ClearConversationHistoryRequest) (*ClearConversationHistoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearConversationHistory not implemented")
}
func (UnimplementedConversationServer) SetConversationMemory(context.Context, *SetConversationMemoryRequest) (*SetConversationMemoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConversationMemory not implemented")
}
func (UnimplementedConversationServer) GetConversationMemory(context.Context, *GetConversationMemoryRequest) (*GetConversationMemoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationMemory not implemented")
}
func (UnimplementedConversationServer) GetConversationStats(context.Context, *GetConversationStatsRequest) (*GetConversationStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationStats not implemented")
}
func (UnimplementedConversationServer) ExportConversation(context.Context, *ExportConversationRequest) (*ExportConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportConversation not implemented")
}
func (UnimplementedConversationServer) ImportConversation(context.Context, *ImportConversationRequest) (*ImportConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportConversation not implemented")
}
func (UnimplementedConversationServer) mustEmbedUnimplementedConversationServer() {}
func (UnimplementedConversationServer) testEmbeddedByValue()                      {}

// UnsafeConversationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationServer will
// result in compilation errors.
type UnsafeConversationServer interface {
	mustEmbedUnimplementedConversationServer()
}

func RegisterConversationServer(s grpc.ServiceRegistrar, srv ConversationServer) {
	// If the following call pancis, it indicates UnimplementedConversationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Conversation_ServiceDesc, srv)
}

func _Conversation_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_CreateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_GetConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).GetConversation(ctx, req.(*GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_UpdateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).UpdateConversation(ctx, req.(*UpdateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_DeleteConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).DeleteConversation(ctx, req.(*DeleteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_ListConversations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).ListConversations(ctx, req.(*ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_ArchiveConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchiveConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).ArchiveConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_ArchiveConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).ArchiveConversation(ctx, req.(*ArchiveConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_RestoreConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).RestoreConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_RestoreConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).RestoreConversation(ctx, req.(*RestoreConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_SendStreamMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConversationServer).SendStreamMessage(m, &grpc.GenericServerStream[SendMessageRequest, SendMessageStreamReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Conversation_SendStreamMessageServer = grpc.ServerStreamingServer[SendMessageStreamReply]

func _Conversation_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_RegenerateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenerateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).RegenerateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_RegenerateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).RegenerateMessage(ctx, req.(*RegenerateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_GetConversationContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).GetConversationContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_GetConversationContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).GetConversationContext(ctx, req.(*GetConversationContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_UpdateConversationContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).UpdateConversationContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_UpdateConversationContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).UpdateConversationContext(ctx, req.(*UpdateConversationContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_SummarizeConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummarizeConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).SummarizeConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_SummarizeConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).SummarizeConversation(ctx, req.(*SummarizeConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_ClearConversationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearConversationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).ClearConversationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_ClearConversationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).ClearConversationHistory(ctx, req.(*ClearConversationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_SetConversationMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConversationMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).SetConversationMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_SetConversationMemory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).SetConversationMemory(ctx, req.(*SetConversationMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_GetConversationMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationMemoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).GetConversationMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_GetConversationMemory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).GetConversationMemory(ctx, req.(*GetConversationMemoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_GetConversationStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).GetConversationStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_GetConversationStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).GetConversationStats(ctx, req.(*GetConversationStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_ExportConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).ExportConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_ExportConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).ExportConversation(ctx, req.(*ExportConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Conversation_ImportConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServer).ImportConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Conversation_ImportConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServer).ImportConversation(ctx, req.(*ImportConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Conversation_ServiceDesc is the grpc.ServiceDesc for Conversation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Conversation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ai.v1.Conversation",
	HandlerType: (*ConversationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConversation",
			Handler:    _Conversation_CreateConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _Conversation_GetConversation_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _Conversation_UpdateConversation_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _Conversation_DeleteConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _Conversation_ListConversations_Handler,
		},
		{
			MethodName: "ArchiveConversation",
			Handler:    _Conversation_ArchiveConversation_Handler,
		},
		{
			MethodName: "RestoreConversation",
			Handler:    _Conversation_RestoreConversation_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Conversation_SendMessage_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _Conversation_GetMessages_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Conversation_DeleteMessage_Handler,
		},
		{
			MethodName: "RegenerateMessage",
			Handler:    _Conversation_RegenerateMessage_Handler,
		},
		{
			MethodName: "GetConversationContext",
			Handler:    _Conversation_GetConversationContext_Handler,
		},
		{
			MethodName: "UpdateConversationContext",
			Handler:    _Conversation_UpdateConversationContext_Handler,
		},
		{
			MethodName: "SummarizeConversation",
			Handler:    _Conversation_SummarizeConversation_Handler,
		},
		{
			MethodName: "ClearConversationHistory",
			Handler:    _Conversation_ClearConversationHistory_Handler,
		},
		{
			MethodName: "SetConversationMemory",
			Handler:    _Conversation_SetConversationMemory_Handler,
		},
		{
			MethodName: "GetConversationMemory",
			Handler:    _Conversation_GetConversationMemory_Handler,
		},
		{
			MethodName: "GetConversationStats",
			Handler:    _Conversation_GetConversationStats_Handler,
		},
		{
			MethodName: "ExportConversation",
			Handler:    _Conversation_ExportConversation_Handler,
		},
		{
			MethodName: "ImportConversation",
			Handler:    _Conversation_ImportConversation_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStreamMessage",
			Handler:       _Conversation_SendStreamMessage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/ai/v1/conversation.proto",
}
