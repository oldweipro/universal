// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: api/ai/v1/knowledge.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 知识库状态枚举
type KnowledgeBaseStatus int32

const (
	KnowledgeBaseStatus_KNOWLEDGE_BASE_STATUS_UNSPECIFIED KnowledgeBaseStatus = 0
	KnowledgeBaseStatus_KNOWLEDGE_BASE_STATUS_ACTIVE      KnowledgeBaseStatus = 1 // 活跃
	KnowledgeBaseStatus_KNOWLEDGE_BASE_STATUS_INDEXING    KnowledgeBaseStatus = 2 // 索引中
	KnowledgeBaseStatus_KNOWLEDGE_BASE_STATUS_ERROR       KnowledgeBaseStatus = 3 // 错误
	KnowledgeBaseStatus_KNOWLEDGE_BASE_STATUS_ARCHIVED    KnowledgeBaseStatus = 4 // 已归档
	KnowledgeBaseStatus_KNOWLEDGE_BASE_STATUS_DELETED     KnowledgeBaseStatus = 5 // 已删除
)

// Enum value maps for KnowledgeBaseStatus.
var (
	KnowledgeBaseStatus_name = map[int32]string{
		0: "KNOWLEDGE_BASE_STATUS_UNSPECIFIED",
		1: "KNOWLEDGE_BASE_STATUS_ACTIVE",
		2: "KNOWLEDGE_BASE_STATUS_INDEXING",
		3: "KNOWLEDGE_BASE_STATUS_ERROR",
		4: "KNOWLEDGE_BASE_STATUS_ARCHIVED",
		5: "KNOWLEDGE_BASE_STATUS_DELETED",
	}
	KnowledgeBaseStatus_value = map[string]int32{
		"KNOWLEDGE_BASE_STATUS_UNSPECIFIED": 0,
		"KNOWLEDGE_BASE_STATUS_ACTIVE":      1,
		"KNOWLEDGE_BASE_STATUS_INDEXING":    2,
		"KNOWLEDGE_BASE_STATUS_ERROR":       3,
		"KNOWLEDGE_BASE_STATUS_ARCHIVED":    4,
		"KNOWLEDGE_BASE_STATUS_DELETED":     5,
	}
)

func (x KnowledgeBaseStatus) Enum() *KnowledgeBaseStatus {
	p := new(KnowledgeBaseStatus)
	*p = x
	return p
}

func (x KnowledgeBaseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KnowledgeBaseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_knowledge_proto_enumTypes[0].Descriptor()
}

func (KnowledgeBaseStatus) Type() protoreflect.EnumType {
	return &file_api_ai_v1_knowledge_proto_enumTypes[0]
}

func (x KnowledgeBaseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KnowledgeBaseStatus.Descriptor instead.
func (KnowledgeBaseStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{0}
}

// 分块策略枚举
type ChunkingStrategy int32

const (
	ChunkingStrategy_CHUNKING_STRATEGY_UNSPECIFIED ChunkingStrategy = 0
	ChunkingStrategy_CHUNKING_STRATEGY_FIXED_SIZE  ChunkingStrategy = 1 // 固定大小
	ChunkingStrategy_CHUNKING_STRATEGY_RECURSIVE   ChunkingStrategy = 2 // 递归分割
	ChunkingStrategy_CHUNKING_STRATEGY_SEMANTIC    ChunkingStrategy = 3 // 语义分割
	ChunkingStrategy_CHUNKING_STRATEGY_PARAGRAPH   ChunkingStrategy = 4 // 段落分割
	ChunkingStrategy_CHUNKING_STRATEGY_SENTENCE    ChunkingStrategy = 5 // 句子分割
)

// Enum value maps for ChunkingStrategy.
var (
	ChunkingStrategy_name = map[int32]string{
		0: "CHUNKING_STRATEGY_UNSPECIFIED",
		1: "CHUNKING_STRATEGY_FIXED_SIZE",
		2: "CHUNKING_STRATEGY_RECURSIVE",
		3: "CHUNKING_STRATEGY_SEMANTIC",
		4: "CHUNKING_STRATEGY_PARAGRAPH",
		5: "CHUNKING_STRATEGY_SENTENCE",
	}
	ChunkingStrategy_value = map[string]int32{
		"CHUNKING_STRATEGY_UNSPECIFIED": 0,
		"CHUNKING_STRATEGY_FIXED_SIZE":  1,
		"CHUNKING_STRATEGY_RECURSIVE":   2,
		"CHUNKING_STRATEGY_SEMANTIC":    3,
		"CHUNKING_STRATEGY_PARAGRAPH":   4,
		"CHUNKING_STRATEGY_SENTENCE":    5,
	}
)

func (x ChunkingStrategy) Enum() *ChunkingStrategy {
	p := new(ChunkingStrategy)
	*p = x
	return p
}

func (x ChunkingStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkingStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_knowledge_proto_enumTypes[1].Descriptor()
}

func (ChunkingStrategy) Type() protoreflect.EnumType {
	return &file_api_ai_v1_knowledge_proto_enumTypes[1]
}

func (x ChunkingStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkingStrategy.Descriptor instead.
func (ChunkingStrategy) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{1}
}

// 文档状态枚举
type DocumentStatus int32

const (
	DocumentStatus_DOCUMENT_STATUS_UNSPECIFIED DocumentStatus = 0
	DocumentStatus_DOCUMENT_STATUS_UPLOADED    DocumentStatus = 1 // 已上传
	DocumentStatus_DOCUMENT_STATUS_PROCESSING  DocumentStatus = 2 // 处理中
	DocumentStatus_DOCUMENT_STATUS_PROCESSED   DocumentStatus = 3 // 已处理
	DocumentStatus_DOCUMENT_STATUS_FAILED      DocumentStatus = 4 // 处理失败
	DocumentStatus_DOCUMENT_STATUS_ARCHIVED    DocumentStatus = 5 // 已归档
	DocumentStatus_DOCUMENT_STATUS_DELETED     DocumentStatus = 6 // 已删除
)

// Enum value maps for DocumentStatus.
var (
	DocumentStatus_name = map[int32]string{
		0: "DOCUMENT_STATUS_UNSPECIFIED",
		1: "DOCUMENT_STATUS_UPLOADED",
		2: "DOCUMENT_STATUS_PROCESSING",
		3: "DOCUMENT_STATUS_PROCESSED",
		4: "DOCUMENT_STATUS_FAILED",
		5: "DOCUMENT_STATUS_ARCHIVED",
		6: "DOCUMENT_STATUS_DELETED",
	}
	DocumentStatus_value = map[string]int32{
		"DOCUMENT_STATUS_UNSPECIFIED": 0,
		"DOCUMENT_STATUS_UPLOADED":    1,
		"DOCUMENT_STATUS_PROCESSING":  2,
		"DOCUMENT_STATUS_PROCESSED":   3,
		"DOCUMENT_STATUS_FAILED":      4,
		"DOCUMENT_STATUS_ARCHIVED":    5,
		"DOCUMENT_STATUS_DELETED":     6,
	}
)

func (x DocumentStatus) Enum() *DocumentStatus {
	p := new(DocumentStatus)
	*p = x
	return p
}

func (x DocumentStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_knowledge_proto_enumTypes[2].Descriptor()
}

func (DocumentStatus) Type() protoreflect.EnumType {
	return &file_api_ai_v1_knowledge_proto_enumTypes[2]
}

func (x DocumentStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentStatus.Descriptor instead.
func (DocumentStatus) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{2}
}

// 块类型枚举
type ChunkType int32

const (
	ChunkType_CHUNK_TYPE_UNSPECIFIED ChunkType = 0
	ChunkType_CHUNK_TYPE_TEXT        ChunkType = 1 // 文本块
	ChunkType_CHUNK_TYPE_TITLE       ChunkType = 2 // 标题块
	ChunkType_CHUNK_TYPE_PARAGRAPH   ChunkType = 3 // 段落块
	ChunkType_CHUNK_TYPE_LIST        ChunkType = 4 // 列表块
	ChunkType_CHUNK_TYPE_TABLE       ChunkType = 5 // 表格块
	ChunkType_CHUNK_TYPE_CODE        ChunkType = 6 // 代码块
)

// Enum value maps for ChunkType.
var (
	ChunkType_name = map[int32]string{
		0: "CHUNK_TYPE_UNSPECIFIED",
		1: "CHUNK_TYPE_TEXT",
		2: "CHUNK_TYPE_TITLE",
		3: "CHUNK_TYPE_PARAGRAPH",
		4: "CHUNK_TYPE_LIST",
		5: "CHUNK_TYPE_TABLE",
		6: "CHUNK_TYPE_CODE",
	}
	ChunkType_value = map[string]int32{
		"CHUNK_TYPE_UNSPECIFIED": 0,
		"CHUNK_TYPE_TEXT":        1,
		"CHUNK_TYPE_TITLE":       2,
		"CHUNK_TYPE_PARAGRAPH":   3,
		"CHUNK_TYPE_LIST":        4,
		"CHUNK_TYPE_TABLE":       5,
		"CHUNK_TYPE_CODE":        6,
	}
)

func (x ChunkType) Enum() *ChunkType {
	p := new(ChunkType)
	*p = x
	return p
}

func (x ChunkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChunkType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_knowledge_proto_enumTypes[3].Descriptor()
}

func (ChunkType) Type() protoreflect.EnumType {
	return &file_api_ai_v1_knowledge_proto_enumTypes[3]
}

func (x ChunkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChunkType.Descriptor instead.
func (ChunkType) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{3}
}

type SearchMode int32

const (
	SearchMode_SEARCH_MODE_UNSPECIFIED SearchMode = 0
	SearchMode_SEARCH_MODE_SEMANTIC    SearchMode = 1 // 语义搜索
	SearchMode_SEARCH_MODE_KEYWORD     SearchMode = 2 // 关键词搜索
	SearchMode_SEARCH_MODE_HYBRID      SearchMode = 3 // 混合搜索
	SearchMode_SEARCH_MODE_EXACT       SearchMode = 4 // 精确匹配
)

// Enum value maps for SearchMode.
var (
	SearchMode_name = map[int32]string{
		0: "SEARCH_MODE_UNSPECIFIED",
		1: "SEARCH_MODE_SEMANTIC",
		2: "SEARCH_MODE_KEYWORD",
		3: "SEARCH_MODE_HYBRID",
		4: "SEARCH_MODE_EXACT",
	}
	SearchMode_value = map[string]int32{
		"SEARCH_MODE_UNSPECIFIED": 0,
		"SEARCH_MODE_SEMANTIC":    1,
		"SEARCH_MODE_KEYWORD":     2,
		"SEARCH_MODE_HYBRID":      3,
		"SEARCH_MODE_EXACT":       4,
	}
)

func (x SearchMode) Enum() *SearchMode {
	p := new(SearchMode)
	*p = x
	return p
}

func (x SearchMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchMode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_knowledge_proto_enumTypes[4].Descriptor()
}

func (SearchMode) Type() protoreflect.EnumType {
	return &file_api_ai_v1_knowledge_proto_enumTypes[4]
}

func (x SearchMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchMode.Descriptor instead.
func (SearchMode) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{4}
}

type AnalysisType int32

const (
	AnalysisType_ANALYSIS_TYPE_UNSPECIFIED          AnalysisType = 0
	AnalysisType_ANALYSIS_TYPE_CONTENT_DISTRIBUTION AnalysisType = 1 // 内容分布
	AnalysisType_ANALYSIS_TYPE_TOPIC_MODELING       AnalysisType = 2 // 主题建模
	AnalysisType_ANALYSIS_TYPE_SIMILARITY_ANALYSIS  AnalysisType = 3 // 相似性分析
	AnalysisType_ANALYSIS_TYPE_QUALITY_ASSESSMENT   AnalysisType = 4 // 质量评估
)

// Enum value maps for AnalysisType.
var (
	AnalysisType_name = map[int32]string{
		0: "ANALYSIS_TYPE_UNSPECIFIED",
		1: "ANALYSIS_TYPE_CONTENT_DISTRIBUTION",
		2: "ANALYSIS_TYPE_TOPIC_MODELING",
		3: "ANALYSIS_TYPE_SIMILARITY_ANALYSIS",
		4: "ANALYSIS_TYPE_QUALITY_ASSESSMENT",
	}
	AnalysisType_value = map[string]int32{
		"ANALYSIS_TYPE_UNSPECIFIED":          0,
		"ANALYSIS_TYPE_CONTENT_DISTRIBUTION": 1,
		"ANALYSIS_TYPE_TOPIC_MODELING":       2,
		"ANALYSIS_TYPE_SIMILARITY_ANALYSIS":  3,
		"ANALYSIS_TYPE_QUALITY_ASSESSMENT":   4,
	}
)

func (x AnalysisType) Enum() *AnalysisType {
	p := new(AnalysisType)
	*p = x
	return p
}

func (x AnalysisType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnalysisType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_ai_v1_knowledge_proto_enumTypes[5].Descriptor()
}

func (AnalysisType) Type() protoreflect.EnumType {
	return &file_api_ai_v1_knowledge_proto_enumTypes[5]
}

func (x AnalysisType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnalysisType.Descriptor instead.
func (AnalysisType) EnumDescriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{5}
}

// 知识库定义 - 增强版
type KnowledgeBase struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                              // 知识库ID
	UserId         int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	Name           string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                           // 知识库名称
	Description    string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                             // 知识库描述
	EmbeddingModel string                 `protobuf:"bytes,5,opt,name=embedding_model,json=embeddingModel,proto3" json:"embedding_model,omitempty"` // 向量化模型
	ChunkSize      int32                  `protobuf:"varint,6,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`               // 文档分块大小
	ChunkOverlap   int32                  `protobuf:"varint,7,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`      // 分块重叠大小
	Status         KnowledgeBaseStatus    `protobuf:"varint,8,opt,name=status,proto3,enum=api.ai.v1.KnowledgeBaseStatus" json:"status,omitempty"`   // 状态
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                // 创建时间
	UpdatedAt      *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`               // 更新时间
	// 新增字段
	Config             *KnowledgeBaseConfig   `protobuf:"bytes,11,opt,name=config,proto3" json:"config,omitempty"`                                                     // 知识库配置
	Stats              *KnowledgeBaseStats    `protobuf:"bytes,12,opt,name=stats,proto3" json:"stats,omitempty"`                                                       // 统计信息
	Tags               []string               `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`                                                         // 标签
	Version            int32                  `protobuf:"varint,14,opt,name=version,proto3" json:"version,omitempty"`                                                  // 版本号
	Language           string                 `protobuf:"bytes,15,opt,name=language,proto3" json:"language,omitempty"`                                                 // 主要语言
	SupportedFileTypes []string               `protobuf:"bytes,16,rep,name=supported_file_types,json=supportedFileTypes,proto3" json:"supported_file_types,omitempty"` // 支持的文件类型
	MaxFileSize        int64                  `protobuf:"varint,17,opt,name=max_file_size,json=maxFileSize,proto3" json:"max_file_size,omitempty"`                     // 最大文件大小
	AutoProcess        bool                   `protobuf:"varint,18,opt,name=auto_process,json=autoProcess,proto3" json:"auto_process,omitempty"`                       // 自动处理新文档
	LastIndexedAt      *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=last_indexed_at,json=lastIndexedAt,proto3" json:"last_indexed_at,omitempty"`                // 最后索引时间
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *KnowledgeBase) Reset() {
	*x = KnowledgeBase{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBase) ProtoMessage() {}

func (x *KnowledgeBase) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBase.ProtoReflect.Descriptor instead.
func (*KnowledgeBase) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{0}
}

func (x *KnowledgeBase) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KnowledgeBase) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *KnowledgeBase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KnowledgeBase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KnowledgeBase) GetEmbeddingModel() string {
	if x != nil {
		return x.EmbeddingModel
	}
	return ""
}

func (x *KnowledgeBase) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *KnowledgeBase) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

func (x *KnowledgeBase) GetStatus() KnowledgeBaseStatus {
	if x != nil {
		return x.Status
	}
	return KnowledgeBaseStatus_KNOWLEDGE_BASE_STATUS_UNSPECIFIED
}

func (x *KnowledgeBase) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KnowledgeBase) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *KnowledgeBase) GetConfig() *KnowledgeBaseConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *KnowledgeBase) GetStats() *KnowledgeBaseStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *KnowledgeBase) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *KnowledgeBase) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *KnowledgeBase) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *KnowledgeBase) GetSupportedFileTypes() []string {
	if x != nil {
		return x.SupportedFileTypes
	}
	return nil
}

func (x *KnowledgeBase) GetMaxFileSize() int64 {
	if x != nil {
		return x.MaxFileSize
	}
	return 0
}

func (x *KnowledgeBase) GetAutoProcess() bool {
	if x != nil {
		return x.AutoProcess
	}
	return false
}

func (x *KnowledgeBase) GetLastIndexedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastIndexedAt
	}
	return nil
}

// 知识库配置
type KnowledgeBaseConfig struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	EmbeddingModel       string                 `protobuf:"bytes,1,opt,name=embedding_model,json=embeddingModel,proto3" json:"embedding_model,omitempty"`                                                                               // 向量化模型
	EmbeddingDimension   int32                  `protobuf:"varint,2,opt,name=embedding_dimension,json=embeddingDimension,proto3" json:"embedding_dimension,omitempty"`                                                                  // 向量维度
	ChunkSize            int32                  `protobuf:"varint,3,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`                                                                                             // 分块大小
	ChunkOverlap         int32                  `protobuf:"varint,4,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`                                                                                    // 分块重叠
	ChunkingStrategy     ChunkingStrategy       `protobuf:"varint,5,opt,name=chunking_strategy,json=chunkingStrategy,proto3,enum=api.ai.v1.ChunkingStrategy" json:"chunking_strategy,omitempty"`                                        // 分块策略
	SimilarityThreshold  float64                `protobuf:"fixed64,6,opt,name=similarity_threshold,json=similarityThreshold,proto3" json:"similarity_threshold,omitempty"`                                                              // 相似度阈值
	MaxChunksPerQuery    int32                  `protobuf:"varint,7,opt,name=max_chunks_per_query,json=maxChunksPerQuery,proto3" json:"max_chunks_per_query,omitempty"`                                                                 // 每次查询最大块数
	EnableMetadataFilter bool                   `protobuf:"varint,8,opt,name=enable_metadata_filter,json=enableMetadataFilter,proto3" json:"enable_metadata_filter,omitempty"`                                                          // 启用元数据过滤
	StopWords            []string               `protobuf:"bytes,9,rep,name=stop_words,json=stopWords,proto3" json:"stop_words,omitempty"`                                                                                              // 停用词列表
	TextSplitter         string                 `protobuf:"bytes,10,opt,name=text_splitter,json=textSplitter,proto3" json:"text_splitter,omitempty"`                                                                                    // 文本分割器类型
	AdvancedOptions      map[string]string      `protobuf:"bytes,11,rep,name=advanced_options,json=advancedOptions,proto3" json:"advanced_options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 高级选项
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *KnowledgeBaseConfig) Reset() {
	*x = KnowledgeBaseConfig{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseConfig) ProtoMessage() {}

func (x *KnowledgeBaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseConfig.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseConfig) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{1}
}

func (x *KnowledgeBaseConfig) GetEmbeddingModel() string {
	if x != nil {
		return x.EmbeddingModel
	}
	return ""
}

func (x *KnowledgeBaseConfig) GetEmbeddingDimension() int32 {
	if x != nil {
		return x.EmbeddingDimension
	}
	return 0
}

func (x *KnowledgeBaseConfig) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *KnowledgeBaseConfig) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

func (x *KnowledgeBaseConfig) GetChunkingStrategy() ChunkingStrategy {
	if x != nil {
		return x.ChunkingStrategy
	}
	return ChunkingStrategy_CHUNKING_STRATEGY_UNSPECIFIED
}

func (x *KnowledgeBaseConfig) GetSimilarityThreshold() float64 {
	if x != nil {
		return x.SimilarityThreshold
	}
	return 0
}

func (x *KnowledgeBaseConfig) GetMaxChunksPerQuery() int32 {
	if x != nil {
		return x.MaxChunksPerQuery
	}
	return 0
}

func (x *KnowledgeBaseConfig) GetEnableMetadataFilter() bool {
	if x != nil {
		return x.EnableMetadataFilter
	}
	return false
}

func (x *KnowledgeBaseConfig) GetStopWords() []string {
	if x != nil {
		return x.StopWords
	}
	return nil
}

func (x *KnowledgeBaseConfig) GetTextSplitter() string {
	if x != nil {
		return x.TextSplitter
	}
	return ""
}

func (x *KnowledgeBaseConfig) GetAdvancedOptions() map[string]string {
	if x != nil {
		return x.AdvancedOptions
	}
	return nil
}

// 知识库统计信息
type KnowledgeBaseStats struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	DocumentCount        int64                  `protobuf:"varint,1,opt,name=document_count,json=documentCount,proto3" json:"document_count,omitempty"`                                                                                                  // 文档总数
	ChunkCount           int64                  `protobuf:"varint,2,opt,name=chunk_count,json=chunkCount,proto3" json:"chunk_count,omitempty"`                                                                                                           // 块总数
	TotalCharacters      int64                  `protobuf:"varint,3,opt,name=total_characters,json=totalCharacters,proto3" json:"total_characters,omitempty"`                                                                                            // 总字符数
	TotalTokens          int64                  `protobuf:"varint,4,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`                                                                                                        // 总token数
	AverageChunkSize     float64                `protobuf:"fixed64,5,opt,name=average_chunk_size,json=averageChunkSize,proto3" json:"average_chunk_size,omitempty"`                                                                                      // 平均块大小
	FileTypeDistribution map[string]int64       `protobuf:"bytes,6,rep,name=file_type_distribution,json=fileTypeDistribution,proto3" json:"file_type_distribution,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 文件类型分布
	LanguageDistribution map[string]int64       `protobuf:"bytes,7,rep,name=language_distribution,json=languageDistribution,proto3" json:"language_distribution,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`   // 语言分布
	LastUpdated          *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`                                                                                                         // 最后更新时间
	StorageSizeMb        float64                `protobuf:"fixed64,9,opt,name=storage_size_mb,json=storageSizeMb,proto3" json:"storage_size_mb,omitempty"`                                                                                               // 存储大小(MB)
	IndexSizeMb          float64                `protobuf:"fixed64,10,opt,name=index_size_mb,json=indexSizeMb,proto3" json:"index_size_mb,omitempty"`                                                                                                    // 索引大小(MB)
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *KnowledgeBaseStats) Reset() {
	*x = KnowledgeBaseStats{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeBaseStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeBaseStats) ProtoMessage() {}

func (x *KnowledgeBaseStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeBaseStats.ProtoReflect.Descriptor instead.
func (*KnowledgeBaseStats) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{2}
}

func (x *KnowledgeBaseStats) GetDocumentCount() int64 {
	if x != nil {
		return x.DocumentCount
	}
	return 0
}

func (x *KnowledgeBaseStats) GetChunkCount() int64 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *KnowledgeBaseStats) GetTotalCharacters() int64 {
	if x != nil {
		return x.TotalCharacters
	}
	return 0
}

func (x *KnowledgeBaseStats) GetTotalTokens() int64 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *KnowledgeBaseStats) GetAverageChunkSize() float64 {
	if x != nil {
		return x.AverageChunkSize
	}
	return 0
}

func (x *KnowledgeBaseStats) GetFileTypeDistribution() map[string]int64 {
	if x != nil {
		return x.FileTypeDistribution
	}
	return nil
}

func (x *KnowledgeBaseStats) GetLanguageDistribution() map[string]int64 {
	if x != nil {
		return x.LanguageDistribution
	}
	return nil
}

func (x *KnowledgeBaseStats) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *KnowledgeBaseStats) GetStorageSizeMb() float64 {
	if x != nil {
		return x.StorageSizeMb
	}
	return 0
}

func (x *KnowledgeBaseStats) GetIndexSizeMb() float64 {
	if x != nil {
		return x.IndexSizeMb
	}
	return 0
}

// 文档定义 - 增强版
type Document struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                    // 文档ID
	KnowledgeBaseId int64                  `protobuf:"varint,2,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"` // 知识库ID
	Name            string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                 // 文档名称
	Content         string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                                           // 文档内容
	FilePath        string                 `protobuf:"bytes,5,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`                         // 文件路径
	MimeType        string                 `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                         // 文件类型
	FileSize        int64                  `protobuf:"varint,7,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`                        // 文件大小
	ChunkCount      int32                  `protobuf:"varint,8,opt,name=chunk_count,json=chunkCount,proto3" json:"chunk_count,omitempty"`                  // 分块数量
	Status          DocumentStatus         `protobuf:"varint,9,opt,name=status,proto3,enum=api.ai.v1.DocumentStatus" json:"status,omitempty"`              // 状态
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                     // 创建时间
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                     // 更新时间
	// 新增字段
	Metadata           *DocumentMetadata      `protobuf:"bytes,12,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                 // 文档元数据
	Tags               []string               `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty"`                                                         // 标签
	Language           string                 `protobuf:"bytes,14,opt,name=language,proto3" json:"language,omitempty"`                                                 // 文档语言
	SourceUrl          string                 `protobuf:"bytes,15,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`                              // 源URL
	Hash               string                 `protobuf:"bytes,16,opt,name=hash,proto3" json:"hash,omitempty"`                                                         // 文档哈希值
	Version            int32                  `protobuf:"varint,17,opt,name=version,proto3" json:"version,omitempty"`                                                  // 版本号
	LastProcessedAt    *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=last_processed_at,json=lastProcessedAt,proto3" json:"last_processed_at,omitempty"`          // 最后处理时间
	ProcessingError    string                 `protobuf:"bytes,19,opt,name=processing_error,json=processingError,proto3" json:"processing_error,omitempty"`            // 处理错误信息
	ProcessingProgress float64                `protobuf:"fixed64,20,opt,name=processing_progress,json=processingProgress,proto3" json:"processing_progress,omitempty"` // 处理进度
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Document) Reset() {
	*x = Document{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{3}
}

func (x *Document) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Document) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *Document) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Document) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Document) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *Document) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Document) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *Document) GetChunkCount() int32 {
	if x != nil {
		return x.ChunkCount
	}
	return 0
}

func (x *Document) GetStatus() DocumentStatus {
	if x != nil {
		return x.Status
	}
	return DocumentStatus_DOCUMENT_STATUS_UNSPECIFIED
}

func (x *Document) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Document) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Document) GetMetadata() *DocumentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Document) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Document) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Document) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *Document) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Document) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Document) GetLastProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastProcessedAt
	}
	return nil
}

func (x *Document) GetProcessingError() string {
	if x != nil {
		return x.ProcessingError
	}
	return ""
}

func (x *Document) GetProcessingProgress() float64 {
	if x != nil {
		return x.ProcessingProgress
	}
	return 0
}

// 文档元数据
type DocumentMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`                                                                                                              // 标题
	Author        string                 `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`                                                                                                            // 作者
	Subject       string                 `protobuf:"bytes,3,opt,name=subject,proto3" json:"subject,omitempty"`                                                                                                          // 主题
	Keywords      []string               `protobuf:"bytes,4,rep,name=keywords,proto3" json:"keywords,omitempty"`                                                                                                        // 关键词
	CreatedDate   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_date,json=createdDate,proto3" json:"created_date,omitempty"`                                                                               // 创建日期
	ModifiedDate  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=modified_date,json=modifiedDate,proto3" json:"modified_date,omitempty"`                                                                            // 修改日期
	Category      string                 `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`                                                                                                        // 分类
	PageCount     int32                  `protobuf:"varint,8,opt,name=page_count,json=pageCount,proto3" json:"page_count,omitempty"`                                                                                    // 页数
	Encoding      string                 `protobuf:"bytes,9,opt,name=encoding,proto3" json:"encoding,omitempty"`                                                                                                        // 编码
	CustomFields  map[string]string      `protobuf:"bytes,10,rep,name=custom_fields,json=customFields,proto3" json:"custom_fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 自定义字段
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DocumentMetadata) Reset() {
	*x = DocumentMetadata{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentMetadata) ProtoMessage() {}

func (x *DocumentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentMetadata.ProtoReflect.Descriptor instead.
func (*DocumentMetadata) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{4}
}

func (x *DocumentMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DocumentMetadata) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *DocumentMetadata) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *DocumentMetadata) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *DocumentMetadata) GetCreatedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDate
	}
	return nil
}

func (x *DocumentMetadata) GetModifiedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedDate
	}
	return nil
}

func (x *DocumentMetadata) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *DocumentMetadata) GetPageCount() int32 {
	if x != nil {
		return x.PageCount
	}
	return 0
}

func (x *DocumentMetadata) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *DocumentMetadata) GetCustomFields() map[string]string {
	if x != nil {
		return x.CustomFields
	}
	return nil
}

// 知识库块 - 增强版
type KnowledgeChunk struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                      // 块ID
	DocumentId      int64                  `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`                                                    // 文档ID
	KnowledgeBaseId int64                  `protobuf:"varint,3,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`                                   // 知识库ID
	Content         string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                                                                             // 块内容
	Score           float64                `protobuf:"fixed64,5,opt,name=score,proto3" json:"score,omitempty"`                                                                               // 相似度分数
	Metadata        map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 块元数据
	// 新增字段
	ChunkIndex     int32                  `protobuf:"varint,7,opt,name=chunk_index,json=chunkIndex,proto3" json:"chunk_index,omitempty"`                        // 块索引
	StartPosition  int32                  `protobuf:"varint,8,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`               // 开始位置
	EndPosition    int32                  `protobuf:"varint,9,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`                     // 结束位置
	Embedding      []float32              `protobuf:"fixed32,10,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`                                   // 向量嵌入
	Language       string                 `protobuf:"bytes,11,opt,name=language,proto3" json:"language,omitempty"`                                              // 语言
	Keywords       []string               `protobuf:"bytes,12,rep,name=keywords,proto3" json:"keywords,omitempty"`                                              // 关键词
	ChunkType      ChunkType              `protobuf:"varint,13,opt,name=chunk_type,json=chunkType,proto3,enum=api.ai.v1.ChunkType" json:"chunk_type,omitempty"` // 块类型
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                           // 创建时间
	CharacterCount int32                  `protobuf:"varint,15,opt,name=character_count,json=characterCount,proto3" json:"character_count,omitempty"`           // 字符数
	TokenCount     int32                  `protobuf:"varint,16,opt,name=token_count,json=tokenCount,proto3" json:"token_count,omitempty"`                       // token数
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *KnowledgeChunk) Reset() {
	*x = KnowledgeChunk{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KnowledgeChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KnowledgeChunk) ProtoMessage() {}

func (x *KnowledgeChunk) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KnowledgeChunk.ProtoReflect.Descriptor instead.
func (*KnowledgeChunk) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{5}
}

func (x *KnowledgeChunk) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KnowledgeChunk) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *KnowledgeChunk) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *KnowledgeChunk) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *KnowledgeChunk) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *KnowledgeChunk) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *KnowledgeChunk) GetChunkIndex() int32 {
	if x != nil {
		return x.ChunkIndex
	}
	return 0
}

func (x *KnowledgeChunk) GetStartPosition() int32 {
	if x != nil {
		return x.StartPosition
	}
	return 0
}

func (x *KnowledgeChunk) GetEndPosition() int32 {
	if x != nil {
		return x.EndPosition
	}
	return 0
}

func (x *KnowledgeChunk) GetEmbedding() []float32 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

func (x *KnowledgeChunk) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *KnowledgeChunk) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *KnowledgeChunk) GetChunkType() ChunkType {
	if x != nil {
		return x.ChunkType
	}
	return ChunkType_CHUNK_TYPE_UNSPECIFIED
}

func (x *KnowledgeChunk) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *KnowledgeChunk) GetCharacterCount() int32 {
	if x != nil {
		return x.CharacterCount
	}
	return 0
}

func (x *KnowledgeChunk) GetTokenCount() int32 {
	if x != nil {
		return x.TokenCount
	}
	return 0
}

// 创建知识库
type CreateKnowledgeBaseRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	UserId         int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                           // 知识库名称
	Description    string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                             // 知识库描述
	EmbeddingModel string                 `protobuf:"bytes,4,opt,name=embedding_model,json=embeddingModel,proto3" json:"embedding_model,omitempty"` // 向量化模型(可选)
	ChunkSize      int32                  `protobuf:"varint,5,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`               // 文档分块大小(可选)
	ChunkOverlap   int32                  `protobuf:"varint,6,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`      // 分块重叠大小(可选)
	Config         *KnowledgeBaseConfig   `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`                                       // 知识库配置(可选)
	Tags           []string               `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`                                           // 标签(可选)
	Language       string                 `protobuf:"bytes,9,opt,name=language,proto3" json:"language,omitempty"`                                   // 主要语言(可选)
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateKnowledgeBaseRequest) Reset() {
	*x = CreateKnowledgeBaseRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseRequest) ProtoMessage() {}

func (x *CreateKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{6}
}

func (x *CreateKnowledgeBaseRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateKnowledgeBaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateKnowledgeBaseRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateKnowledgeBaseRequest) GetEmbeddingModel() string {
	if x != nil {
		return x.EmbeddingModel
	}
	return ""
}

func (x *CreateKnowledgeBaseRequest) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *CreateKnowledgeBaseRequest) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

func (x *CreateKnowledgeBaseRequest) GetConfig() *KnowledgeBaseConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateKnowledgeBaseRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *CreateKnowledgeBaseRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type CreateKnowledgeBaseReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBase *KnowledgeBase         `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"` // 创建的知识库
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateKnowledgeBaseReply) Reset() {
	*x = CreateKnowledgeBaseReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateKnowledgeBaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateKnowledgeBaseReply) ProtoMessage() {}

func (x *CreateKnowledgeBaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateKnowledgeBaseReply.ProtoReflect.Descriptor instead.
func (*CreateKnowledgeBaseReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{7}
}

func (x *CreateKnowledgeBaseReply) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

// 更新知识库
type UpdateKnowledgeBaseRequest struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                             // 知识库ID
	Name               string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                          // 知识库名称(可选)
	Description        string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                            // 知识库描述(可选)
	EmbeddingModel     string                 `protobuf:"bytes,4,opt,name=embedding_model,json=embeddingModel,proto3" json:"embedding_model,omitempty"`                // 向量化模型(可选)
	ChunkSize          int32                  `protobuf:"varint,5,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`                              // 文档分块大小(可选)
	ChunkOverlap       int32                  `protobuf:"varint,6,opt,name=chunk_overlap,json=chunkOverlap,proto3" json:"chunk_overlap,omitempty"`                     // 分块重叠大小(可选)
	Config             *KnowledgeBaseConfig   `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`                                                      // 知识库配置(可选)
	Tags               []string               `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty"`                                                          // 标签(可选)
	ReindexAfterUpdate bool                   `protobuf:"varint,9,opt,name=reindex_after_update,json=reindexAfterUpdate,proto3" json:"reindex_after_update,omitempty"` // 更新后是否重新索引
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *UpdateKnowledgeBaseRequest) Reset() {
	*x = UpdateKnowledgeBaseRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseRequest) ProtoMessage() {}

func (x *UpdateKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateKnowledgeBaseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateKnowledgeBaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateKnowledgeBaseRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateKnowledgeBaseRequest) GetEmbeddingModel() string {
	if x != nil {
		return x.EmbeddingModel
	}
	return ""
}

func (x *UpdateKnowledgeBaseRequest) GetChunkSize() int32 {
	if x != nil {
		return x.ChunkSize
	}
	return 0
}

func (x *UpdateKnowledgeBaseRequest) GetChunkOverlap() int32 {
	if x != nil {
		return x.ChunkOverlap
	}
	return 0
}

func (x *UpdateKnowledgeBaseRequest) GetConfig() *KnowledgeBaseConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *UpdateKnowledgeBaseRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateKnowledgeBaseRequest) GetReindexAfterUpdate() bool {
	if x != nil {
		return x.ReindexAfterUpdate
	}
	return false
}

type UpdateKnowledgeBaseReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBase *KnowledgeBase         `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"` // 更新后的知识库
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKnowledgeBaseReply) Reset() {
	*x = UpdateKnowledgeBaseReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeBaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeBaseReply) ProtoMessage() {}

func (x *UpdateKnowledgeBaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeBaseReply.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeBaseReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateKnowledgeBaseReply) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

// 删除知识库
type DeleteKnowledgeBaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                   // 知识库ID
	HardDelete    bool                   `protobuf:"varint,2,opt,name=hard_delete,json=hardDelete,proto3" json:"hard_delete,omitempty"` // 是否硬删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKnowledgeBaseRequest) Reset() {
	*x = DeleteKnowledgeBaseRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseRequest) ProtoMessage() {}

func (x *DeleteKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteKnowledgeBaseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteKnowledgeBaseRequest) GetHardDelete() bool {
	if x != nil {
		return x.HardDelete
	}
	return false
}

type DeleteKnowledgeBaseReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteKnowledgeBaseReply) Reset() {
	*x = DeleteKnowledgeBaseReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteKnowledgeBaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteKnowledgeBaseReply) ProtoMessage() {}

func (x *DeleteKnowledgeBaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteKnowledgeBaseReply.ProtoReflect.Descriptor instead.
func (*DeleteKnowledgeBaseReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{11}
}

// 获取知识库
type GetKnowledgeBaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                            // 知识库ID
	IncludeStats  bool                   `protobuf:"varint,2,opt,name=include_stats,json=includeStats,proto3" json:"include_stats,omitempty"`    // 是否包含统计信息
	IncludeConfig bool                   `protobuf:"varint,3,opt,name=include_config,json=includeConfig,proto3" json:"include_config,omitempty"` // 是否包含配置信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKnowledgeBaseRequest) Reset() {
	*x = GetKnowledgeBaseRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseRequest) ProtoMessage() {}

func (x *GetKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{12}
}

func (x *GetKnowledgeBaseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetKnowledgeBaseRequest) GetIncludeStats() bool {
	if x != nil {
		return x.IncludeStats
	}
	return false
}

func (x *GetKnowledgeBaseRequest) GetIncludeConfig() bool {
	if x != nil {
		return x.IncludeConfig
	}
	return false
}

type GetKnowledgeBaseReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBase *KnowledgeBase         `protobuf:"bytes,1,opt,name=knowledge_base,json=knowledgeBase,proto3" json:"knowledge_base,omitempty"` // 知识库信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKnowledgeBaseReply) Reset() {
	*x = GetKnowledgeBaseReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseReply) ProtoMessage() {}

func (x *GetKnowledgeBaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseReply.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{13}
}

func (x *GetKnowledgeBaseReply) GetKnowledgeBase() *KnowledgeBase {
	if x != nil {
		return x.KnowledgeBase
	}
	return nil
}

// 列出知识库
type ListKnowledgeBasesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                      // 用户ID
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                                        // 页码
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                // 页面大小
	Keyword       string                 `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`                                   // 搜索关键词(可选)
	Status        KnowledgeBaseStatus    `protobuf:"varint,5,opt,name=status,proto3,enum=api.ai.v1.KnowledgeBaseStatus" json:"status,omitempty"` // 状态过滤(可选)
	Tags          []string               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`                                         // 标签过滤(可选)
	SortBy        string                 `protobuf:"bytes,7,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`                       // 排序字段
	SortDesc      bool                   `protobuf:"varint,8,opt,name=sort_desc,json=sortDesc,proto3" json:"sort_desc,omitempty"`                // 是否降序
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKnowledgeBasesRequest) Reset() {
	*x = ListKnowledgeBasesRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKnowledgeBasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeBasesRequest) ProtoMessage() {}

func (x *ListKnowledgeBasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeBasesRequest.ProtoReflect.Descriptor instead.
func (*ListKnowledgeBasesRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{14}
}

func (x *ListKnowledgeBasesRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ListKnowledgeBasesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListKnowledgeBasesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKnowledgeBasesRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListKnowledgeBasesRequest) GetStatus() KnowledgeBaseStatus {
	if x != nil {
		return x.Status
	}
	return KnowledgeBaseStatus_KNOWLEDGE_BASE_STATUS_UNSPECIFIED
}

func (x *ListKnowledgeBasesRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListKnowledgeBasesRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListKnowledgeBasesRequest) GetSortDesc() bool {
	if x != nil {
		return x.SortDesc
	}
	return false
}

type ListKnowledgeBasesReply struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBases []*KnowledgeBase       `protobuf:"bytes,1,rep,name=knowledge_bases,json=knowledgeBases,proto3" json:"knowledge_bases,omitempty"` // 知识库列表
	Total          int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                                        // 总数
	Page           int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                                          // 当前页
	PageSize       int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 页面大小
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListKnowledgeBasesReply) Reset() {
	*x = ListKnowledgeBasesReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKnowledgeBasesReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeBasesReply) ProtoMessage() {}

func (x *ListKnowledgeBasesReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeBasesReply.ProtoReflect.Descriptor instead.
func (*ListKnowledgeBasesReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{15}
}

func (x *ListKnowledgeBasesReply) GetKnowledgeBases() []*KnowledgeBase {
	if x != nil {
		return x.KnowledgeBases
	}
	return nil
}

func (x *ListKnowledgeBasesReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListKnowledgeBasesReply) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListKnowledgeBasesReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 上传文档
type UploadDocumentRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"` // 知识库ID
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                 // 文档名称
	Content         []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                                           // 文档内容
	MimeType        string                 `protobuf:"bytes,4,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                         // 文件类型
	Metadata        *DocumentMetadata      `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`                                         // 文档元数据(可选)
	Tags            []string               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`                                                 // 标签(可选)
	AutoProcess     bool                   `protobuf:"varint,7,opt,name=auto_process,json=autoProcess,proto3" json:"auto_process,omitempty"`               // 是否自动处理
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UploadDocumentRequest) Reset() {
	*x = UploadDocumentRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocumentRequest) ProtoMessage() {}

func (x *UploadDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocumentRequest.ProtoReflect.Descriptor instead.
func (*UploadDocumentRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{16}
}

func (x *UploadDocumentRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *UploadDocumentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UploadDocumentRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UploadDocumentRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *UploadDocumentRequest) GetMetadata() *DocumentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UploadDocumentRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UploadDocumentRequest) GetAutoProcess() bool {
	if x != nil {
		return x.AutoProcess
	}
	return false
}

type UploadDocumentReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Document      *Document              `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"` // 上传的文档
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadDocumentReply) Reset() {
	*x = UploadDocumentReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadDocumentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadDocumentReply) ProtoMessage() {}

func (x *UploadDocumentReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadDocumentReply.ProtoReflect.Descriptor instead.
func (*UploadDocumentReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{17}
}

func (x *UploadDocumentReply) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

// 批量上传文档
type BatchUploadDocumentsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"` // 知识库ID
	Documents       []*DocumentUpload      `protobuf:"bytes,2,rep,name=documents,proto3" json:"documents,omitempty"`                                       // 文档列表
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BatchUploadDocumentsRequest) Reset() {
	*x = BatchUploadDocumentsRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUploadDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUploadDocumentsRequest) ProtoMessage() {}

func (x *BatchUploadDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUploadDocumentsRequest.ProtoReflect.Descriptor instead.
func (*BatchUploadDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{18}
}

func (x *BatchUploadDocumentsRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *BatchUploadDocumentsRequest) GetDocuments() []*DocumentUpload {
	if x != nil {
		return x.Documents
	}
	return nil
}

type DocumentUpload struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                         // 文档名称
	Content       []byte                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                   // 文档内容
	MimeType      string                 `protobuf:"bytes,3,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"` // 文件类型
	Metadata      *DocumentMetadata      `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`                 // 文档元数据(可选)
	Tags          []string               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`                         // 标签(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DocumentUpload) Reset() {
	*x = DocumentUpload{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DocumentUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentUpload) ProtoMessage() {}

func (x *DocumentUpload) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentUpload.ProtoReflect.Descriptor instead.
func (*DocumentUpload) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{19}
}

func (x *DocumentUpload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DocumentUpload) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *DocumentUpload) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *DocumentUpload) GetMetadata() *DocumentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DocumentUpload) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type BatchUploadDocumentsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Documents     []*Document            `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`                            // 上传的文档列表
	SuccessCount  int32                  `protobuf:"varint,2,opt,name=success_count,json=successCount,proto3" json:"success_count,omitempty"` // 成功数量
	FailedCount   int32                  `protobuf:"varint,3,opt,name=failed_count,json=failedCount,proto3" json:"failed_count,omitempty"`    // 失败数量
	Errors        []string               `protobuf:"bytes,4,rep,name=errors,proto3" json:"errors,omitempty"`                                  // 错误信息
	Progress      float64                `protobuf:"fixed64,5,opt,name=progress,proto3" json:"progress,omitempty"`                            // 进度百分比
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchUploadDocumentsReply) Reset() {
	*x = BatchUploadDocumentsReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchUploadDocumentsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchUploadDocumentsReply) ProtoMessage() {}

func (x *BatchUploadDocumentsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchUploadDocumentsReply.ProtoReflect.Descriptor instead.
func (*BatchUploadDocumentsReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{20}
}

func (x *BatchUploadDocumentsReply) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *BatchUploadDocumentsReply) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

func (x *BatchUploadDocumentsReply) GetFailedCount() int32 {
	if x != nil {
		return x.FailedCount
	}
	return 0
}

func (x *BatchUploadDocumentsReply) GetErrors() []string {
	if x != nil {
		return x.Errors
	}
	return nil
}

func (x *BatchUploadDocumentsReply) GetProgress() float64 {
	if x != nil {
		return x.Progress
	}
	return 0
}

// 更新文档
type UpdateDocumentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`               // 文档ID
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`            // 文档名称(可选)
	Content       []byte                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`      // 文档内容(可选)
	Metadata      *DocumentMetadata      `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`    // 文档元数据(可选)
	Tags          []string               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`            // 标签(可选)
	Reprocess     bool                   `protobuf:"varint,6,opt,name=reprocess,proto3" json:"reprocess,omitempty"` // 是否重新处理
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDocumentRequest) Reset() {
	*x = UpdateDocumentRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDocumentRequest) ProtoMessage() {}

func (x *UpdateDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDocumentRequest.ProtoReflect.Descriptor instead.
func (*UpdateDocumentRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateDocumentRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateDocumentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateDocumentRequest) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *UpdateDocumentRequest) GetMetadata() *DocumentMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateDocumentRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UpdateDocumentRequest) GetReprocess() bool {
	if x != nil {
		return x.Reprocess
	}
	return false
}

type UpdateDocumentReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Document      *Document              `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"` // 更新后的文档
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDocumentReply) Reset() {
	*x = UpdateDocumentReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDocumentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDocumentReply) ProtoMessage() {}

func (x *UpdateDocumentReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDocumentReply.ProtoReflect.Descriptor instead.
func (*UpdateDocumentReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateDocumentReply) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

// 删除文档
type DeleteDocumentRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocumentIds   []int64                `protobuf:"varint,1,rep,packed,name=document_ids,json=documentIds,proto3" json:"document_ids,omitempty"` // 文档ID列表
	HardDelete    bool                   `protobuf:"varint,2,opt,name=hard_delete,json=hardDelete,proto3" json:"hard_delete,omitempty"`           // 是否硬删除
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDocumentRequest) Reset() {
	*x = DeleteDocumentRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDocumentRequest) ProtoMessage() {}

func (x *DeleteDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDocumentRequest.ProtoReflect.Descriptor instead.
func (*DeleteDocumentRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteDocumentRequest) GetDocumentIds() []int64 {
	if x != nil {
		return x.DocumentIds
	}
	return nil
}

func (x *DeleteDocumentRequest) GetHardDelete() bool {
	if x != nil {
		return x.HardDelete
	}
	return false
}

type DeleteDocumentReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDocumentReply) Reset() {
	*x = DeleteDocumentReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDocumentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDocumentReply) ProtoMessage() {}

func (x *DeleteDocumentReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDocumentReply.ProtoReflect.Descriptor instead.
func (*DeleteDocumentReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{24}
}

// 获取文档
type GetDocumentRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                               // 文档ID
	IncludeContent bool                   `protobuf:"varint,2,opt,name=include_content,json=includeContent,proto3" json:"include_content,omitempty"` // 是否包含内容
	IncludeChunks  bool                   `protobuf:"varint,3,opt,name=include_chunks,json=includeChunks,proto3" json:"include_chunks,omitempty"`    // 是否包含块信息
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetDocumentRequest) Reset() {
	*x = GetDocumentRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentRequest) ProtoMessage() {}

func (x *GetDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentRequest.ProtoReflect.Descriptor instead.
func (*GetDocumentRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{25}
}

func (x *GetDocumentRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetDocumentRequest) GetIncludeContent() bool {
	if x != nil {
		return x.IncludeContent
	}
	return false
}

func (x *GetDocumentRequest) GetIncludeChunks() bool {
	if x != nil {
		return x.IncludeChunks
	}
	return false
}

type GetDocumentReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Document      *Document              `protobuf:"bytes,1,opt,name=document,proto3" json:"document,omitempty"` // 文档信息
	Chunks        []*KnowledgeChunk      `protobuf:"bytes,2,rep,name=chunks,proto3" json:"chunks,omitempty"`     // 知识块列表(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDocumentReply) Reset() {
	*x = GetDocumentReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDocumentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDocumentReply) ProtoMessage() {}

func (x *GetDocumentReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDocumentReply.ProtoReflect.Descriptor instead.
func (*GetDocumentReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{26}
}

func (x *GetDocumentReply) GetDocument() *Document {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *GetDocumentReply) GetChunks() []*KnowledgeChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

// 列出文档
type ListDocumentsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"` // 知识库ID
	Page            int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                                                // 页码
	PageSize        int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                        // 页面大小
	Keyword         string                 `protobuf:"bytes,4,opt,name=keyword,proto3" json:"keyword,omitempty"`                                           // 搜索关键词(可选)
	Status          DocumentStatus         `protobuf:"varint,5,opt,name=status,proto3,enum=api.ai.v1.DocumentStatus" json:"status,omitempty"`              // 状态过滤(可选)
	Tags            []string               `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty"`                                                 // 标签过滤(可选)
	MimeType        string                 `protobuf:"bytes,7,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`                         // 文件类型过滤(可选)
	SortBy          string                 `protobuf:"bytes,8,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`                               // 排序字段
	SortDesc        bool                   `protobuf:"varint,9,opt,name=sort_desc,json=sortDesc,proto3" json:"sort_desc,omitempty"`                        // 是否降序
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListDocumentsRequest) Reset() {
	*x = ListDocumentsRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDocumentsRequest) ProtoMessage() {}

func (x *ListDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDocumentsRequest.ProtoReflect.Descriptor instead.
func (*ListDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{27}
}

func (x *ListDocumentsRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *ListDocumentsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDocumentsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDocumentsRequest) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *ListDocumentsRequest) GetStatus() DocumentStatus {
	if x != nil {
		return x.Status
	}
	return DocumentStatus_DOCUMENT_STATUS_UNSPECIFIED
}

func (x *ListDocumentsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListDocumentsRequest) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *ListDocumentsRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListDocumentsRequest) GetSortDesc() bool {
	if x != nil {
		return x.SortDesc
	}
	return false
}

type ListDocumentsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Documents     []*Document            `protobuf:"bytes,1,rep,name=documents,proto3" json:"documents,omitempty"`                // 文档列表
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 总数
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页面大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDocumentsReply) Reset() {
	*x = ListDocumentsReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDocumentsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDocumentsReply) ProtoMessage() {}

func (x *ListDocumentsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDocumentsReply.ProtoReflect.Descriptor instead.
func (*ListDocumentsReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{28}
}

func (x *ListDocumentsReply) GetDocuments() []*Document {
	if x != nil {
		return x.Documents
	}
	return nil
}

func (x *ListDocumentsReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListDocumentsReply) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListDocumentsReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 处理文档
type ProcessDocumentRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DocumentId     int64                  `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`                                                  // 文档ID
	ForceReprocess bool                   `protobuf:"varint,2,opt,name=force_reprocess,json=forceReprocess,proto3" json:"force_reprocess,omitempty"`                                      // 是否强制重新处理
	Options        map[string]string      `protobuf:"bytes,3,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 处理选项
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ProcessDocumentRequest) Reset() {
	*x = ProcessDocumentRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessDocumentRequest) ProtoMessage() {}

func (x *ProcessDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessDocumentRequest.ProtoReflect.Descriptor instead.
func (*ProcessDocumentRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{29}
}

func (x *ProcessDocumentRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *ProcessDocumentRequest) GetForceReprocess() bool {
	if x != nil {
		return x.ForceReprocess
	}
	return false
}

func (x *ProcessDocumentRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type ProcessDocumentReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`                     // 处理任务ID
	Status        DocumentStatus         `protobuf:"varint,2,opt,name=status,proto3,enum=api.ai.v1.DocumentStatus" json:"status,omitempty"` // 处理状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessDocumentReply) Reset() {
	*x = ProcessDocumentReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessDocumentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessDocumentReply) ProtoMessage() {}

func (x *ProcessDocumentReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessDocumentReply.ProtoReflect.Descriptor instead.
func (*ProcessDocumentReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{30}
}

func (x *ProcessDocumentReply) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ProcessDocumentReply) GetStatus() DocumentStatus {
	if x != nil {
		return x.Status
	}
	return DocumentStatus_DOCUMENT_STATUS_UNSPECIFIED
}

// 搜索知识
type SearchKnowledgeRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`                                 // 知识库ID
	Query           string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`                                                                               // 搜索查询
	Limit           int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                                                                              // 返回结果数量限制
	Threshold       float64                `protobuf:"fixed64,4,opt,name=threshold,proto3" json:"threshold,omitempty"`                                                                     // 相似度阈值
	Filters         map[string]string      `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 元数据过滤器
	IncludeMetadata bool                   `protobuf:"varint,6,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`                                   // 是否包含元数据
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SearchKnowledgeRequest) Reset() {
	*x = SearchKnowledgeRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchKnowledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKnowledgeRequest) ProtoMessage() {}

func (x *SearchKnowledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKnowledgeRequest.ProtoReflect.Descriptor instead.
func (*SearchKnowledgeRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{31}
}

func (x *SearchKnowledgeRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *SearchKnowledgeRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *SearchKnowledgeRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SearchKnowledgeRequest) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *SearchKnowledgeRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *SearchKnowledgeRequest) GetIncludeMetadata() bool {
	if x != nil {
		return x.IncludeMetadata
	}
	return false
}

type SearchKnowledgeReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunks        []*KnowledgeChunk      `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`                                  // 搜索结果
	MaxScore      float64                `protobuf:"fixed64,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`            // 最高分数
	MinScore      float64                `protobuf:"fixed64,3,opt,name=min_score,json=minScore,proto3" json:"min_score,omitempty"`            // 最低分数
	TotalResults  int32                  `protobuf:"varint,4,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"` // 总结果数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchKnowledgeReply) Reset() {
	*x = SearchKnowledgeReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchKnowledgeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchKnowledgeReply) ProtoMessage() {}

func (x *SearchKnowledgeReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchKnowledgeReply.ProtoReflect.Descriptor instead.
func (*SearchKnowledgeReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{32}
}

func (x *SearchKnowledgeReply) GetChunks() []*KnowledgeChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *SearchKnowledgeReply) GetMaxScore() float64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *SearchKnowledgeReply) GetMinScore() float64 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *SearchKnowledgeReply) GetTotalResults() int32 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

// 混合搜索
type HybridSearchRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`                                 // 知识库ID
	Query           string                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`                                                                               // 搜索查询
	Limit           int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                                                                              // 返回结果数量限制
	SemanticWeight  float64                `protobuf:"fixed64,4,opt,name=semantic_weight,json=semanticWeight,proto3" json:"semantic_weight,omitempty"`                                     // 语义搜索权重(0-1)
	KeywordWeight   float64                `protobuf:"fixed64,5,opt,name=keyword_weight,json=keywordWeight,proto3" json:"keyword_weight,omitempty"`                                        // 关键词搜索权重(0-1)
	Threshold       float64                `protobuf:"fixed64,6,opt,name=threshold,proto3" json:"threshold,omitempty"`                                                                     // 相似度阈值
	Filters         map[string]string      `protobuf:"bytes,7,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 元数据过滤器
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *HybridSearchRequest) Reset() {
	*x = HybridSearchRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridSearchRequest) ProtoMessage() {}

func (x *HybridSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridSearchRequest.ProtoReflect.Descriptor instead.
func (*HybridSearchRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{33}
}

func (x *HybridSearchRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *HybridSearchRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *HybridSearchRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *HybridSearchRequest) GetSemanticWeight() float64 {
	if x != nil {
		return x.SemanticWeight
	}
	return 0
}

func (x *HybridSearchRequest) GetKeywordWeight() float64 {
	if x != nil {
		return x.KeywordWeight
	}
	return 0
}

func (x *HybridSearchRequest) GetThreshold() float64 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *HybridSearchRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

type HybridSearchReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*HybridSearchResult  `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`                                // 搜索结果
	MaxScore      float64                `protobuf:"fixed64,2,opt,name=max_score,json=maxScore,proto3" json:"max_score,omitempty"`            // 最高分数
	TotalResults  int32                  `protobuf:"varint,3,opt,name=total_results,json=totalResults,proto3" json:"total_results,omitempty"` // 总结果数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridSearchReply) Reset() {
	*x = HybridSearchReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridSearchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridSearchReply) ProtoMessage() {}

func (x *HybridSearchReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridSearchReply.ProtoReflect.Descriptor instead.
func (*HybridSearchReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{34}
}

func (x *HybridSearchReply) GetResults() []*HybridSearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *HybridSearchReply) GetMaxScore() float64 {
	if x != nil {
		return x.MaxScore
	}
	return 0
}

func (x *HybridSearchReply) GetTotalResults() int32 {
	if x != nil {
		return x.TotalResults
	}
	return 0
}

type HybridSearchResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunk         *KnowledgeChunk        `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`                                        // 知识块
	SemanticScore float64                `protobuf:"fixed64,2,opt,name=semantic_score,json=semanticScore,proto3" json:"semantic_score,omitempty"` // 语义分数
	KeywordScore  float64                `protobuf:"fixed64,3,opt,name=keyword_score,json=keywordScore,proto3" json:"keyword_score,omitempty"`    // 关键词分数
	CombinedScore float64                `protobuf:"fixed64,4,opt,name=combined_score,json=combinedScore,proto3" json:"combined_score,omitempty"` // 综合分数
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HybridSearchResult) Reset() {
	*x = HybridSearchResult{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HybridSearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridSearchResult) ProtoMessage() {}

func (x *HybridSearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridSearchResult.ProtoReflect.Descriptor instead.
func (*HybridSearchResult) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{35}
}

func (x *HybridSearchResult) GetChunk() *KnowledgeChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *HybridSearchResult) GetSemanticScore() float64 {
	if x != nil {
		return x.SemanticScore
	}
	return 0
}

func (x *HybridSearchResult) GetKeywordScore() float64 {
	if x != nil {
		return x.KeywordScore
	}
	return 0
}

func (x *HybridSearchResult) GetCombinedScore() float64 {
	if x != nil {
		return x.CombinedScore
	}
	return 0
}

// 高级搜索
type AdvancedSearchRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	KnowledgeBaseId int64                  `protobuf:"varint,1,opt,name=knowledge_base_id,json=knowledgeBaseId,proto3" json:"knowledge_base_id,omitempty"`                                 // 知识库ID
	Query           *SearchQuery           `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`                                                                               // 复杂查询
	Limit           int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`                                                                              // 返回结果数量限制
	Offset          int32                  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`                                                                            // 偏移量
	Sort            []*SearchSort          `protobuf:"bytes,5,rep,name=sort,proto3" json:"sort,omitempty"`                                                                                 // 排序条件
	Filters         map[string]string      `protobuf:"bytes,6,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 过滤器
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AdvancedSearchRequest) Reset() {
	*x = AdvancedSearchRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvancedSearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedSearchRequest) ProtoMessage() {}

func (x *AdvancedSearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedSearchRequest.ProtoReflect.Descriptor instead.
func (*AdvancedSearchRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{36}
}

func (x *AdvancedSearchRequest) GetKnowledgeBaseId() int64 {
	if x != nil {
		return x.KnowledgeBaseId
	}
	return 0
}

func (x *AdvancedSearchRequest) GetQuery() *SearchQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *AdvancedSearchRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AdvancedSearchRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AdvancedSearchRequest) GetSort() []*SearchSort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *AdvancedSearchRequest) GetFilters() map[string]string {
	if x != nil {
		return x.Filters
	}
	return nil
}

type SearchQuery struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Text            string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`                                              // 查询文本
	Mode            SearchMode             `protobuf:"varint,2,opt,name=mode,proto3,enum=api.ai.v1.SearchMode" json:"mode,omitempty"`                   // 搜索模式
	Keywords        []string               `protobuf:"bytes,3,rep,name=keywords,proto3" json:"keywords,omitempty"`                                      // 关键词列表
	ExcludeKeywords []string               `protobuf:"bytes,4,rep,name=exclude_keywords,json=excludeKeywords,proto3" json:"exclude_keywords,omitempty"` // 排除关键词
	DateRange       *DateRange             `protobuf:"bytes,5,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`                   // 日期范围
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SearchQuery) Reset() {
	*x = SearchQuery{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchQuery) ProtoMessage() {}

func (x *SearchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchQuery.ProtoReflect.Descriptor instead.
func (*SearchQuery) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{37}
}

func (x *SearchQuery) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SearchQuery) GetMode() SearchMode {
	if x != nil {
		return x.Mode
	}
	return SearchMode_SEARCH_MODE_UNSPECIFIED
}

func (x *SearchQuery) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *SearchQuery) GetExcludeKeywords() []string {
	if x != nil {
		return x.ExcludeKeywords
	}
	return nil
}

func (x *SearchQuery) GetDateRange() *DateRange {
	if x != nil {
		return x.DateRange
	}
	return nil
}

type DateRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"` // 开始时间
	End           *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`     // 结束时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DateRange) Reset() {
	*x = DateRange{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DateRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateRange) ProtoMessage() {}

func (x *DateRange) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateRange.ProtoReflect.Descriptor instead.
func (*DateRange) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{38}
}

func (x *DateRange) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *DateRange) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type SearchSort struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"` // 排序字段
	Desc          bool                   `protobuf:"varint,2,opt,name=desc,proto3" json:"desc,omitempty"`  // 是否降序
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchSort) Reset() {
	*x = SearchSort{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchSort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSort) ProtoMessage() {}

func (x *SearchSort) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSort.ProtoReflect.Descriptor instead.
func (*SearchSort) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{39}
}

func (x *SearchSort) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *SearchSort) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

type AdvancedSearchReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunks        []*KnowledgeChunk      `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`                                                                            // 搜索结果
	TotalCount    int64                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`                                                 // 总数量
	Facets        map[string]int64       `protobuf:"bytes,3,rep,name=facets,proto3" json:"facets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"` // 分面统计
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AdvancedSearchReply) Reset() {
	*x = AdvancedSearchReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AdvancedSearchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdvancedSearchReply) ProtoMessage() {}

func (x *AdvancedSearchReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdvancedSearchReply.ProtoReflect.Descriptor instead.
func (*AdvancedSearchReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{40}
}

func (x *AdvancedSearchReply) GetChunks() []*KnowledgeChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *AdvancedSearchReply) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *AdvancedSearchReply) GetFacets() map[string]int64 {
	if x != nil {
		return x.Facets
	}
	return nil
}

// 获取知识块
type GetKnowledgeChunkRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                     // 块ID
	IncludeEmbedding bool                   `protobuf:"varint,2,opt,name=include_embedding,json=includeEmbedding,proto3" json:"include_embedding,omitempty"` // 是否包含向量
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetKnowledgeChunkRequest) Reset() {
	*x = GetKnowledgeChunkRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeChunkRequest) ProtoMessage() {}

func (x *GetKnowledgeChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeChunkRequest.ProtoReflect.Descriptor instead.
func (*GetKnowledgeChunkRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{41}
}

func (x *GetKnowledgeChunkRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetKnowledgeChunkRequest) GetIncludeEmbedding() bool {
	if x != nil {
		return x.IncludeEmbedding
	}
	return false
}

type GetKnowledgeChunkReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunk         *KnowledgeChunk        `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"` // 知识块信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetKnowledgeChunkReply) Reset() {
	*x = GetKnowledgeChunkReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeChunkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeChunkReply) ProtoMessage() {}

func (x *GetKnowledgeChunkReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeChunkReply.ProtoReflect.Descriptor instead.
func (*GetKnowledgeChunkReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{42}
}

func (x *GetKnowledgeChunkReply) GetChunk() *KnowledgeChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// 更新知识块
type UpdateKnowledgeChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                      // 块ID
	Content       string                 `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`                                                                             // 块内容(可选)
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // 元数据(可选)
	Keywords      []string               `protobuf:"bytes,4,rep,name=keywords,proto3" json:"keywords,omitempty"`                                                                           // 关键词(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKnowledgeChunkRequest) Reset() {
	*x = UpdateKnowledgeChunkRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeChunkRequest) ProtoMessage() {}

func (x *UpdateKnowledgeChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeChunkRequest.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeChunkRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateKnowledgeChunkRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateKnowledgeChunkRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *UpdateKnowledgeChunkRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateKnowledgeChunkRequest) GetKeywords() []string {
	if x != nil {
		return x.Keywords
	}
	return nil
}

type UpdateKnowledgeChunkReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunk         *KnowledgeChunk        `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"` // 更新后的知识块
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateKnowledgeChunkReply) Reset() {
	*x = UpdateKnowledgeChunkReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateKnowledgeChunkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateKnowledgeChunkReply) ProtoMessage() {}

func (x *UpdateKnowledgeChunkReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateKnowledgeChunkReply.ProtoReflect.Descriptor instead.
func (*UpdateKnowledgeChunkReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateKnowledgeChunkReply) GetChunk() *KnowledgeChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// 列出知识块
type ListKnowledgeChunksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocumentId    int64                  `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`                       // 文档ID
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                                                     // 页码
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                             // 页面大小
	ChunkType     ChunkType              `protobuf:"varint,4,opt,name=chunk_type,json=chunkType,proto3,enum=api.ai.v1.ChunkType" json:"chunk_type,omitempty"` // 块类型过滤(可选)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKnowledgeChunksRequest) Reset() {
	*x = ListKnowledgeChunksRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKnowledgeChunksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeChunksRequest) ProtoMessage() {}

func (x *ListKnowledgeChunksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeChunksRequest.ProtoReflect.Descriptor instead.
func (*ListKnowledgeChunksRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{45}
}

func (x *ListKnowledgeChunksRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *ListKnowledgeChunksRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListKnowledgeChunksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListKnowledgeChunksRequest) GetChunkType() ChunkType {
	if x != nil {
		return x.ChunkType
	}
	return ChunkType_CHUNK_TYPE_UNSPECIFIED
}

type ListKnowledgeChunksReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Chunks        []*KnowledgeChunk      `protobuf:"bytes,1,rep,name=chunks,proto3" json:"chunks,omitempty"`                      // 知识块列表
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                       // 总数
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 当前页
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页面大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListKnowledgeChunksReply) Reset() {
	*x = ListKnowledgeChunksReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListKnowledgeChunksReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKnowledgeChunksReply) ProtoMessage() {}

func (x *ListKnowledgeChunksReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKnowledgeChunksReply.ProtoReflect.Descriptor instead.
func (*ListKnowledgeChunksReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{46}
}

func (x *ListKnowledgeChunksReply) GetChunks() []*KnowledgeChunk {
	if x != nil {
		return x.Chunks
	}
	return nil
}

func (x *ListKnowledgeChunksReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListKnowledgeChunksReply) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListKnowledgeChunksReply) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// 重新索引知识库
type ReindexKnowledgeBaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                         // 知识库ID
	ForceReindex  bool                   `protobuf:"varint,2,opt,name=force_reindex,json=forceReindex,proto3" json:"force_reindex,omitempty"` // 是否强制重新索引
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReindexKnowledgeBaseRequest) Reset() {
	*x = ReindexKnowledgeBaseRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[47]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReindexKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReindexKnowledgeBaseRequest) ProtoMessage() {}

func (x *ReindexKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[47]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReindexKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*ReindexKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{47}
}

func (x *ReindexKnowledgeBaseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReindexKnowledgeBaseRequest) GetForceReindex() bool {
	if x != nil {
		return x.ForceReindex
	}
	return false
}

type ReindexKnowledgeBaseReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JobId         string                 `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"` // 索引任务ID
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`            // 任务状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReindexKnowledgeBaseReply) Reset() {
	*x = ReindexKnowledgeBaseReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[48]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReindexKnowledgeBaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReindexKnowledgeBaseReply) ProtoMessage() {}

func (x *ReindexKnowledgeBaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[48]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReindexKnowledgeBaseReply.ProtoReflect.Descriptor instead.
func (*ReindexKnowledgeBaseReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{48}
}

func (x *ReindexKnowledgeBaseReply) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *ReindexKnowledgeBaseReply) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

// 获取知识库统计
type GetKnowledgeBaseStatsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                  // 知识库ID
	IncludeDetailed bool                   `protobuf:"varint,2,opt,name=include_detailed,json=includeDetailed,proto3" json:"include_detailed,omitempty"` // 是否包含详细统计
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetKnowledgeBaseStatsRequest) Reset() {
	*x = GetKnowledgeBaseStatsRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[49]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseStatsRequest) ProtoMessage() {}

func (x *GetKnowledgeBaseStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[49]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseStatsRequest.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseStatsRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{49}
}

func (x *GetKnowledgeBaseStatsRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetKnowledgeBaseStatsRequest) GetIncludeDetailed() bool {
	if x != nil {
		return x.IncludeDetailed
	}
	return false
}

type GetKnowledgeBaseStatsReply struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Stats              *KnowledgeBaseStats    `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`                                                                                                                                 // 统计信息
	PerformanceMetrics map[string]float64     `protobuf:"bytes,2,rep,name=performance_metrics,json=performanceMetrics,proto3" json:"performance_metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"` // 性能指标
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetKnowledgeBaseStatsReply) Reset() {
	*x = GetKnowledgeBaseStatsReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[50]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetKnowledgeBaseStatsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKnowledgeBaseStatsReply) ProtoMessage() {}

func (x *GetKnowledgeBaseStatsReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[50]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKnowledgeBaseStatsReply.ProtoReflect.Descriptor instead.
func (*GetKnowledgeBaseStatsReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{50}
}

func (x *GetKnowledgeBaseStatsReply) GetStats() *KnowledgeBaseStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *GetKnowledgeBaseStatsReply) GetPerformanceMetrics() map[string]float64 {
	if x != nil {
		return x.PerformanceMetrics
	}
	return nil
}

// 分析知识库
type AnalyzeKnowledgeBaseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                               // 知识库ID
	AnalysisTypes []AnalysisType         `protobuf:"varint,2,rep,packed,name=analysis_types,json=analysisTypes,proto3,enum=api.ai.v1.AnalysisType" json:"analysis_types,omitempty"` // 分析类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeKnowledgeBaseRequest) Reset() {
	*x = AnalyzeKnowledgeBaseRequest{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[51]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeKnowledgeBaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeKnowledgeBaseRequest) ProtoMessage() {}

func (x *AnalyzeKnowledgeBaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[51]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeKnowledgeBaseRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeKnowledgeBaseRequest) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{51}
}

func (x *AnalyzeKnowledgeBaseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AnalyzeKnowledgeBaseRequest) GetAnalysisTypes() []AnalysisType {
	if x != nil {
		return x.AnalysisTypes
	}
	return nil
}

type AnalyzeKnowledgeBaseReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Results       []*AnalysisResult      `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"` // 分析结果
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeKnowledgeBaseReply) Reset() {
	*x = AnalyzeKnowledgeBaseReply{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[52]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeKnowledgeBaseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeKnowledgeBaseReply) ProtoMessage() {}

func (x *AnalyzeKnowledgeBaseReply) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[52]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeKnowledgeBaseReply.ProtoReflect.Descriptor instead.
func (*AnalyzeKnowledgeBaseReply) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{52}
}

func (x *AnalyzeKnowledgeBaseReply) GetResults() []*AnalysisResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type AnalysisResult struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Type              AnalysisType           `protobuf:"varint,1,opt,name=type,proto3,enum=api.ai.v1.AnalysisType" json:"type,omitempty"`                                                      // 分析类型
	Title             string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                                                                                 // 结果标题
	Description       string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`                                                                     // 结果描述
	Metrics           map[string]float64     `protobuf:"bytes,4,rep,name=metrics,proto3" json:"metrics,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"` // 指标数据
	Insights          []string               `protobuf:"bytes,5,rep,name=insights,proto3" json:"insights,omitempty"`                                                                           // 洞察信息
	VisualizationData []byte                 `protobuf:"bytes,6,opt,name=visualization_data,json=visualizationData,proto3" json:"visualization_data,omitempty"`                                // 可视化数据
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AnalysisResult) Reset() {
	*x = AnalysisResult{}
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[53]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalysisResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalysisResult) ProtoMessage() {}

func (x *AnalysisResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_ai_v1_knowledge_proto_msgTypes[53]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalysisResult.ProtoReflect.Descriptor instead.
func (*AnalysisResult) Descriptor() ([]byte, []int) {
	return file_api_ai_v1_knowledge_proto_rawDescGZIP(), []int{53}
}

func (x *AnalysisResult) GetType() AnalysisType {
	if x != nil {
		return x.Type
	}
	return AnalysisType_ANALYSIS_TYPE_UNSPECIFIED
}

func (x *AnalysisResult) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AnalysisResult) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AnalysisResult) GetMetrics() map[string]float64 {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AnalysisResult) GetInsights() []string {
	if x != nil {
		return x.Insights
	}
	return nil
}

func (x *AnalysisResult) GetVisualizationData() []byte {
	if x != nil {
		return x.VisualizationData
	}
	return nil
}

var File_api_ai_v1_knowledge_proto protoreflect.FileDescriptor

const file_api_ai_v1_knowledge_proto_rawDesc = "" +
	"\n" +
	"\x19api/ai/v1/knowledge.proto\x12\tapi.ai.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xfd\x05\n" +
	"\rKnowledgeBase\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x17\n" +
	"\auser_id\x18\x02 \x01(\x03R\x06userId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\x12'\n" +
	"\x0fembedding_model\x18\x05 \x01(\tR\x0eembeddingModel\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x06 \x01(\x05R\tchunkSize\x12#\n" +
	"\rchunk_overlap\x18\a \x01(\x05R\fchunkOverlap\x126\n" +
	"\x06status\x18\b \x01(\x0e2\x1e.api.ai.v1.KnowledgeBaseStatusR\x06status\x129\n" +
	"\n" +
	"created_at\x18\t \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x126\n" +
	"\x06config\x18\v \x01(\v2\x1e.api.ai.v1.KnowledgeBaseConfigR\x06config\x123\n" +
	"\x05stats\x18\f \x01(\v2\x1d.api.ai.v1.KnowledgeBaseStatsR\x05stats\x12\x12\n" +
	"\x04tags\x18\r \x03(\tR\x04tags\x12\x18\n" +
	"\aversion\x18\x0e \x01(\x05R\aversion\x12\x1a\n" +
	"\blanguage\x18\x0f \x01(\tR\blanguage\x120\n" +
	"\x14supported_file_types\x18\x10 \x03(\tR\x12supportedFileTypes\x12\"\n" +
	"\rmax_file_size\x18\x11 \x01(\x03R\vmaxFileSize\x12!\n" +
	"\fauto_process\x18\x12 \x01(\bR\vautoProcess\x12B\n" +
	"\x0flast_indexed_at\x18\x13 \x01(\v2\x1a.google.protobuf.TimestampR\rlastIndexedAt\"\xff\x04\n" +
	"\x13KnowledgeBaseConfig\x12'\n" +
	"\x0fembedding_model\x18\x01 \x01(\tR\x0eembeddingModel\x12/\n" +
	"\x13embedding_dimension\x18\x02 \x01(\x05R\x12embeddingDimension\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x03 \x01(\x05R\tchunkSize\x12#\n" +
	"\rchunk_overlap\x18\x04 \x01(\x05R\fchunkOverlap\x12H\n" +
	"\x11chunking_strategy\x18\x05 \x01(\x0e2\x1b.api.ai.v1.ChunkingStrategyR\x10chunkingStrategy\x121\n" +
	"\x14similarity_threshold\x18\x06 \x01(\x01R\x13similarityThreshold\x12/\n" +
	"\x14max_chunks_per_query\x18\a \x01(\x05R\x11maxChunksPerQuery\x124\n" +
	"\x16enable_metadata_filter\x18\b \x01(\bR\x14enableMetadataFilter\x12\x1d\n" +
	"\n" +
	"stop_words\x18\t \x03(\tR\tstopWords\x12#\n" +
	"\rtext_splitter\x18\n" +
	" \x01(\tR\ftextSplitter\x12^\n" +
	"\x10advanced_options\x18\v \x03(\v23.api.ai.v1.KnowledgeBaseConfig.AdvancedOptionsEntryR\x0fadvancedOptions\x1aB\n" +
	"\x14AdvancedOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd2\x05\n" +
	"\x12KnowledgeBaseStats\x12%\n" +
	"\x0edocument_count\x18\x01 \x01(\x03R\rdocumentCount\x12\x1f\n" +
	"\vchunk_count\x18\x02 \x01(\x03R\n" +
	"chunkCount\x12)\n" +
	"\x10total_characters\x18\x03 \x01(\x03R\x0ftotalCharacters\x12!\n" +
	"\ftotal_tokens\x18\x04 \x01(\x03R\vtotalTokens\x12,\n" +
	"\x12average_chunk_size\x18\x05 \x01(\x01R\x10averageChunkSize\x12m\n" +
	"\x16file_type_distribution\x18\x06 \x03(\v27.api.ai.v1.KnowledgeBaseStats.FileTypeDistributionEntryR\x14fileTypeDistribution\x12l\n" +
	"\x15language_distribution\x18\a \x03(\v27.api.ai.v1.KnowledgeBaseStats.LanguageDistributionEntryR\x14languageDistribution\x12=\n" +
	"\flast_updated\x18\b \x01(\v2\x1a.google.protobuf.TimestampR\vlastUpdated\x12&\n" +
	"\x0fstorage_size_mb\x18\t \x01(\x01R\rstorageSizeMb\x12\"\n" +
	"\rindex_size_mb\x18\n" +
	" \x01(\x01R\vindexSizeMb\x1aG\n" +
	"\x19FileTypeDistributionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1aG\n" +
	"\x19LanguageDistributionEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\xef\x05\n" +
	"\bDocument\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12*\n" +
	"\x11knowledge_base_id\x18\x02 \x01(\x03R\x0fknowledgeBaseId\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12\x1b\n" +
	"\tfile_path\x18\x05 \x01(\tR\bfilePath\x12\x1b\n" +
	"\tmime_type\x18\x06 \x01(\tR\bmimeType\x12\x1b\n" +
	"\tfile_size\x18\a \x01(\x03R\bfileSize\x12\x1f\n" +
	"\vchunk_count\x18\b \x01(\x05R\n" +
	"chunkCount\x121\n" +
	"\x06status\x18\t \x01(\x0e2\x19.api.ai.v1.DocumentStatusR\x06status\x129\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x129\n" +
	"\n" +
	"updated_at\x18\v \x01(\v2\x1a.google.protobuf.TimestampR\tupdatedAt\x127\n" +
	"\bmetadata\x18\f \x01(\v2\x1b.api.ai.v1.DocumentMetadataR\bmetadata\x12\x12\n" +
	"\x04tags\x18\r \x03(\tR\x04tags\x12\x1a\n" +
	"\blanguage\x18\x0e \x01(\tR\blanguage\x12\x1d\n" +
	"\n" +
	"source_url\x18\x0f \x01(\tR\tsourceUrl\x12\x12\n" +
	"\x04hash\x18\x10 \x01(\tR\x04hash\x12\x18\n" +
	"\aversion\x18\x11 \x01(\x05R\aversion\x12F\n" +
	"\x11last_processed_at\x18\x12 \x01(\v2\x1a.google.protobuf.TimestampR\x0flastProcessedAt\x12)\n" +
	"\x10processing_error\x18\x13 \x01(\tR\x0fprocessingError\x12/\n" +
	"\x13processing_progress\x18\x14 \x01(\x01R\x12processingProgress\"\xe2\x03\n" +
	"\x10DocumentMetadata\x12\x14\n" +
	"\x05title\x18\x01 \x01(\tR\x05title\x12\x16\n" +
	"\x06author\x18\x02 \x01(\tR\x06author\x12\x18\n" +
	"\asubject\x18\x03 \x01(\tR\asubject\x12\x1a\n" +
	"\bkeywords\x18\x04 \x03(\tR\bkeywords\x12=\n" +
	"\fcreated_date\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\vcreatedDate\x12?\n" +
	"\rmodified_date\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\fmodifiedDate\x12\x1a\n" +
	"\bcategory\x18\a \x01(\tR\bcategory\x12\x1d\n" +
	"\n" +
	"page_count\x18\b \x01(\x05R\tpageCount\x12\x1a\n" +
	"\bencoding\x18\t \x01(\tR\bencoding\x12R\n" +
	"\rcustom_fields\x18\n" +
	" \x03(\v2-.api.ai.v1.DocumentMetadata.CustomFieldsEntryR\fcustomFields\x1a?\n" +
	"\x11CustomFieldsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x9a\x05\n" +
	"\x0eKnowledgeChunk\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1f\n" +
	"\vdocument_id\x18\x02 \x01(\x03R\n" +
	"documentId\x12*\n" +
	"\x11knowledge_base_id\x18\x03 \x01(\x03R\x0fknowledgeBaseId\x12\x18\n" +
	"\acontent\x18\x04 \x01(\tR\acontent\x12\x14\n" +
	"\x05score\x18\x05 \x01(\x01R\x05score\x12C\n" +
	"\bmetadata\x18\x06 \x03(\v2'.api.ai.v1.KnowledgeChunk.MetadataEntryR\bmetadata\x12\x1f\n" +
	"\vchunk_index\x18\a \x01(\x05R\n" +
	"chunkIndex\x12%\n" +
	"\x0estart_position\x18\b \x01(\x05R\rstartPosition\x12!\n" +
	"\fend_position\x18\t \x01(\x05R\vendPosition\x12\x1c\n" +
	"\tembedding\x18\n" +
	" \x03(\x02R\tembedding\x12\x1a\n" +
	"\blanguage\x18\v \x01(\tR\blanguage\x12\x1a\n" +
	"\bkeywords\x18\f \x03(\tR\bkeywords\x123\n" +
	"\n" +
	"chunk_type\x18\r \x01(\x0e2\x14.api.ai.v1.ChunkTypeR\tchunkType\x129\n" +
	"\n" +
	"created_at\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampR\tcreatedAt\x12'\n" +
	"\x0fcharacter_count\x18\x0f \x01(\x05R\x0echaracterCount\x12\x1f\n" +
	"\vtoken_count\x18\x10 \x01(\x05R\n" +
	"tokenCount\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc0\x02\n" +
	"\x1aCreateKnowledgeBaseRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12'\n" +
	"\x0fembedding_model\x18\x04 \x01(\tR\x0eembeddingModel\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x05 \x01(\x05R\tchunkSize\x12#\n" +
	"\rchunk_overlap\x18\x06 \x01(\x05R\fchunkOverlap\x126\n" +
	"\x06config\x18\a \x01(\v2\x1e.api.ai.v1.KnowledgeBaseConfigR\x06config\x12\x12\n" +
	"\x04tags\x18\b \x03(\tR\x04tags\x12\x1a\n" +
	"\blanguage\x18\t \x01(\tR\blanguage\"[\n" +
	"\x18CreateKnowledgeBaseReply\x12?\n" +
	"\x0eknowledge_base\x18\x01 \x01(\v2\x18.api.ai.v1.KnowledgeBaseR\rknowledgeBase\"\xcd\x02\n" +
	"\x1aUpdateKnowledgeBaseRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12'\n" +
	"\x0fembedding_model\x18\x04 \x01(\tR\x0eembeddingModel\x12\x1d\n" +
	"\n" +
	"chunk_size\x18\x05 \x01(\x05R\tchunkSize\x12#\n" +
	"\rchunk_overlap\x18\x06 \x01(\x05R\fchunkOverlap\x126\n" +
	"\x06config\x18\a \x01(\v2\x1e.api.ai.v1.KnowledgeBaseConfigR\x06config\x12\x12\n" +
	"\x04tags\x18\b \x03(\tR\x04tags\x120\n" +
	"\x14reindex_after_update\x18\t \x01(\bR\x12reindexAfterUpdate\"[\n" +
	"\x18UpdateKnowledgeBaseReply\x12?\n" +
	"\x0eknowledge_base\x18\x01 \x01(\v2\x18.api.ai.v1.KnowledgeBaseR\rknowledgeBase\"M\n" +
	"\x1aDeleteKnowledgeBaseRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x1f\n" +
	"\vhard_delete\x18\x02 \x01(\bR\n" +
	"hardDelete\"\x1a\n" +
	"\x18DeleteKnowledgeBaseReply\"u\n" +
	"\x17GetKnowledgeBaseRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12#\n" +
	"\rinclude_stats\x18\x02 \x01(\bR\fincludeStats\x12%\n" +
	"\x0einclude_config\x18\x03 \x01(\bR\rincludeConfig\"X\n" +
	"\x15GetKnowledgeBaseReply\x12?\n" +
	"\x0eknowledge_base\x18\x01 \x01(\v2\x18.api.ai.v1.KnowledgeBaseR\rknowledgeBase\"\x81\x02\n" +
	"\x19ListKnowledgeBasesRequest\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x03R\x06userId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x18\n" +
	"\akeyword\x18\x04 \x01(\tR\akeyword\x126\n" +
	"\x06status\x18\x05 \x01(\x0e2\x1e.api.ai.v1.KnowledgeBaseStatusR\x06status\x12\x12\n" +
	"\x04tags\x18\x06 \x03(\tR\x04tags\x12\x17\n" +
	"\asort_by\x18\a \x01(\tR\x06sortBy\x12\x1b\n" +
	"\tsort_desc\x18\b \x01(\bR\bsortDesc\"\xa3\x01\n" +
	"\x17ListKnowledgeBasesReply\x12A\n" +
	"\x0fknowledge_bases\x18\x01 \x03(\v2\x18.api.ai.v1.KnowledgeBaseR\x0eknowledgeBases\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"\xfe\x01\n" +
	"\x15UploadDocumentRequest\x12*\n" +
	"\x11knowledge_base_id\x18\x01 \x01(\x03R\x0fknowledgeBaseId\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\acontent\x18\x03 \x01(\fR\acontent\x12\x1b\n" +
	"\tmime_type\x18\x04 \x01(\tR\bmimeType\x127\n" +
	"\bmetadata\x18\x05 \x01(\v2\x1b.api.ai.v1.DocumentMetadataR\bmetadata\x12\x12\n" +
	"\x04tags\x18\x06 \x03(\tR\x04tags\x12!\n" +
	"\fauto_process\x18\a \x01(\bR\vautoProcess\"F\n" +
	"\x13UploadDocumentReply\x12/\n" +
	"\bdocument\x18\x01 \x01(\v2\x13.api.ai.v1.DocumentR\bdocument\"\x82\x01\n" +
	"\x1bBatchUploadDocumentsRequest\x12*\n" +
	"\x11knowledge_base_id\x18\x01 \x01(\x03R\x0fknowledgeBaseId\x127\n" +
	"\tdocuments\x18\x02 \x03(\v2\x19.api.ai.v1.DocumentUploadR\tdocuments\"\xa8\x01\n" +
	"\x0eDocumentUpload\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\acontent\x18\x02 \x01(\fR\acontent\x12\x1b\n" +
	"\tmime_type\x18\x03 \x01(\tR\bmimeType\x127\n" +
	"\bmetadata\x18\x04 \x01(\v2\x1b.api.ai.v1.DocumentMetadataR\bmetadata\x12\x12\n" +
	"\x04tags\x18\x05 \x03(\tR\x04tags\"\xca\x01\n" +
	"\x19BatchUploadDocumentsReply\x121\n" +
	"\tdocuments\x18\x01 \x03(\v2\x13.api.ai.v1.DocumentR\tdocuments\x12#\n" +
	"\rsuccess_count\x18\x02 \x01(\x05R\fsuccessCount\x12!\n" +
	"\ffailed_count\x18\x03 \x01(\x05R\vfailedCount\x12\x16\n" +
	"\x06errors\x18\x04 \x03(\tR\x06errors\x12\x1a\n" +
	"\bprogress\x18\x05 \x01(\x01R\bprogress\"\xc0\x01\n" +
	"\x15UpdateDocumentRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x18\n" +
	"\acontent\x18\x03 \x01(\fR\acontent\x127\n" +
	"\bmetadata\x18\x04 \x01(\v2\x1b.api.ai.v1.DocumentMetadataR\bmetadata\x12\x12\n" +
	"\x04tags\x18\x05 \x03(\tR\x04tags\x12\x1c\n" +
	"\treprocess\x18\x06 \x01(\bR\treprocess\"F\n" +
	"\x13UpdateDocumentReply\x12/\n" +
	"\bdocument\x18\x01 \x01(\v2\x13.api.ai.v1.DocumentR\bdocument\"[\n" +
	"\x15DeleteDocumentRequest\x12!\n" +
	"\fdocument_ids\x18\x01 \x03(\x03R\vdocumentIds\x12\x1f\n" +
	"\vhard_delete\x18\x02 \x01(\bR\n" +
	"hardDelete\"\x15\n" +
	"\x13DeleteDocumentReply\"t\n" +
	"\x12GetDocumentRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12'\n" +
	"\x0finclude_content\x18\x02 \x01(\bR\x0eincludeContent\x12%\n" +
	"\x0einclude_chunks\x18\x03 \x01(\bR\rincludeChunks\"v\n" +
	"\x10GetDocumentReply\x12/\n" +
	"\bdocument\x18\x01 \x01(\v2\x13.api.ai.v1.DocumentR\bdocument\x121\n" +
	"\x06chunks\x18\x02 \x03(\v2\x19.api.ai.v1.KnowledgeChunkR\x06chunks\"\xa7\x02\n" +
	"\x14ListDocumentsRequest\x12*\n" +
	"\x11knowledge_base_id\x18\x01 \x01(\x03R\x0fknowledgeBaseId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x18\n" +
	"\akeyword\x18\x04 \x01(\tR\akeyword\x121\n" +
	"\x06status\x18\x05 \x01(\x0e2\x19.api.ai.v1.DocumentStatusR\x06status\x12\x12\n" +
	"\x04tags\x18\x06 \x03(\tR\x04tags\x12\x1b\n" +
	"\tmime_type\x18\a \x01(\tR\bmimeType\x12\x17\n" +
	"\asort_by\x18\b \x01(\tR\x06sortBy\x12\x1b\n" +
	"\tsort_desc\x18\t \x01(\bR\bsortDesc\"\x8e\x01\n" +
	"\x12ListDocumentsReply\x121\n" +
	"\tdocuments\x18\x01 \x03(\v2\x13.api.ai.v1.DocumentR\tdocuments\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"\xe8\x01\n" +
	"\x16ProcessDocumentRequest\x12\x1f\n" +
	"\vdocument_id\x18\x01 \x01(\x03R\n" +
	"documentId\x12'\n" +
	"\x0fforce_reprocess\x18\x02 \x01(\bR\x0eforceReprocess\x12H\n" +
	"\aoptions\x18\x03 \x03(\v2..api.ai.v1.ProcessDocumentRequest.OptionsEntryR\aoptions\x1a:\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"`\n" +
	"\x14ProcessDocumentReply\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\tR\x05jobId\x121\n" +
	"\x06status\x18\x02 \x01(\x0e2\x19.api.ai.v1.DocumentStatusR\x06status\"\xbf\x02\n" +
	"\x16SearchKnowledgeRequest\x12*\n" +
	"\x11knowledge_base_id\x18\x01 \x01(\x03R\x0fknowledgeBaseId\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x1c\n" +
	"\tthreshold\x18\x04 \x01(\x01R\tthreshold\x12H\n" +
	"\afilters\x18\x05 \x03(\v2..api.ai.v1.SearchKnowledgeRequest.FiltersEntryR\afilters\x12)\n" +
	"\x10include_metadata\x18\x06 \x01(\bR\x0fincludeMetadata\x1a:\n" +
	"\fFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xa8\x01\n" +
	"\x14SearchKnowledgeReply\x121\n" +
	"\x06chunks\x18\x01 \x03(\v2\x19.api.ai.v1.KnowledgeChunkR\x06chunks\x12\x1b\n" +
	"\tmax_score\x18\x02 \x01(\x01R\bmaxScore\x12\x1b\n" +
	"\tmin_score\x18\x03 \x01(\x01R\bminScore\x12#\n" +
	"\rtotal_results\x18\x04 \x01(\x05R\ftotalResults\"\xde\x02\n" +
	"\x13HybridSearchRequest\x12*\n" +
	"\x11knowledge_base_id\x18\x01 \x01(\x03R\x0fknowledgeBaseId\x12\x14\n" +
	"\x05query\x18\x02 \x01(\tR\x05query\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12'\n" +
	"\x0fsemantic_weight\x18\x04 \x01(\x01R\x0esemanticWeight\x12%\n" +
	"\x0ekeyword_weight\x18\x05 \x01(\x01R\rkeywordWeight\x12\x1c\n" +
	"\tthreshold\x18\x06 \x01(\x01R\tthreshold\x12E\n" +
	"\afilters\x18\a \x03(\v2+.api.ai.v1.HybridSearchRequest.FiltersEntryR\afilters\x1a:\n" +
	"\fFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x8e\x01\n" +
	"\x11HybridSearchReply\x127\n" +
	"\aresults\x18\x01 \x03(\v2\x1d.api.ai.v1.HybridSearchResultR\aresults\x12\x1b\n" +
	"\tmax_score\x18\x02 \x01(\x01R\bmaxScore\x12#\n" +
	"\rtotal_results\x18\x03 \x01(\x05R\ftotalResults\"\xb8\x01\n" +
	"\x12HybridSearchResult\x12/\n" +
	"\x05chunk\x18\x01 \x01(\v2\x19.api.ai.v1.KnowledgeChunkR\x05chunk\x12%\n" +
	"\x0esemantic_score\x18\x02 \x01(\x01R\rsemanticScore\x12#\n" +
	"\rkeyword_score\x18\x03 \x01(\x01R\fkeywordScore\x12%\n" +
	"\x0ecombined_score\x18\x04 \x01(\x01R\rcombinedScore\"\xcf\x02\n" +
	"\x15AdvancedSearchRequest\x12*\n" +
	"\x11knowledge_base_id\x18\x01 \x01(\x03R\x0fknowledgeBaseId\x12,\n" +
	"\x05query\x18\x02 \x01(\v2\x16.api.ai.v1.SearchQueryR\x05query\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x04 \x01(\x05R\x06offset\x12)\n" +
	"\x04sort\x18\x05 \x03(\v2\x15.api.ai.v1.SearchSortR\x04sort\x12G\n" +
	"\afilters\x18\x06 \x03(\v2-.api.ai.v1.AdvancedSearchRequest.FiltersEntryR\afilters\x1a:\n" +
	"\fFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc8\x01\n" +
	"\vSearchQuery\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12)\n" +
	"\x04mode\x18\x02 \x01(\x0e2\x15.api.ai.v1.SearchModeR\x04mode\x12\x1a\n" +
	"\bkeywords\x18\x03 \x03(\tR\bkeywords\x12)\n" +
	"\x10exclude_keywords\x18\x04 \x03(\tR\x0fexcludeKeywords\x123\n" +
	"\n" +
	"date_range\x18\x05 \x01(\v2\x14.api.ai.v1.DateRangeR\tdateRange\"k\n" +
	"\tDateRange\x120\n" +
	"\x05start\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\x05start\x12,\n" +
	"\x03end\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x03end\"6\n" +
	"\n" +
	"SearchSort\x12\x14\n" +
	"\x05field\x18\x01 \x01(\tR\x05field\x12\x12\n" +
	"\x04desc\x18\x02 \x01(\bR\x04desc\"\xe8\x01\n" +
	"\x13AdvancedSearchReply\x121\n" +
	"\x06chunks\x18\x01 \x03(\v2\x19.api.ai.v1.KnowledgeChunkR\x06chunks\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x03R\n" +
	"totalCount\x12B\n" +
	"\x06facets\x18\x03 \x03(\v2*.api.ai.v1.AdvancedSearchReply.FacetsEntryR\x06facets\x1a9\n" +
	"\vFacetsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"W\n" +
	"\x18GetKnowledgeChunkRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12+\n" +
	"\x11include_embedding\x18\x02 \x01(\bR\x10includeEmbedding\"I\n" +
	"\x16GetKnowledgeChunkReply\x12/\n" +
	"\x05chunk\x18\x01 \x01(\v2\x19.api.ai.v1.KnowledgeChunkR\x05chunk\"\xf2\x01\n" +
	"\x1bUpdateKnowledgeChunkRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\x12P\n" +
	"\bmetadata\x18\x03 \x03(\v24.api.ai.v1.UpdateKnowledgeChunkRequest.MetadataEntryR\bmetadata\x12\x1a\n" +
	"\bkeywords\x18\x04 \x03(\tR\bkeywords\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"L\n" +
	"\x19UpdateKnowledgeChunkReply\x12/\n" +
	"\x05chunk\x18\x01 \x01(\v2\x19.api.ai.v1.KnowledgeChunkR\x05chunk\"\xa3\x01\n" +
	"\x1aListKnowledgeChunksRequest\x12\x1f\n" +
	"\vdocument_id\x18\x01 \x01(\x03R\n" +
	"documentId\x12\x12\n" +
	"\x04page\x18\x02 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x123\n" +
	"\n" +
	"chunk_type\x18\x04 \x01(\x0e2\x14.api.ai.v1.ChunkTypeR\tchunkType\"\x94\x01\n" +
	"\x18ListKnowledgeChunksReply\x121\n" +
	"\x06chunks\x18\x01 \x03(\v2\x19.api.ai.v1.KnowledgeChunkR\x06chunks\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x03R\x05total\x12\x12\n" +
	"\x04page\x18\x03 \x01(\x05R\x04page\x12\x1b\n" +
	"\tpage_size\x18\x04 \x01(\x05R\bpageSize\"R\n" +
	"\x1bReindexKnowledgeBaseRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12#\n" +
	"\rforce_reindex\x18\x02 \x01(\bR\fforceReindex\"J\n" +
	"\x19ReindexKnowledgeBaseReply\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\tR\x05jobId\x12\x16\n" +
	"\x06status\x18\x02 \x01(\tR\x06status\"Y\n" +
	"\x1cGetKnowledgeBaseStatsRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12)\n" +
	"\x10include_detailed\x18\x02 \x01(\bR\x0fincludeDetailed\"\x88\x02\n" +
	"\x1aGetKnowledgeBaseStatsReply\x123\n" +
	"\x05stats\x18\x01 \x01(\v2\x1d.api.ai.v1.KnowledgeBaseStatsR\x05stats\x12n\n" +
	"\x13performance_metrics\x18\x02 \x03(\v2=.api.ai.v1.GetKnowledgeBaseStatsReply.PerformanceMetricsEntryR\x12performanceMetrics\x1aE\n" +
	"\x17PerformanceMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\"m\n" +
	"\x1bAnalyzeKnowledgeBaseRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\x12>\n" +
	"\x0eanalysis_types\x18\x02 \x03(\x0e2\x17.api.ai.v1.AnalysisTypeR\ranalysisTypes\"P\n" +
	"\x19AnalyzeKnowledgeBaseReply\x123\n" +
	"\aresults\x18\x01 \x03(\v2\x19.api.ai.v1.AnalysisResultR\aresults\"\xbe\x02\n" +
	"\x0eAnalysisResult\x12+\n" +
	"\x04type\x18\x01 \x01(\x0e2\x17.api.ai.v1.AnalysisTypeR\x04type\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\x12@\n" +
	"\ametrics\x18\x04 \x03(\v2&.api.ai.v1.AnalysisResult.MetricsEntryR\ametrics\x12\x1a\n" +
	"\binsights\x18\x05 \x03(\tR\binsights\x12-\n" +
	"\x12visualization_data\x18\x06 \x01(\fR\x11visualizationData\x1a:\n" +
	"\fMetricsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01*\xea\x01\n" +
	"\x13KnowledgeBaseStatus\x12%\n" +
	"!KNOWLEDGE_BASE_STATUS_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cKNOWLEDGE_BASE_STATUS_ACTIVE\x10\x01\x12\"\n" +
	"\x1eKNOWLEDGE_BASE_STATUS_INDEXING\x10\x02\x12\x1f\n" +
	"\x1bKNOWLEDGE_BASE_STATUS_ERROR\x10\x03\x12\"\n" +
	"\x1eKNOWLEDGE_BASE_STATUS_ARCHIVED\x10\x04\x12!\n" +
	"\x1dKNOWLEDGE_BASE_STATUS_DELETED\x10\x05*\xd9\x01\n" +
	"\x10ChunkingStrategy\x12!\n" +
	"\x1dCHUNKING_STRATEGY_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cCHUNKING_STRATEGY_FIXED_SIZE\x10\x01\x12\x1f\n" +
	"\x1bCHUNKING_STRATEGY_RECURSIVE\x10\x02\x12\x1e\n" +
	"\x1aCHUNKING_STRATEGY_SEMANTIC\x10\x03\x12\x1f\n" +
	"\x1bCHUNKING_STRATEGY_PARAGRAPH\x10\x04\x12\x1e\n" +
	"\x1aCHUNKING_STRATEGY_SENTENCE\x10\x05*\xe5\x01\n" +
	"\x0eDocumentStatus\x12\x1f\n" +
	"\x1bDOCUMENT_STATUS_UNSPECIFIED\x10\x00\x12\x1c\n" +
	"\x18DOCUMENT_STATUS_UPLOADED\x10\x01\x12\x1e\n" +
	"\x1aDOCUMENT_STATUS_PROCESSING\x10\x02\x12\x1d\n" +
	"\x19DOCUMENT_STATUS_PROCESSED\x10\x03\x12\x1a\n" +
	"\x16DOCUMENT_STATUS_FAILED\x10\x04\x12\x1c\n" +
	"\x18DOCUMENT_STATUS_ARCHIVED\x10\x05\x12\x1b\n" +
	"\x17DOCUMENT_STATUS_DELETED\x10\x06*\xac\x01\n" +
	"\tChunkType\x12\x1a\n" +
	"\x16CHUNK_TYPE_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fCHUNK_TYPE_TEXT\x10\x01\x12\x14\n" +
	"\x10CHUNK_TYPE_TITLE\x10\x02\x12\x18\n" +
	"\x14CHUNK_TYPE_PARAGRAPH\x10\x03\x12\x13\n" +
	"\x0fCHUNK_TYPE_LIST\x10\x04\x12\x14\n" +
	"\x10CHUNK_TYPE_TABLE\x10\x05\x12\x13\n" +
	"\x0fCHUNK_TYPE_CODE\x10\x06*\x8b\x01\n" +
	"\n" +
	"SearchMode\x12\x1b\n" +
	"\x17SEARCH_MODE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14SEARCH_MODE_SEMANTIC\x10\x01\x12\x17\n" +
	"\x13SEARCH_MODE_KEYWORD\x10\x02\x12\x16\n" +
	"\x12SEARCH_MODE_HYBRID\x10\x03\x12\x15\n" +
	"\x11SEARCH_MODE_EXACT\x10\x04*\xc4\x01\n" +
	"\fAnalysisType\x12\x1d\n" +
	"\x19ANALYSIS_TYPE_UNSPECIFIED\x10\x00\x12&\n" +
	"\"ANALYSIS_TYPE_CONTENT_DISTRIBUTION\x10\x01\x12 \n" +
	"\x1cANALYSIS_TYPE_TOPIC_MODELING\x10\x02\x12%\n" +
	"!ANALYSIS_TYPE_SIMILARITY_ANALYSIS\x10\x03\x12$\n" +
	" ANALYSIS_TYPE_QUALITY_ASSESSMENT\x10\x042\x9b\x0f\n" +
	"\tKnowledge\x12a\n" +
	"\x13CreateKnowledgeBase\x12%.api.ai.v1.CreateKnowledgeBaseRequest\x1a#.api.ai.v1.CreateKnowledgeBaseReply\x12a\n" +
	"\x13UpdateKnowledgeBase\x12%.api.ai.v1.UpdateKnowledgeBaseRequest\x1a#.api.ai.v1.UpdateKnowledgeBaseReply\x12a\n" +
	"\x13DeleteKnowledgeBase\x12%.api.ai.v1.DeleteKnowledgeBaseRequest\x1a#.api.ai.v1.DeleteKnowledgeBaseReply\x12^\n" +
	"\x12ListKnowledgeBases\x12$.api.ai.v1.ListKnowledgeBasesRequest\x1a\".api.ai.v1.ListKnowledgeBasesReply\x12X\n" +
	"\x10GetKnowledgeBase\x12\".api.ai.v1.GetKnowledgeBaseRequest\x1a .api.ai.v1.GetKnowledgeBaseReply\x12R\n" +
	"\x0eUploadDocument\x12 .api.ai.v1.UploadDocumentRequest\x1a\x1e.api.ai.v1.UploadDocumentReply\x12h\n" +
	"\x14BatchUploadDocuments\x12&.api.ai.v1.BatchUploadDocumentsRequest\x1a$.api.ai.v1.BatchUploadDocumentsReply(\x010\x01\x12R\n" +
	"\x0eUpdateDocument\x12 .api.ai.v1.UpdateDocumentRequest\x1a\x1e.api.ai.v1.UpdateDocumentReply\x12R\n" +
	"\x0eDeleteDocument\x12 .api.ai.v1.DeleteDocumentRequest\x1a\x1e.api.ai.v1.DeleteDocumentReply\x12O\n" +
	"\rListDocuments\x12\x1f.api.ai.v1.ListDocumentsRequest\x1a\x1d.api.ai.v1.ListDocumentsReply\x12I\n" +
	"\vGetDocument\x12\x1d.api.ai.v1.GetDocumentRequest\x1a\x1b.api.ai.v1.GetDocumentReply\x12U\n" +
	"\x0fProcessDocument\x12!.api.ai.v1.ProcessDocumentRequest\x1a\x1f.api.ai.v1.ProcessDocumentReply\x12U\n" +
	"\x0fSearchKnowledge\x12!.api.ai.v1.SearchKnowledgeRequest\x1a\x1f.api.ai.v1.SearchKnowledgeReply\x12L\n" +
	"\fHybridSearch\x12\x1e.api.ai.v1.HybridSearchRequest\x1a\x1c.api.ai.v1.HybridSearchReply\x12R\n" +
	"\x0eAdvancedSearch\x12 .api.ai.v1.AdvancedSearchRequest\x1a\x1e.api.ai.v1.AdvancedSearchReply\x12[\n" +
	"\x11GetKnowledgeChunk\x12#.api.ai.v1.GetKnowledgeChunkRequest\x1a!.api.ai.v1.GetKnowledgeChunkReply\x12d\n" +
	"\x14UpdateKnowledgeChunk\x12&.api.ai.v1.UpdateKnowledgeChunkRequest\x1a$.api.ai.v1.UpdateKnowledgeChunkReply\x12a\n" +
	"\x13ListKnowledgeChunks\x12%.api.ai.v1.ListKnowledgeChunksRequest\x1a#.api.ai.v1.ListKnowledgeChunksReply\x12d\n" +
	"\x14ReindexKnowledgeBase\x12&.api.ai.v1.ReindexKnowledgeBaseRequest\x1a$.api.ai.v1.ReindexKnowledgeBaseReply\x12g\n" +
	"\x15GetKnowledgeBaseStats\x12'.api.ai.v1.GetKnowledgeBaseStatsRequest\x1a%.api.ai.v1.GetKnowledgeBaseStatsReply\x12d\n" +
	"\x14AnalyzeKnowledgeBase\x12&.api.ai.v1.AnalyzeKnowledgeBaseRequest\x1a$.api.ai.v1.AnalyzeKnowledgeBaseReplyBL\n" +
	"\x1ecom.oldwei.universal.api.ai.v1B\x10KnowledgeProtoV1P\x01Z\x16universal/api/ai/v1;v1b\x06proto3"

var (
	file_api_ai_v1_knowledge_proto_rawDescOnce sync.Once
	file_api_ai_v1_knowledge_proto_rawDescData []byte
)

func file_api_ai_v1_knowledge_proto_rawDescGZIP() []byte {
	file_api_ai_v1_knowledge_proto_rawDescOnce.Do(func() {
		file_api_ai_v1_knowledge_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_ai_v1_knowledge_proto_rawDesc), len(file_api_ai_v1_knowledge_proto_rawDesc)))
	})
	return file_api_ai_v1_knowledge_proto_rawDescData
}

var file_api_ai_v1_knowledge_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_api_ai_v1_knowledge_proto_msgTypes = make([]protoimpl.MessageInfo, 67)
var file_api_ai_v1_knowledge_proto_goTypes = []any{
	(KnowledgeBaseStatus)(0),             // 0: api.ai.v1.KnowledgeBaseStatus
	(ChunkingStrategy)(0),                // 1: api.ai.v1.ChunkingStrategy
	(DocumentStatus)(0),                  // 2: api.ai.v1.DocumentStatus
	(ChunkType)(0),                       // 3: api.ai.v1.ChunkType
	(SearchMode)(0),                      // 4: api.ai.v1.SearchMode
	(AnalysisType)(0),                    // 5: api.ai.v1.AnalysisType
	(*KnowledgeBase)(nil),                // 6: api.ai.v1.KnowledgeBase
	(*KnowledgeBaseConfig)(nil),          // 7: api.ai.v1.KnowledgeBaseConfig
	(*KnowledgeBaseStats)(nil),           // 8: api.ai.v1.KnowledgeBaseStats
	(*Document)(nil),                     // 9: api.ai.v1.Document
	(*DocumentMetadata)(nil),             // 10: api.ai.v1.DocumentMetadata
	(*KnowledgeChunk)(nil),               // 11: api.ai.v1.KnowledgeChunk
	(*CreateKnowledgeBaseRequest)(nil),   // 12: api.ai.v1.CreateKnowledgeBaseRequest
	(*CreateKnowledgeBaseReply)(nil),     // 13: api.ai.v1.CreateKnowledgeBaseReply
	(*UpdateKnowledgeBaseRequest)(nil),   // 14: api.ai.v1.UpdateKnowledgeBaseRequest
	(*UpdateKnowledgeBaseReply)(nil),     // 15: api.ai.v1.UpdateKnowledgeBaseReply
	(*DeleteKnowledgeBaseRequest)(nil),   // 16: api.ai.v1.DeleteKnowledgeBaseRequest
	(*DeleteKnowledgeBaseReply)(nil),     // 17: api.ai.v1.DeleteKnowledgeBaseReply
	(*GetKnowledgeBaseRequest)(nil),      // 18: api.ai.v1.GetKnowledgeBaseRequest
	(*GetKnowledgeBaseReply)(nil),        // 19: api.ai.v1.GetKnowledgeBaseReply
	(*ListKnowledgeBasesRequest)(nil),    // 20: api.ai.v1.ListKnowledgeBasesRequest
	(*ListKnowledgeBasesReply)(nil),      // 21: api.ai.v1.ListKnowledgeBasesReply
	(*UploadDocumentRequest)(nil),        // 22: api.ai.v1.UploadDocumentRequest
	(*UploadDocumentReply)(nil),          // 23: api.ai.v1.UploadDocumentReply
	(*BatchUploadDocumentsRequest)(nil),  // 24: api.ai.v1.BatchUploadDocumentsRequest
	(*DocumentUpload)(nil),               // 25: api.ai.v1.DocumentUpload
	(*BatchUploadDocumentsReply)(nil),    // 26: api.ai.v1.BatchUploadDocumentsReply
	(*UpdateDocumentRequest)(nil),        // 27: api.ai.v1.UpdateDocumentRequest
	(*UpdateDocumentReply)(nil),          // 28: api.ai.v1.UpdateDocumentReply
	(*DeleteDocumentRequest)(nil),        // 29: api.ai.v1.DeleteDocumentRequest
	(*DeleteDocumentReply)(nil),          // 30: api.ai.v1.DeleteDocumentReply
	(*GetDocumentRequest)(nil),           // 31: api.ai.v1.GetDocumentRequest
	(*GetDocumentReply)(nil),             // 32: api.ai.v1.GetDocumentReply
	(*ListDocumentsRequest)(nil),         // 33: api.ai.v1.ListDocumentsRequest
	(*ListDocumentsReply)(nil),           // 34: api.ai.v1.ListDocumentsReply
	(*ProcessDocumentRequest)(nil),       // 35: api.ai.v1.ProcessDocumentRequest
	(*ProcessDocumentReply)(nil),         // 36: api.ai.v1.ProcessDocumentReply
	(*SearchKnowledgeRequest)(nil),       // 37: api.ai.v1.SearchKnowledgeRequest
	(*SearchKnowledgeReply)(nil),         // 38: api.ai.v1.SearchKnowledgeReply
	(*HybridSearchRequest)(nil),          // 39: api.ai.v1.HybridSearchRequest
	(*HybridSearchReply)(nil),            // 40: api.ai.v1.HybridSearchReply
	(*HybridSearchResult)(nil),           // 41: api.ai.v1.HybridSearchResult
	(*AdvancedSearchRequest)(nil),        // 42: api.ai.v1.AdvancedSearchRequest
	(*SearchQuery)(nil),                  // 43: api.ai.v1.SearchQuery
	(*DateRange)(nil),                    // 44: api.ai.v1.DateRange
	(*SearchSort)(nil),                   // 45: api.ai.v1.SearchSort
	(*AdvancedSearchReply)(nil),          // 46: api.ai.v1.AdvancedSearchReply
	(*GetKnowledgeChunkRequest)(nil),     // 47: api.ai.v1.GetKnowledgeChunkRequest
	(*GetKnowledgeChunkReply)(nil),       // 48: api.ai.v1.GetKnowledgeChunkReply
	(*UpdateKnowledgeChunkRequest)(nil),  // 49: api.ai.v1.UpdateKnowledgeChunkRequest
	(*UpdateKnowledgeChunkReply)(nil),    // 50: api.ai.v1.UpdateKnowledgeChunkReply
	(*ListKnowledgeChunksRequest)(nil),   // 51: api.ai.v1.ListKnowledgeChunksRequest
	(*ListKnowledgeChunksReply)(nil),     // 52: api.ai.v1.ListKnowledgeChunksReply
	(*ReindexKnowledgeBaseRequest)(nil),  // 53: api.ai.v1.ReindexKnowledgeBaseRequest
	(*ReindexKnowledgeBaseReply)(nil),    // 54: api.ai.v1.ReindexKnowledgeBaseReply
	(*GetKnowledgeBaseStatsRequest)(nil), // 55: api.ai.v1.GetKnowledgeBaseStatsRequest
	(*GetKnowledgeBaseStatsReply)(nil),   // 56: api.ai.v1.GetKnowledgeBaseStatsReply
	(*AnalyzeKnowledgeBaseRequest)(nil),  // 57: api.ai.v1.AnalyzeKnowledgeBaseRequest
	(*AnalyzeKnowledgeBaseReply)(nil),    // 58: api.ai.v1.AnalyzeKnowledgeBaseReply
	(*AnalysisResult)(nil),               // 59: api.ai.v1.AnalysisResult
	nil,                                  // 60: api.ai.v1.KnowledgeBaseConfig.AdvancedOptionsEntry
	nil,                                  // 61: api.ai.v1.KnowledgeBaseStats.FileTypeDistributionEntry
	nil,                                  // 62: api.ai.v1.KnowledgeBaseStats.LanguageDistributionEntry
	nil,                                  // 63: api.ai.v1.DocumentMetadata.CustomFieldsEntry
	nil,                                  // 64: api.ai.v1.KnowledgeChunk.MetadataEntry
	nil,                                  // 65: api.ai.v1.ProcessDocumentRequest.OptionsEntry
	nil,                                  // 66: api.ai.v1.SearchKnowledgeRequest.FiltersEntry
	nil,                                  // 67: api.ai.v1.HybridSearchRequest.FiltersEntry
	nil,                                  // 68: api.ai.v1.AdvancedSearchRequest.FiltersEntry
	nil,                                  // 69: api.ai.v1.AdvancedSearchReply.FacetsEntry
	nil,                                  // 70: api.ai.v1.UpdateKnowledgeChunkRequest.MetadataEntry
	nil,                                  // 71: api.ai.v1.GetKnowledgeBaseStatsReply.PerformanceMetricsEntry
	nil,                                  // 72: api.ai.v1.AnalysisResult.MetricsEntry
	(*timestamppb.Timestamp)(nil),        // 73: google.protobuf.Timestamp
}
var file_api_ai_v1_knowledge_proto_depIdxs = []int32{
	0,  // 0: api.ai.v1.KnowledgeBase.status:type_name -> api.ai.v1.KnowledgeBaseStatus
	73, // 1: api.ai.v1.KnowledgeBase.created_at:type_name -> google.protobuf.Timestamp
	73, // 2: api.ai.v1.KnowledgeBase.updated_at:type_name -> google.protobuf.Timestamp
	7,  // 3: api.ai.v1.KnowledgeBase.config:type_name -> api.ai.v1.KnowledgeBaseConfig
	8,  // 4: api.ai.v1.KnowledgeBase.stats:type_name -> api.ai.v1.KnowledgeBaseStats
	73, // 5: api.ai.v1.KnowledgeBase.last_indexed_at:type_name -> google.protobuf.Timestamp
	1,  // 6: api.ai.v1.KnowledgeBaseConfig.chunking_strategy:type_name -> api.ai.v1.ChunkingStrategy
	60, // 7: api.ai.v1.KnowledgeBaseConfig.advanced_options:type_name -> api.ai.v1.KnowledgeBaseConfig.AdvancedOptionsEntry
	61, // 8: api.ai.v1.KnowledgeBaseStats.file_type_distribution:type_name -> api.ai.v1.KnowledgeBaseStats.FileTypeDistributionEntry
	62, // 9: api.ai.v1.KnowledgeBaseStats.language_distribution:type_name -> api.ai.v1.KnowledgeBaseStats.LanguageDistributionEntry
	73, // 10: api.ai.v1.KnowledgeBaseStats.last_updated:type_name -> google.protobuf.Timestamp
	2,  // 11: api.ai.v1.Document.status:type_name -> api.ai.v1.DocumentStatus
	73, // 12: api.ai.v1.Document.created_at:type_name -> google.protobuf.Timestamp
	73, // 13: api.ai.v1.Document.updated_at:type_name -> google.protobuf.Timestamp
	10, // 14: api.ai.v1.Document.metadata:type_name -> api.ai.v1.DocumentMetadata
	73, // 15: api.ai.v1.Document.last_processed_at:type_name -> google.protobuf.Timestamp
	73, // 16: api.ai.v1.DocumentMetadata.created_date:type_name -> google.protobuf.Timestamp
	73, // 17: api.ai.v1.DocumentMetadata.modified_date:type_name -> google.protobuf.Timestamp
	63, // 18: api.ai.v1.DocumentMetadata.custom_fields:type_name -> api.ai.v1.DocumentMetadata.CustomFieldsEntry
	64, // 19: api.ai.v1.KnowledgeChunk.metadata:type_name -> api.ai.v1.KnowledgeChunk.MetadataEntry
	3,  // 20: api.ai.v1.KnowledgeChunk.chunk_type:type_name -> api.ai.v1.ChunkType
	73, // 21: api.ai.v1.KnowledgeChunk.created_at:type_name -> google.protobuf.Timestamp
	7,  // 22: api.ai.v1.CreateKnowledgeBaseRequest.config:type_name -> api.ai.v1.KnowledgeBaseConfig
	6,  // 23: api.ai.v1.CreateKnowledgeBaseReply.knowledge_base:type_name -> api.ai.v1.KnowledgeBase
	7,  // 24: api.ai.v1.UpdateKnowledgeBaseRequest.config:type_name -> api.ai.v1.KnowledgeBaseConfig
	6,  // 25: api.ai.v1.UpdateKnowledgeBaseReply.knowledge_base:type_name -> api.ai.v1.KnowledgeBase
	6,  // 26: api.ai.v1.GetKnowledgeBaseReply.knowledge_base:type_name -> api.ai.v1.KnowledgeBase
	0,  // 27: api.ai.v1.ListKnowledgeBasesRequest.status:type_name -> api.ai.v1.KnowledgeBaseStatus
	6,  // 28: api.ai.v1.ListKnowledgeBasesReply.knowledge_bases:type_name -> api.ai.v1.KnowledgeBase
	10, // 29: api.ai.v1.UploadDocumentRequest.metadata:type_name -> api.ai.v1.DocumentMetadata
	9,  // 30: api.ai.v1.UploadDocumentReply.document:type_name -> api.ai.v1.Document
	25, // 31: api.ai.v1.BatchUploadDocumentsRequest.documents:type_name -> api.ai.v1.DocumentUpload
	10, // 32: api.ai.v1.DocumentUpload.metadata:type_name -> api.ai.v1.DocumentMetadata
	9,  // 33: api.ai.v1.BatchUploadDocumentsReply.documents:type_name -> api.ai.v1.Document
	10, // 34: api.ai.v1.UpdateDocumentRequest.metadata:type_name -> api.ai.v1.DocumentMetadata
	9,  // 35: api.ai.v1.UpdateDocumentReply.document:type_name -> api.ai.v1.Document
	9,  // 36: api.ai.v1.GetDocumentReply.document:type_name -> api.ai.v1.Document
	11, // 37: api.ai.v1.GetDocumentReply.chunks:type_name -> api.ai.v1.KnowledgeChunk
	2,  // 38: api.ai.v1.ListDocumentsRequest.status:type_name -> api.ai.v1.DocumentStatus
	9,  // 39: api.ai.v1.ListDocumentsReply.documents:type_name -> api.ai.v1.Document
	65, // 40: api.ai.v1.ProcessDocumentRequest.options:type_name -> api.ai.v1.ProcessDocumentRequest.OptionsEntry
	2,  // 41: api.ai.v1.ProcessDocumentReply.status:type_name -> api.ai.v1.DocumentStatus
	66, // 42: api.ai.v1.SearchKnowledgeRequest.filters:type_name -> api.ai.v1.SearchKnowledgeRequest.FiltersEntry
	11, // 43: api.ai.v1.SearchKnowledgeReply.chunks:type_name -> api.ai.v1.KnowledgeChunk
	67, // 44: api.ai.v1.HybridSearchRequest.filters:type_name -> api.ai.v1.HybridSearchRequest.FiltersEntry
	41, // 45: api.ai.v1.HybridSearchReply.results:type_name -> api.ai.v1.HybridSearchResult
	11, // 46: api.ai.v1.HybridSearchResult.chunk:type_name -> api.ai.v1.KnowledgeChunk
	43, // 47: api.ai.v1.AdvancedSearchRequest.query:type_name -> api.ai.v1.SearchQuery
	45, // 48: api.ai.v1.AdvancedSearchRequest.sort:type_name -> api.ai.v1.SearchSort
	68, // 49: api.ai.v1.AdvancedSearchRequest.filters:type_name -> api.ai.v1.AdvancedSearchRequest.FiltersEntry
	4,  // 50: api.ai.v1.SearchQuery.mode:type_name -> api.ai.v1.SearchMode
	44, // 51: api.ai.v1.SearchQuery.date_range:type_name -> api.ai.v1.DateRange
	73, // 52: api.ai.v1.DateRange.start:type_name -> google.protobuf.Timestamp
	73, // 53: api.ai.v1.DateRange.end:type_name -> google.protobuf.Timestamp
	11, // 54: api.ai.v1.AdvancedSearchReply.chunks:type_name -> api.ai.v1.KnowledgeChunk
	69, // 55: api.ai.v1.AdvancedSearchReply.facets:type_name -> api.ai.v1.AdvancedSearchReply.FacetsEntry
	11, // 56: api.ai.v1.GetKnowledgeChunkReply.chunk:type_name -> api.ai.v1.KnowledgeChunk
	70, // 57: api.ai.v1.UpdateKnowledgeChunkRequest.metadata:type_name -> api.ai.v1.UpdateKnowledgeChunkRequest.MetadataEntry
	11, // 58: api.ai.v1.UpdateKnowledgeChunkReply.chunk:type_name -> api.ai.v1.KnowledgeChunk
	3,  // 59: api.ai.v1.ListKnowledgeChunksRequest.chunk_type:type_name -> api.ai.v1.ChunkType
	11, // 60: api.ai.v1.ListKnowledgeChunksReply.chunks:type_name -> api.ai.v1.KnowledgeChunk
	8,  // 61: api.ai.v1.GetKnowledgeBaseStatsReply.stats:type_name -> api.ai.v1.KnowledgeBaseStats
	71, // 62: api.ai.v1.GetKnowledgeBaseStatsReply.performance_metrics:type_name -> api.ai.v1.GetKnowledgeBaseStatsReply.PerformanceMetricsEntry
	5,  // 63: api.ai.v1.AnalyzeKnowledgeBaseRequest.analysis_types:type_name -> api.ai.v1.AnalysisType
	59, // 64: api.ai.v1.AnalyzeKnowledgeBaseReply.results:type_name -> api.ai.v1.AnalysisResult
	5,  // 65: api.ai.v1.AnalysisResult.type:type_name -> api.ai.v1.AnalysisType
	72, // 66: api.ai.v1.AnalysisResult.metrics:type_name -> api.ai.v1.AnalysisResult.MetricsEntry
	12, // 67: api.ai.v1.Knowledge.CreateKnowledgeBase:input_type -> api.ai.v1.CreateKnowledgeBaseRequest
	14, // 68: api.ai.v1.Knowledge.UpdateKnowledgeBase:input_type -> api.ai.v1.UpdateKnowledgeBaseRequest
	16, // 69: api.ai.v1.Knowledge.DeleteKnowledgeBase:input_type -> api.ai.v1.DeleteKnowledgeBaseRequest
	20, // 70: api.ai.v1.Knowledge.ListKnowledgeBases:input_type -> api.ai.v1.ListKnowledgeBasesRequest
	18, // 71: api.ai.v1.Knowledge.GetKnowledgeBase:input_type -> api.ai.v1.GetKnowledgeBaseRequest
	22, // 72: api.ai.v1.Knowledge.UploadDocument:input_type -> api.ai.v1.UploadDocumentRequest
	24, // 73: api.ai.v1.Knowledge.BatchUploadDocuments:input_type -> api.ai.v1.BatchUploadDocumentsRequest
	27, // 74: api.ai.v1.Knowledge.UpdateDocument:input_type -> api.ai.v1.UpdateDocumentRequest
	29, // 75: api.ai.v1.Knowledge.DeleteDocument:input_type -> api.ai.v1.DeleteDocumentRequest
	33, // 76: api.ai.v1.Knowledge.ListDocuments:input_type -> api.ai.v1.ListDocumentsRequest
	31, // 77: api.ai.v1.Knowledge.GetDocument:input_type -> api.ai.v1.GetDocumentRequest
	35, // 78: api.ai.v1.Knowledge.ProcessDocument:input_type -> api.ai.v1.ProcessDocumentRequest
	37, // 79: api.ai.v1.Knowledge.SearchKnowledge:input_type -> api.ai.v1.SearchKnowledgeRequest
	39, // 80: api.ai.v1.Knowledge.HybridSearch:input_type -> api.ai.v1.HybridSearchRequest
	42, // 81: api.ai.v1.Knowledge.AdvancedSearch:input_type -> api.ai.v1.AdvancedSearchRequest
	47, // 82: api.ai.v1.Knowledge.GetKnowledgeChunk:input_type -> api.ai.v1.GetKnowledgeChunkRequest
	49, // 83: api.ai.v1.Knowledge.UpdateKnowledgeChunk:input_type -> api.ai.v1.UpdateKnowledgeChunkRequest
	51, // 84: api.ai.v1.Knowledge.ListKnowledgeChunks:input_type -> api.ai.v1.ListKnowledgeChunksRequest
	53, // 85: api.ai.v1.Knowledge.ReindexKnowledgeBase:input_type -> api.ai.v1.ReindexKnowledgeBaseRequest
	55, // 86: api.ai.v1.Knowledge.GetKnowledgeBaseStats:input_type -> api.ai.v1.GetKnowledgeBaseStatsRequest
	57, // 87: api.ai.v1.Knowledge.AnalyzeKnowledgeBase:input_type -> api.ai.v1.AnalyzeKnowledgeBaseRequest
	13, // 88: api.ai.v1.Knowledge.CreateKnowledgeBase:output_type -> api.ai.v1.CreateKnowledgeBaseReply
	15, // 89: api.ai.v1.Knowledge.UpdateKnowledgeBase:output_type -> api.ai.v1.UpdateKnowledgeBaseReply
	17, // 90: api.ai.v1.Knowledge.DeleteKnowledgeBase:output_type -> api.ai.v1.DeleteKnowledgeBaseReply
	21, // 91: api.ai.v1.Knowledge.ListKnowledgeBases:output_type -> api.ai.v1.ListKnowledgeBasesReply
	19, // 92: api.ai.v1.Knowledge.GetKnowledgeBase:output_type -> api.ai.v1.GetKnowledgeBaseReply
	23, // 93: api.ai.v1.Knowledge.UploadDocument:output_type -> api.ai.v1.UploadDocumentReply
	26, // 94: api.ai.v1.Knowledge.BatchUploadDocuments:output_type -> api.ai.v1.BatchUploadDocumentsReply
	28, // 95: api.ai.v1.Knowledge.UpdateDocument:output_type -> api.ai.v1.UpdateDocumentReply
	30, // 96: api.ai.v1.Knowledge.DeleteDocument:output_type -> api.ai.v1.DeleteDocumentReply
	34, // 97: api.ai.v1.Knowledge.ListDocuments:output_type -> api.ai.v1.ListDocumentsReply
	32, // 98: api.ai.v1.Knowledge.GetDocument:output_type -> api.ai.v1.GetDocumentReply
	36, // 99: api.ai.v1.Knowledge.ProcessDocument:output_type -> api.ai.v1.ProcessDocumentReply
	38, // 100: api.ai.v1.Knowledge.SearchKnowledge:output_type -> api.ai.v1.SearchKnowledgeReply
	40, // 101: api.ai.v1.Knowledge.HybridSearch:output_type -> api.ai.v1.HybridSearchReply
	46, // 102: api.ai.v1.Knowledge.AdvancedSearch:output_type -> api.ai.v1.AdvancedSearchReply
	48, // 103: api.ai.v1.Knowledge.GetKnowledgeChunk:output_type -> api.ai.v1.GetKnowledgeChunkReply
	50, // 104: api.ai.v1.Knowledge.UpdateKnowledgeChunk:output_type -> api.ai.v1.UpdateKnowledgeChunkReply
	52, // 105: api.ai.v1.Knowledge.ListKnowledgeChunks:output_type -> api.ai.v1.ListKnowledgeChunksReply
	54, // 106: api.ai.v1.Knowledge.ReindexKnowledgeBase:output_type -> api.ai.v1.ReindexKnowledgeBaseReply
	56, // 107: api.ai.v1.Knowledge.GetKnowledgeBaseStats:output_type -> api.ai.v1.GetKnowledgeBaseStatsReply
	58, // 108: api.ai.v1.Knowledge.AnalyzeKnowledgeBase:output_type -> api.ai.v1.AnalyzeKnowledgeBaseReply
	88, // [88:109] is the sub-list for method output_type
	67, // [67:88] is the sub-list for method input_type
	67, // [67:67] is the sub-list for extension type_name
	67, // [67:67] is the sub-list for extension extendee
	0,  // [0:67] is the sub-list for field type_name
}

func init() { file_api_ai_v1_knowledge_proto_init() }
func file_api_ai_v1_knowledge_proto_init() {
	if File_api_ai_v1_knowledge_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_ai_v1_knowledge_proto_rawDesc), len(file_api_ai_v1_knowledge_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   67,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_ai_v1_knowledge_proto_goTypes,
		DependencyIndexes: file_api_ai_v1_knowledge_proto_depIdxs,
		EnumInfos:         file_api_ai_v1_knowledge_proto_enumTypes,
		MessageInfos:      file_api_ai_v1_knowledge_proto_msgTypes,
	}.Build()
	File_api_ai_v1_knowledge_proto = out.File
	file_api_ai_v1_knowledge_proto_goTypes = nil
	file_api_ai_v1_knowledge_proto_depIdxs = nil
}
