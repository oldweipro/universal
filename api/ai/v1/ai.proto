syntax = "proto3";

package api.ai.v1;

import "google/protobuf/timestamp.proto";

option go_package = "universal/api/ai/v1;v1";
option java_multiple_files = true;
option java_package = "com.oldwei.universal.api.ai.v1";
option java_outer_classname = "AiProtoV1";

// AI服务接口定义
service Ai {
  // === 对话统计分析接口 ===
  
  // GetConversationAnalytics 获取对话统计分析数据
  // 提供用户对话行为的统计分析，包括使用频率、模型偏好、话题分布等
  rpc GetConversationAnalytics (GetConversationAnalyticsRequest) returns (GetConversationAnalyticsReply);
  
  // GetUserUsageStats 获取用户使用统计
  // 分析用户的AI使用情况，包括token消耗、成本统计、时间分布等
  rpc GetUserUsageStats (GetUserUsageStatsRequest) returns (GetUserUsageStatsReply);
  
  // GetModelPerformanceStats 获取模型性能统计
  // 分析不同模型的使用情况和性能指标
  rpc GetModelPerformanceStats (GetModelPerformanceStatsRequest) returns (GetModelPerformanceStatsReply);
  
  // GetConversationTrends 获取对话趋势分析
  // 提供时间序列的对话趋势分析数据
  rpc GetConversationTrends (GetConversationTrendsRequest) returns (GetConversationTrendsReply);
  
  // GetTopicAnalysis 获取话题分析
  // 分析对话中的主要话题和内容分布
  rpc GetTopicAnalysis (GetTopicAnalysisRequest) returns (GetTopicAnalysisReply);
  
  // GetSystemOverview 获取系统总览统计
  // 提供整个AI系统的总体使用情况和健康状况
  rpc GetSystemOverview (GetSystemOverviewRequest) returns (GetSystemOverviewReply);
}

// === 统计分析相关消息定义 ===

// 对话统计分析请求
message GetConversationAnalyticsRequest {
  int64 user_id = 1;                                    // 用户ID，为空则分析全局数据
  google.protobuf.Timestamp start_time = 2;            // 开始时间
  google.protobuf.Timestamp end_time = 3;              // 结束时间
  AnalyticsGranularity granularity = 4;                // 时间粒度
  repeated AnalyticsMetric metrics = 5;                 // 需要的指标
  map<string, string> filters = 6;                     // 过滤条件
}

message GetConversationAnalyticsReply {
  ConversationAnalytics analytics = 1;                  // 分析结果
}

// 用户使用统计请求
message GetUserUsageStatsRequest {
  int64 user_id = 1;                                    // 用户ID
  google.protobuf.Timestamp start_time = 2;            // 开始时间
  google.protobuf.Timestamp end_time = 3;              // 结束时间
  bool include_cost_breakdown = 4;                      // 是否包含成本明细
  bool include_model_usage = 5;                         // 是否包含模型使用情况
}

message GetUserUsageStatsReply {
  UserUsageStats usage_stats = 1;                       // 使用统计
}

// 模型性能统计请求
message GetModelPerformanceStatsRequest {
  repeated string model_names = 1;                      // 模型名称列表，为空则分析所有模型
  google.protobuf.Timestamp start_time = 2;            // 开始时间
  google.protobuf.Timestamp end_time = 3;              // 结束时间
  bool include_user_satisfaction = 4;                   // 是否包含用户满意度
  bool include_error_analysis = 5;                      // 是否包含错误分析
}

message GetModelPerformanceStatsReply {
  repeated ModelPerformanceStats model_stats = 1;       // 模型统计列表
}

// 对话趋势分析请求
message GetConversationTrendsRequest {
  int64 user_id = 1;                                    // 用户ID，为空则分析全局趋势
  google.protobuf.Timestamp start_time = 2;            // 开始时间
  google.protobuf.Timestamp end_time = 3;              // 结束时间
  AnalyticsGranularity granularity = 4;                // 时间粒度
  repeated TrendMetric trend_metrics = 5;               // 趋势指标
}

message GetConversationTrendsReply {
  repeated TrendData trends = 1;                         // 趋势数据
}

// 话题分析请求
message GetTopicAnalysisRequest {
  int64 user_id = 1;                                    // 用户ID，为空则分析全局话题
  google.protobuf.Timestamp start_time = 2;            // 开始时间
  google.protobuf.Timestamp end_time = 3;              // 结束时间
  int32 top_topics_count = 4;                           // 返回热门话题数量
  TopicAnalysisMethod method = 5;                       // 分析方法
  map<string, string> filters = 6;                     // 过滤条件
}

message GetTopicAnalysisReply {
  repeated TopicInsight topics = 1;                      // 话题洞察
  TopicDistribution distribution = 2;                   // 话题分布
}

// 系统总览请求
message GetSystemOverviewRequest {
  google.protobuf.Timestamp start_time = 1;            // 开始时间
  google.protobuf.Timestamp end_time = 2;              // 结束时间
  bool include_health_metrics = 3;                      // 是否包含健康指标
  bool include_resource_usage = 4;                      // 是否包含资源使用情况
}

message GetSystemOverviewReply {
  SystemOverviewStats overview = 1;                     // 系统总览
}

// === 数据模型定义 ===

// 时间粒度枚举
enum AnalyticsGranularity {
  ANALYTICS_GRANULARITY_UNSPECIFIED = 0;
  ANALYTICS_GRANULARITY_HOUR = 1;          // 小时
  ANALYTICS_GRANULARITY_DAY = 2;           // 天
  ANALYTICS_GRANULARITY_WEEK = 3;          // 周
  ANALYTICS_GRANULARITY_MONTH = 4;         // 月
}

// 分析指标枚举
enum AnalyticsMetric {
  ANALYTICS_METRIC_UNSPECIFIED = 0;
  ANALYTICS_METRIC_CONVERSATION_COUNT = 1;      // 对话数量
  ANALYTICS_METRIC_MESSAGE_COUNT = 2;           // 消息数量
  ANALYTICS_METRIC_TOKEN_USAGE = 3;             // Token使用量
  ANALYTICS_METRIC_RESPONSE_TIME = 4;           // 响应时间
  ANALYTICS_METRIC_USER_ENGAGEMENT = 5;         // 用户参与度
  ANALYTICS_METRIC_TOOL_USAGE = 6;              // 工具使用情况
}

// 趋势指标枚举
enum TrendMetric {
  TREND_METRIC_UNSPECIFIED = 0;
  TREND_METRIC_ACTIVE_USERS = 1;          // 活跃用户数
  TREND_METRIC_NEW_CONVERSATIONS = 2;     // 新对话数
  TREND_METRIC_MESSAGE_VOLUME = 3;        // 消息量
  TREND_METRIC_TOKEN_CONSUMPTION = 4;     // Token消耗
  TREND_METRIC_COST = 5;                  // 成本
}

// 话题分析方法枚举
enum TopicAnalysisMethod {
  TOPIC_ANALYSIS_METHOD_UNSPECIFIED = 0;
  TOPIC_ANALYSIS_METHOD_KEYWORD = 1;      // 关键词分析
  TOPIC_ANALYSIS_METHOD_LDA = 2;          // LDA主题模型
  TOPIC_ANALYSIS_METHOD_CLUSTERING = 3;   // 聚类分析
  TOPIC_ANALYSIS_METHOD_SEMANTIC = 4;     // 语义分析
}

// 对话分析数据
message ConversationAnalytics {
  int64 total_conversations = 1;                        // 总对话数
  int64 active_users = 2;                               // 活跃用户数
  double average_conversation_length = 3;               // 平均对话长度
  double average_response_time = 4;                     // 平均响应时间
  map<string, int64> model_usage_distribution = 5;     // 模型使用分布
  map<string, int64> time_distribution = 6;            // 时间分布
  repeated TimeSeriesPoint time_series_data = 7;       // 时序数据
  UserEngagementMetrics engagement = 8;                // 用户参与度指标
}

// 用户使用统计
message UserUsageStats {
  int64 user_id = 1;                                    // 用户ID
  int64 total_conversations = 2;                        // 总对话数
  int64 total_messages = 3;                             // 总消息数
  int64 total_input_tokens = 4;                         // 总输入Token
  int64 total_output_tokens = 5;                        // 总输出Token
  double total_cost = 6;                                // 总成本
  double average_session_duration = 7;                  // 平均会话时长
  map<string, ModelUsageStats> model_usage = 8;        // 各模型使用情况
  map<string, double> cost_breakdown = 9;              // 成本明细
  repeated UsageTimePoint usage_timeline = 10;         // 使用时间线
  UserBehaviorProfile behavior_profile = 11;           // 用户行为画像
}

// 模型性能统计
message ModelPerformanceStats {
  string model_name = 1;                                // 模型名称
  int64 total_requests = 2;                             // 总请求数
  double success_rate = 3;                              // 成功率
  double average_response_time = 4;                     // 平均响应时间
  double average_input_tokens = 5;                      // 平均输入Token数
  double average_output_tokens = 6;                     // 平均输出Token数
  double cost_per_request = 7;                          // 每请求成本
  double user_satisfaction_score = 8;                   // 用户满意度评分
  map<string, int64> error_distribution = 9;           // 错误分布
  repeated PerformanceTimePoint performance_timeline = 10; // 性能时间线
  ModelCapabilityMetrics capabilities = 11;            // 能力指标
}

// 趋势数据
message TrendData {
  TrendMetric metric = 1;                               // 指标类型
  repeated TimeSeriesPoint data_points = 2;            // 数据点
  double growth_rate = 3;                               // 增长率
  string trend_direction = 4;                           // 趋势方向: up/down/stable
}

// 话题洞察
message TopicInsight {
  string topic_name = 1;                                // 话题名称
  repeated string keywords = 2;                         // 关键词
  int64 message_count = 3;                              // 消息数量
  double relevance_score = 4;                           // 相关度分数
  double sentiment_score = 5;                           // 情感分数
  repeated string representative_messages = 6;          // 代表性消息
  google.protobuf.Timestamp first_seen = 7;           // 首次出现时间
  google.protobuf.Timestamp last_seen = 8;            // 最后出现时间
}

// 话题分布
message TopicDistribution {
  map<string, double> topic_percentages = 1;           // 话题百分比分布
  double topic_diversity_index = 2;                    // 话题多样性指数
  int32 total_topics_detected = 3;                     // 检测到的总话题数
}

// 系统总览统计
message SystemOverviewStats {
  int64 total_users = 1;                                // 总用户数
  int64 active_users_today = 2;                         // 今日活跃用户
  int64 total_conversations = 3;                        // 总对话数
  int64 total_messages = 4;                             // 总消息数
  int64 total_tokens_processed = 5;                     // 总处理Token数
  double total_cost = 6;                                // 总成本
  SystemHealthMetrics health = 7;                       // 系统健康指标
  ResourceUsageStats resource_usage = 8;               // 资源使用统计
  map<string, ServiceStats> service_stats = 9;         // 各服务统计
}

// === 辅助数据结构 ===

// 时序数据点
message TimeSeriesPoint {
  google.protobuf.Timestamp timestamp = 1;            // 时间戳
  double value = 2;                                    // 数值
  string label = 3;                                    // 标签
  map<string, double> dimensions = 4;                 // 多维数据
}

// 用户参与度指标
message UserEngagementMetrics {
  double average_messages_per_conversation = 1;        // 每对话平均消息数
  double conversation_completion_rate = 2;             // 对话完成率
  double user_retention_rate = 3;                      // 用户留存率
  double feature_adoption_rate = 4;                    // 功能采用率
}

// 模型使用统计
message ModelUsageStats {
  string model_name = 1;                               // 模型名称
  int64 request_count = 2;                             // 请求数
  int64 input_tokens = 3;                              // 输入Token数
  int64 output_tokens = 4;                             // 输出Token数
  double cost = 5;                                     // 成本
  double average_response_time = 6;                    // 平均响应时间
}

// 使用时间点
message UsageTimePoint {
  google.protobuf.Timestamp timestamp = 1;            // 时间戳
  int32 message_count = 2;                             // 消息数
  int32 token_count = 3;                               // Token数
  double cost = 4;                                     // 成本
}

// 用户行为画像
message UserBehaviorProfile {
  repeated string preferred_models = 1;                // 偏好模型
  repeated string frequent_topics = 2;                 // 常用话题
  string most_active_time = 3;                         // 最活跃时间段
  double complexity_preference = 4;                    // 复杂度偏好
  map<string, double> feature_usage = 5;              // 功能使用情况
}

// 性能时间点
message PerformanceTimePoint {
  google.protobuf.Timestamp timestamp = 1;            // 时间戳
  double response_time = 2;                            // 响应时间
  double success_rate = 3;                             // 成功率
  double throughput = 4;                               // 吞吐量
}

// 模型能力指标
message ModelCapabilityMetrics {
  double reasoning_score = 1;                          // 推理能力分数
  double creativity_score = 2;                         // 创造力分数
  double accuracy_score = 3;                           // 准确性分数
  double safety_score = 4;                             // 安全性分数
  map<string, double> task_specific_scores = 5;       // 任务特定分数
}

// 系统健康指标
message SystemHealthMetrics {
  double overall_health_score = 1;                     // 总体健康分数
  double service_availability = 2;                     // 服务可用性
  double average_response_time = 3;                    // 平均响应时间
  double error_rate = 4;                               // 错误率
  int64 active_connections = 5;                        // 活跃连接数
}

// 资源使用统计
message ResourceUsageStats {
  double cpu_usage_percentage = 1;                     // CPU使用率
  double memory_usage_percentage = 2;                  // 内存使用率
  double storage_usage_gb = 3;                         // 存储使用量(GB)
  double network_bandwidth_mbps = 4;                   // 网络带宽(Mbps)
  int64 database_connections = 5;                      // 数据库连接数
}

// 服务统计
message ServiceStats {
  string service_name = 1;                             // 服务名称
  double uptime_percentage = 2;                        // 运行时间百分比
  int64 request_count = 3;                             // 请求数
  double average_response_time = 4;                    // 平均响应时间
  double error_rate = 5;                               // 错误率
}