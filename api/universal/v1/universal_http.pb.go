// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.32.0
// source: api/universal/v1/universal.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUniversalBatchDeleteUser = "/api.universal.v1.Universal/BatchDeleteUser"
const OperationUniversalChangePassword = "/api.universal.v1.Universal/ChangePassword"
const OperationUniversalCreateUser = "/api.universal.v1.Universal/CreateUser"
const OperationUniversalDeleteUser = "/api.universal.v1.Universal/DeleteUser"
const OperationUniversalGetUser = "/api.universal.v1.Universal/GetUser"
const OperationUniversalGetUserStats = "/api.universal.v1.Universal/GetUserStats"
const OperationUniversalListUser = "/api.universal.v1.Universal/ListUser"
const OperationUniversalUpdateUser = "/api.universal.v1.Universal/UpdateUser"
const OperationUniversalUpdateUserStatus = "/api.universal.v1.Universal/UpdateUserStatus"

type UniversalHTTPServer interface {
	// BatchDeleteUser 扩展操作
	BatchDeleteUser(context.Context, *BatchDeleteUserRequest) (*BatchDeleteUserReply, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*OperationReply, error)
	// CreateUser 基础CRUD操作
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserReply, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*OperationReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	GetUserStats(context.Context, *GetUserStatsRequest) (*GetUserStatsReply, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)
	UpdateUserStatus(context.Context, *UpdateUserStatusRequest) (*OperationReply, error)
}

func RegisterUniversalHTTPServer(s *http.Server, srv UniversalHTTPServer) {
	r := s.Route("/")
	r.POST("/api/user/v1/users", _Universal_CreateUser0_HTTP_Handler(srv))
	r.PUT("/api/user/v1/users/{id}", _Universal_UpdateUser0_HTTP_Handler(srv))
	r.DELETE("/api/user/v1/users/{id}", _Universal_DeleteUser0_HTTP_Handler(srv))
	r.GET("/api/user/v1/users/{id}", _Universal_GetUser0_HTTP_Handler(srv))
	r.GET("/api/user/v1/users", _Universal_ListUser0_HTTP_Handler(srv))
	r.POST("/api/user/v1/users/batch-delete", _Universal_BatchDeleteUser0_HTTP_Handler(srv))
	r.PATCH("/api/user/v1/users/{id}/status", _Universal_UpdateUserStatus0_HTTP_Handler(srv))
	r.PATCH("/api/user/v1/users/{id}/password", _Universal_ChangePassword0_HTTP_Handler(srv))
	r.GET("/api/user/v1/users/stats", _Universal_GetUserStats0_HTTP_Handler(srv))
}

func _Universal_CreateUser0_HTTP_Handler(srv UniversalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUniversalCreateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUser(ctx, req.(*CreateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Universal_UpdateUser0_HTTP_Handler(srv UniversalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUniversalUpdateUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUser(ctx, req.(*UpdateUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateUserReply)
		return ctx.Result(200, reply)
	}
}

func _Universal_DeleteUser0_HTTP_Handler(srv UniversalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUniversalDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteUser(ctx, req.(*DeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OperationReply)
		return ctx.Result(200, reply)
	}
}

func _Universal_GetUser0_HTTP_Handler(srv UniversalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUniversalGetUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUser(ctx, req.(*GetUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserReply)
		return ctx.Result(200, reply)
	}
}

func _Universal_ListUser0_HTTP_Handler(srv UniversalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListUserRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUniversalListUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListUser(ctx, req.(*ListUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListUserReply)
		return ctx.Result(200, reply)
	}
}

func _Universal_BatchDeleteUser0_HTTP_Handler(srv UniversalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchDeleteUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUniversalBatchDeleteUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchDeleteUser(ctx, req.(*BatchDeleteUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchDeleteUserReply)
		return ctx.Result(200, reply)
	}
}

func _Universal_UpdateUserStatus0_HTTP_Handler(srv UniversalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateUserStatusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUniversalUpdateUserStatus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserStatus(ctx, req.(*UpdateUserStatusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OperationReply)
		return ctx.Result(200, reply)
	}
}

func _Universal_ChangePassword0_HTTP_Handler(srv UniversalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChangePasswordRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUniversalChangePassword)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ChangePassword(ctx, req.(*ChangePasswordRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*OperationReply)
		return ctx.Result(200, reply)
	}
}

func _Universal_GetUserStats0_HTTP_Handler(srv UniversalHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserStatsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUniversalGetUserStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserStats(ctx, req.(*GetUserStatsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetUserStatsReply)
		return ctx.Result(200, reply)
	}
}

type UniversalHTTPClient interface {
	BatchDeleteUser(ctx context.Context, req *BatchDeleteUserRequest, opts ...http.CallOption) (rsp *BatchDeleteUserReply, err error)
	ChangePassword(ctx context.Context, req *ChangePasswordRequest, opts ...http.CallOption) (rsp *OperationReply, err error)
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...http.CallOption) (rsp *CreateUserReply, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...http.CallOption) (rsp *OperationReply, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...http.CallOption) (rsp *GetUserReply, err error)
	GetUserStats(ctx context.Context, req *GetUserStatsRequest, opts ...http.CallOption) (rsp *GetUserStatsReply, err error)
	ListUser(ctx context.Context, req *ListUserRequest, opts ...http.CallOption) (rsp *ListUserReply, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...http.CallOption) (rsp *UpdateUserReply, err error)
	UpdateUserStatus(ctx context.Context, req *UpdateUserStatusRequest, opts ...http.CallOption) (rsp *OperationReply, err error)
}

type UniversalHTTPClientImpl struct {
	cc *http.Client
}

func NewUniversalHTTPClient(client *http.Client) UniversalHTTPClient {
	return &UniversalHTTPClientImpl{client}
}

func (c *UniversalHTTPClientImpl) BatchDeleteUser(ctx context.Context, in *BatchDeleteUserRequest, opts ...http.CallOption) (*BatchDeleteUserReply, error) {
	var out BatchDeleteUserReply
	pattern := "/api/user/v1/users/batch-delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUniversalBatchDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UniversalHTTPClientImpl) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...http.CallOption) (*OperationReply, error) {
	var out OperationReply
	pattern := "/api/user/v1/users/{id}/password"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUniversalChangePassword))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UniversalHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...http.CallOption) (*CreateUserReply, error) {
	var out CreateUserReply
	pattern := "/api/user/v1/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUniversalCreateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UniversalHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...http.CallOption) (*OperationReply, error) {
	var out OperationReply
	pattern := "/api/user/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUniversalDeleteUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UniversalHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...http.CallOption) (*GetUserReply, error) {
	var out GetUserReply
	pattern := "/api/user/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUniversalGetUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UniversalHTTPClientImpl) GetUserStats(ctx context.Context, in *GetUserStatsRequest, opts ...http.CallOption) (*GetUserStatsReply, error) {
	var out GetUserStatsReply
	pattern := "/api/user/v1/users/stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUniversalGetUserStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UniversalHTTPClientImpl) ListUser(ctx context.Context, in *ListUserRequest, opts ...http.CallOption) (*ListUserReply, error) {
	var out ListUserReply
	pattern := "/api/user/v1/users"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUniversalListUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UniversalHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...http.CallOption) (*UpdateUserReply, error) {
	var out UpdateUserReply
	pattern := "/api/user/v1/users/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUniversalUpdateUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UniversalHTTPClientImpl) UpdateUserStatus(ctx context.Context, in *UpdateUserStatusRequest, opts ...http.CallOption) (*OperationReply, error) {
	var out OperationReply
	pattern := "/api/user/v1/users/{id}/status"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUniversalUpdateUserStatus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
