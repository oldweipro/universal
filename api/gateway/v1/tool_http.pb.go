// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.32.0
// source: api/gateway/v1/tool.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "universal/api/ai/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationToolBatchCallTools = "/api.universal.v1.Tool/BatchCallTools"
const OperationToolCallTool = "/api.universal.v1.Tool/CallTool"
const OperationToolConfigureTool = "/api.universal.v1.Tool/ConfigureTool"
const OperationToolDeleteMcpServer = "/api.universal.v1.Tool/DeleteMcpServer"
const OperationToolDisableTool = "/api.universal.v1.Tool/DisableTool"
const OperationToolEnableTool = "/api.universal.v1.Tool/EnableTool"
const OperationToolGetMcpServer = "/api.universal.v1.Tool/GetMcpServer"
const OperationToolGetResource = "/api.universal.v1.Tool/GetResource"
const OperationToolGetTool = "/api.universal.v1.Tool/GetTool"
const OperationToolGetToolConfig = "/api.universal.v1.Tool/GetToolConfig"
const OperationToolGetToolExecutionHistory = "/api.universal.v1.Tool/GetToolExecutionHistory"
const OperationToolGetToolExecutionStats = "/api.universal.v1.Tool/GetToolExecutionStats"
const OperationToolGetToolSchema = "/api.universal.v1.Tool/GetToolSchema"
const OperationToolListMcpServers = "/api.universal.v1.Tool/ListMcpServers"
const OperationToolListResources = "/api.universal.v1.Tool/ListResources"
const OperationToolListTools = "/api.universal.v1.Tool/ListTools"
const OperationToolRegisterMcpServer = "/api.universal.v1.Tool/RegisterMcpServer"
const OperationToolSearchResources = "/api.universal.v1.Tool/SearchResources"
const OperationToolTestMcpServer = "/api.universal.v1.Tool/TestMcpServer"
const OperationToolUpdateMcpServer = "/api.universal.v1.Tool/UpdateMcpServer"
const OperationToolValidateToolArguments = "/api.universal.v1.Tool/ValidateToolArguments"

type ToolHTTPServer interface {
	// BatchCallTools BatchCallTools 批量调用工具
	// 同时调用多个工具，支持并行执行和依赖关系管理
	BatchCallTools(context.Context, *v1.BatchCallToolsRequest) (*v1.BatchCallToolsReply, error)
	// CallTool CallTool 调用指定的MCP工具
	// 执行工具调用并返回结果，支持传入对话上下文
	CallTool(context.Context, *v1.CallToolRequest) (*v1.CallToolResponse, error)
	// ConfigureTool ConfigureTool 配置工具
	// 设置工具的特定配置参数
	ConfigureTool(context.Context, *v1.ConfigureToolRequest) (*v1.ConfigureToolReply, error)
	// DeleteMcpServer DeleteMcpServer 删除MCP服务器
	// 从系统中移除MCP服务器及其所有工具和资源
	DeleteMcpServer(context.Context, *v1.DeleteMcpServerRequest) (*v1.DeleteMcpServerReply, error)
	// DisableTool DisableTool 禁用工具
	// 禁用指定的工具，阻止其被调用
	DisableTool(context.Context, *v1.DisableToolRequest) (*v1.DisableToolReply, error)
	// EnableTool EnableTool 启用工具
	// 启用指定的工具，使其可被调用
	EnableTool(context.Context, *v1.EnableToolRequest) (*v1.EnableToolReply, error)
	// GetMcpServer GetMcpServer 获取MCP服务器详细信息
	// 根据服务器ID获取服务器的配置和状态信息
	GetMcpServer(context.Context, *v1.GetMcpServerRequest) (*v1.GetMcpServerReply, error)
	// GetResource GetResource 获取指定资源的内容
	// 根据资源URI获取资源内容和元数据
	GetResource(context.Context, *v1.GetResourceRequest) (*v1.GetResourceReply, error)
	// GetTool GetTool 获取指定工具的详细信息
	// 根据工具名称获取工具的完整配置和元数据
	GetTool(context.Context, *v1.GetToolRequest) (*v1.GetToolReply, error)
	// GetToolConfig GetToolConfig 获取工具配置
	// 获取工具的当前配置信息
	GetToolConfig(context.Context, *v1.GetToolConfigRequest) (*v1.GetToolConfigReply, error)
	// GetToolExecutionHistory GetToolExecutionHistory 获取工具执行历史
	// 查询指定工具的执行历史记录
	GetToolExecutionHistory(context.Context, *v1.GetToolExecutionHistoryRequest) (*v1.GetToolExecutionHistoryReply, error)
	// GetToolExecutionStats GetToolExecutionStats 获取工具执行统计
	// 获取工具使用的统计信息和性能指标
	GetToolExecutionStats(context.Context, *v1.GetToolExecutionStatsRequest) (*v1.GetToolExecutionStatsReply, error)
	// GetToolSchema GetToolSchema 获取工具的参数Schema
	// 返回工具的详细信息和参数定义，用于动态表单生成
	GetToolSchema(context.Context, *v1.GetToolSchemaRequest) (*v1.GetToolSchemaReply, error)
	// ListMcpServers ListMcpServers 获取MCP服务器列表
	// 返回所有已注册的MCP服务器信息
	ListMcpServers(context.Context, *v1.ListMcpServersRequest) (*v1.ListMcpServersReply, error)
	// ListResources ListResources 获取可用的MCP资源列表
	// 支持按MCP服务器和MIME类型过滤
	ListResources(context.Context, *v1.ListResourcesRequest) (*v1.ListResourcesReply, error)
	// ListTools ListTools 获取可用的MCP工具列表
	// 支持按MCP服务器过滤，可选择只显示启用的工具
	ListTools(context.Context, *v1.ListToolsRequest) (*v1.ListToolsReply, error)
	// RegisterMcpServer RegisterMcpServer 注册新的MCP服务器
	// 添加新的MCP服务器到系统中
	RegisterMcpServer(context.Context, *v1.RegisterMcpServerRequest) (*v1.RegisterMcpServerReply, error)
	// SearchResources SearchResources 搜索资源
	// 基于关键词和元数据搜索可用资源
	SearchResources(context.Context, *v1.SearchResourcesRequest) (*v1.SearchResourcesReply, error)
	// TestMcpServer TestMcpServer 测试MCP服务器连接
	// 验证MCP服务器的连接状态和可用性
	TestMcpServer(context.Context, *v1.TestMcpServerRequest) (*v1.TestMcpServerReply, error)
	// UpdateMcpServer UpdateMcpServer 更新MCP服务器配置
	// 修改已注册的MCP服务器的配置信息
	UpdateMcpServer(context.Context, *v1.UpdateMcpServerRequest) (*v1.UpdateMcpServerReply, error)
	// ValidateToolArguments ValidateToolArguments 验证工具参数
	// 在实际调用前验证参数是否符合工具的Schema定义
	ValidateToolArguments(context.Context, *v1.ValidateToolArgumentsRequest) (*v1.ValidateToolArgumentsReply, error)
}

func RegisterToolHTTPServer(s *http.Server, srv ToolHTTPServer) {
	r := s.Route("/")
	r.GET("/api/ai/v1/tools", _Tool_ListTools0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/tools/{name}", _Tool_GetTool0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/tools/call", _Tool_CallTool0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/tools/{name}/schema", _Tool_GetToolSchema0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/tools/validate", _Tool_ValidateToolArguments0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/tools/batch-call", _Tool_BatchCallTools0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/tools/mcp/servers", _Tool_ListMcpServers0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/tools/mcp/servers/{id}", _Tool_GetMcpServer0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/tools/mcp/servers", _Tool_RegisterMcpServer0_HTTP_Handler(srv))
	r.PUT("/api/ai/v1/tools/mcp/servers/{id}", _Tool_UpdateMcpServer0_HTTP_Handler(srv))
	r.DELETE("/api/ai/v1/tools/mcp/servers/{id}", _Tool_DeleteMcpServer0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/tools/mcp/servers/{id}/test", _Tool_TestMcpServer0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/tools/mcp/resources", _Tool_ListResources0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/tools/mcp/resources/{uri}", _Tool_GetResource0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/tools/mcp/resources/search", _Tool_SearchResources0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/tools/execution/history", _Tool_GetToolExecutionHistory0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/tools/execution/stats", _Tool_GetToolExecutionStats0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/tools/{tool_name}/enable", _Tool_EnableTool0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/tools/{tool_name}/disable", _Tool_DisableTool0_HTTP_Handler(srv))
	r.PUT("/api/ai/v1/tools/{tool_name}/config", _Tool_ConfigureTool0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/tools/{tool_name}/config", _Tool_GetToolConfig0_HTTP_Handler(srv))
}

func _Tool_ListTools0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListToolsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolListTools)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTools(ctx, req.(*v1.ListToolsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListToolsReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_GetTool0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetToolRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolGetTool)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTool(ctx, req.(*v1.GetToolRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetToolReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_CallTool0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CallToolRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolCallTool)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CallTool(ctx, req.(*v1.CallToolRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CallToolResponse)
		return ctx.Result(200, reply)
	}
}

func _Tool_GetToolSchema0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetToolSchemaRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolGetToolSchema)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetToolSchema(ctx, req.(*v1.GetToolSchemaRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetToolSchemaReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_ValidateToolArguments0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ValidateToolArgumentsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolValidateToolArguments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ValidateToolArguments(ctx, req.(*v1.ValidateToolArgumentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ValidateToolArgumentsReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_BatchCallTools0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.BatchCallToolsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolBatchCallTools)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchCallTools(ctx, req.(*v1.BatchCallToolsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.BatchCallToolsReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_ListMcpServers0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListMcpServersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolListMcpServers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListMcpServers(ctx, req.(*v1.ListMcpServersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListMcpServersReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_GetMcpServer0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetMcpServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolGetMcpServer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMcpServer(ctx, req.(*v1.GetMcpServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetMcpServerReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_RegisterMcpServer0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.RegisterMcpServerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolRegisterMcpServer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegisterMcpServer(ctx, req.(*v1.RegisterMcpServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.RegisterMcpServerReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_UpdateMcpServer0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdateMcpServerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolUpdateMcpServer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMcpServer(ctx, req.(*v1.UpdateMcpServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateMcpServerReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_DeleteMcpServer0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteMcpServerRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolDeleteMcpServer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMcpServer(ctx, req.(*v1.DeleteMcpServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteMcpServerReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_TestMcpServer0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.TestMcpServerRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolTestMcpServer)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TestMcpServer(ctx, req.(*v1.TestMcpServerRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.TestMcpServerReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_ListResources0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListResourcesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolListResources)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListResources(ctx, req.(*v1.ListResourcesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListResourcesReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_GetResource0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetResourceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolGetResource)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetResource(ctx, req.(*v1.GetResourceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetResourceReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_SearchResources0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SearchResourcesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolSearchResources)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchResources(ctx, req.(*v1.SearchResourcesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.SearchResourcesReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_GetToolExecutionHistory0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetToolExecutionHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolGetToolExecutionHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetToolExecutionHistory(ctx, req.(*v1.GetToolExecutionHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetToolExecutionHistoryReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_GetToolExecutionStats0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetToolExecutionStatsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolGetToolExecutionStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetToolExecutionStats(ctx, req.(*v1.GetToolExecutionStatsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetToolExecutionStatsReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_EnableTool0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.EnableToolRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolEnableTool)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.EnableTool(ctx, req.(*v1.EnableToolRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.EnableToolReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_DisableTool0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DisableToolRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolDisableTool)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DisableTool(ctx, req.(*v1.DisableToolRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DisableToolReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_ConfigureTool0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ConfigureToolRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolConfigureTool)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ConfigureTool(ctx, req.(*v1.ConfigureToolRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ConfigureToolReply)
		return ctx.Result(200, reply)
	}
}

func _Tool_GetToolConfig0_HTTP_Handler(srv ToolHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetToolConfigRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationToolGetToolConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetToolConfig(ctx, req.(*v1.GetToolConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetToolConfigReply)
		return ctx.Result(200, reply)
	}
}

type ToolHTTPClient interface {
	BatchCallTools(ctx context.Context, req *v1.BatchCallToolsRequest, opts ...http.CallOption) (rsp *v1.BatchCallToolsReply, err error)
	CallTool(ctx context.Context, req *v1.CallToolRequest, opts ...http.CallOption) (rsp *v1.CallToolResponse, err error)
	ConfigureTool(ctx context.Context, req *v1.ConfigureToolRequest, opts ...http.CallOption) (rsp *v1.ConfigureToolReply, err error)
	DeleteMcpServer(ctx context.Context, req *v1.DeleteMcpServerRequest, opts ...http.CallOption) (rsp *v1.DeleteMcpServerReply, err error)
	DisableTool(ctx context.Context, req *v1.DisableToolRequest, opts ...http.CallOption) (rsp *v1.DisableToolReply, err error)
	EnableTool(ctx context.Context, req *v1.EnableToolRequest, opts ...http.CallOption) (rsp *v1.EnableToolReply, err error)
	GetMcpServer(ctx context.Context, req *v1.GetMcpServerRequest, opts ...http.CallOption) (rsp *v1.GetMcpServerReply, err error)
	GetResource(ctx context.Context, req *v1.GetResourceRequest, opts ...http.CallOption) (rsp *v1.GetResourceReply, err error)
	GetTool(ctx context.Context, req *v1.GetToolRequest, opts ...http.CallOption) (rsp *v1.GetToolReply, err error)
	GetToolConfig(ctx context.Context, req *v1.GetToolConfigRequest, opts ...http.CallOption) (rsp *v1.GetToolConfigReply, err error)
	GetToolExecutionHistory(ctx context.Context, req *v1.GetToolExecutionHistoryRequest, opts ...http.CallOption) (rsp *v1.GetToolExecutionHistoryReply, err error)
	GetToolExecutionStats(ctx context.Context, req *v1.GetToolExecutionStatsRequest, opts ...http.CallOption) (rsp *v1.GetToolExecutionStatsReply, err error)
	GetToolSchema(ctx context.Context, req *v1.GetToolSchemaRequest, opts ...http.CallOption) (rsp *v1.GetToolSchemaReply, err error)
	ListMcpServers(ctx context.Context, req *v1.ListMcpServersRequest, opts ...http.CallOption) (rsp *v1.ListMcpServersReply, err error)
	ListResources(ctx context.Context, req *v1.ListResourcesRequest, opts ...http.CallOption) (rsp *v1.ListResourcesReply, err error)
	ListTools(ctx context.Context, req *v1.ListToolsRequest, opts ...http.CallOption) (rsp *v1.ListToolsReply, err error)
	RegisterMcpServer(ctx context.Context, req *v1.RegisterMcpServerRequest, opts ...http.CallOption) (rsp *v1.RegisterMcpServerReply, err error)
	SearchResources(ctx context.Context, req *v1.SearchResourcesRequest, opts ...http.CallOption) (rsp *v1.SearchResourcesReply, err error)
	TestMcpServer(ctx context.Context, req *v1.TestMcpServerRequest, opts ...http.CallOption) (rsp *v1.TestMcpServerReply, err error)
	UpdateMcpServer(ctx context.Context, req *v1.UpdateMcpServerRequest, opts ...http.CallOption) (rsp *v1.UpdateMcpServerReply, err error)
	ValidateToolArguments(ctx context.Context, req *v1.ValidateToolArgumentsRequest, opts ...http.CallOption) (rsp *v1.ValidateToolArgumentsReply, err error)
}

type ToolHTTPClientImpl struct {
	cc *http.Client
}

func NewToolHTTPClient(client *http.Client) ToolHTTPClient {
	return &ToolHTTPClientImpl{client}
}

func (c *ToolHTTPClientImpl) BatchCallTools(ctx context.Context, in *v1.BatchCallToolsRequest, opts ...http.CallOption) (*v1.BatchCallToolsReply, error) {
	var out v1.BatchCallToolsReply
	pattern := "/api/ai/v1/tools/batch-call"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationToolBatchCallTools))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) CallTool(ctx context.Context, in *v1.CallToolRequest, opts ...http.CallOption) (*v1.CallToolResponse, error) {
	var out v1.CallToolResponse
	pattern := "/api/ai/v1/tools/call"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationToolCallTool))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) ConfigureTool(ctx context.Context, in *v1.ConfigureToolRequest, opts ...http.CallOption) (*v1.ConfigureToolReply, error) {
	var out v1.ConfigureToolReply
	pattern := "/api/ai/v1/tools/{tool_name}/config"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationToolConfigureTool))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) DeleteMcpServer(ctx context.Context, in *v1.DeleteMcpServerRequest, opts ...http.CallOption) (*v1.DeleteMcpServerReply, error) {
	var out v1.DeleteMcpServerReply
	pattern := "/api/ai/v1/tools/mcp/servers/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationToolDeleteMcpServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) DisableTool(ctx context.Context, in *v1.DisableToolRequest, opts ...http.CallOption) (*v1.DisableToolReply, error) {
	var out v1.DisableToolReply
	pattern := "/api/ai/v1/tools/{tool_name}/disable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationToolDisableTool))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) EnableTool(ctx context.Context, in *v1.EnableToolRequest, opts ...http.CallOption) (*v1.EnableToolReply, error) {
	var out v1.EnableToolReply
	pattern := "/api/ai/v1/tools/{tool_name}/enable"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationToolEnableTool))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) GetMcpServer(ctx context.Context, in *v1.GetMcpServerRequest, opts ...http.CallOption) (*v1.GetMcpServerReply, error) {
	var out v1.GetMcpServerReply
	pattern := "/api/ai/v1/tools/mcp/servers/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationToolGetMcpServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) GetResource(ctx context.Context, in *v1.GetResourceRequest, opts ...http.CallOption) (*v1.GetResourceReply, error) {
	var out v1.GetResourceReply
	pattern := "/api/ai/v1/tools/mcp/resources/{uri}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationToolGetResource))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) GetTool(ctx context.Context, in *v1.GetToolRequest, opts ...http.CallOption) (*v1.GetToolReply, error) {
	var out v1.GetToolReply
	pattern := "/api/ai/v1/tools/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationToolGetTool))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) GetToolConfig(ctx context.Context, in *v1.GetToolConfigRequest, opts ...http.CallOption) (*v1.GetToolConfigReply, error) {
	var out v1.GetToolConfigReply
	pattern := "/api/ai/v1/tools/{tool_name}/config"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationToolGetToolConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) GetToolExecutionHistory(ctx context.Context, in *v1.GetToolExecutionHistoryRequest, opts ...http.CallOption) (*v1.GetToolExecutionHistoryReply, error) {
	var out v1.GetToolExecutionHistoryReply
	pattern := "/api/ai/v1/tools/execution/history"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationToolGetToolExecutionHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) GetToolExecutionStats(ctx context.Context, in *v1.GetToolExecutionStatsRequest, opts ...http.CallOption) (*v1.GetToolExecutionStatsReply, error) {
	var out v1.GetToolExecutionStatsReply
	pattern := "/api/ai/v1/tools/execution/stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationToolGetToolExecutionStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) GetToolSchema(ctx context.Context, in *v1.GetToolSchemaRequest, opts ...http.CallOption) (*v1.GetToolSchemaReply, error) {
	var out v1.GetToolSchemaReply
	pattern := "/api/ai/v1/tools/{name}/schema"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationToolGetToolSchema))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) ListMcpServers(ctx context.Context, in *v1.ListMcpServersRequest, opts ...http.CallOption) (*v1.ListMcpServersReply, error) {
	var out v1.ListMcpServersReply
	pattern := "/api/ai/v1/tools/mcp/servers"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationToolListMcpServers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) ListResources(ctx context.Context, in *v1.ListResourcesRequest, opts ...http.CallOption) (*v1.ListResourcesReply, error) {
	var out v1.ListResourcesReply
	pattern := "/api/ai/v1/tools/mcp/resources"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationToolListResources))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) ListTools(ctx context.Context, in *v1.ListToolsRequest, opts ...http.CallOption) (*v1.ListToolsReply, error) {
	var out v1.ListToolsReply
	pattern := "/api/ai/v1/tools"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationToolListTools))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) RegisterMcpServer(ctx context.Context, in *v1.RegisterMcpServerRequest, opts ...http.CallOption) (*v1.RegisterMcpServerReply, error) {
	var out v1.RegisterMcpServerReply
	pattern := "/api/ai/v1/tools/mcp/servers"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationToolRegisterMcpServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) SearchResources(ctx context.Context, in *v1.SearchResourcesRequest, opts ...http.CallOption) (*v1.SearchResourcesReply, error) {
	var out v1.SearchResourcesReply
	pattern := "/api/ai/v1/tools/mcp/resources/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationToolSearchResources))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) TestMcpServer(ctx context.Context, in *v1.TestMcpServerRequest, opts ...http.CallOption) (*v1.TestMcpServerReply, error) {
	var out v1.TestMcpServerReply
	pattern := "/api/ai/v1/tools/mcp/servers/{id}/test"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationToolTestMcpServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) UpdateMcpServer(ctx context.Context, in *v1.UpdateMcpServerRequest, opts ...http.CallOption) (*v1.UpdateMcpServerReply, error) {
	var out v1.UpdateMcpServerReply
	pattern := "/api/ai/v1/tools/mcp/servers/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationToolUpdateMcpServer))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ToolHTTPClientImpl) ValidateToolArguments(ctx context.Context, in *v1.ValidateToolArgumentsRequest, opts ...http.CallOption) (*v1.ValidateToolArgumentsReply, error) {
	var out v1.ValidateToolArgumentsReply
	pattern := "/api/ai/v1/tools/validate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationToolValidateToolArguments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
