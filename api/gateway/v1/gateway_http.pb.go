// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.32.0
// source: api/gateway/v1/gateway.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGatewayGetGatewayHealth = "/api.universal.v1.Gateway/GetGatewayHealth"
const OperationGatewayGetGatewayInfo = "/api.universal.v1.Gateway/GetGatewayInfo"

type GatewayHTTPServer interface {
	// GetGatewayHealth 获取网关健康状态
	GetGatewayHealth(context.Context, *GetGatewayHealthRequest) (*GetGatewayHealthReply, error)
	// GetGatewayInfo 获取网关信息
	GetGatewayInfo(context.Context, *GetGatewayInfoRequest) (*GetGatewayInfoReply, error)
}

func RegisterGatewayHTTPServer(s *http.Server, srv GatewayHTTPServer) {
	r := s.Route("/")
	r.GET("/api/gateway/v1/info", _Gateway_GetGatewayInfo0_HTTP_Handler(srv))
	r.GET("/api/gateway/v1/health", _Gateway_GetGatewayHealth0_HTTP_Handler(srv))
}

func _Gateway_GetGatewayInfo0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGatewayInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayGetGatewayInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGatewayInfo(ctx, req.(*GetGatewayInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGatewayInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Gateway_GetGatewayHealth0_HTTP_Handler(srv GatewayHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGatewayHealthRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGatewayGetGatewayHealth)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGatewayHealth(ctx, req.(*GetGatewayHealthRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGatewayHealthReply)
		return ctx.Result(200, reply)
	}
}

type GatewayHTTPClient interface {
	GetGatewayHealth(ctx context.Context, req *GetGatewayHealthRequest, opts ...http.CallOption) (rsp *GetGatewayHealthReply, err error)
	GetGatewayInfo(ctx context.Context, req *GetGatewayInfoRequest, opts ...http.CallOption) (rsp *GetGatewayInfoReply, err error)
}

type GatewayHTTPClientImpl struct {
	cc *http.Client
}

func NewGatewayHTTPClient(client *http.Client) GatewayHTTPClient {
	return &GatewayHTTPClientImpl{client}
}

func (c *GatewayHTTPClientImpl) GetGatewayHealth(ctx context.Context, in *GetGatewayHealthRequest, opts ...http.CallOption) (*GetGatewayHealthReply, error) {
	var out GetGatewayHealthReply
	pattern := "/api/gateway/v1/health"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayGetGatewayHealth))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *GatewayHTTPClientImpl) GetGatewayInfo(ctx context.Context, in *GetGatewayInfoRequest, opts ...http.CallOption) (*GetGatewayInfoReply, error) {
	var out GetGatewayInfoReply
	pattern := "/api/gateway/v1/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGatewayGetGatewayInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
