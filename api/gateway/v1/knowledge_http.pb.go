// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.32.0
// source: api/gateway/v1/knowledge.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "universal/api/ai/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationKnowledgeAdvancedSearch = "/api.universal.v1.Knowledge/AdvancedSearch"
const OperationKnowledgeAnalyzeKnowledgeBase = "/api.universal.v1.Knowledge/AnalyzeKnowledgeBase"
const OperationKnowledgeCreateKnowledgeBase = "/api.universal.v1.Knowledge/CreateKnowledgeBase"
const OperationKnowledgeDeleteDocument = "/api.universal.v1.Knowledge/DeleteDocument"
const OperationKnowledgeDeleteKnowledgeBase = "/api.universal.v1.Knowledge/DeleteKnowledgeBase"
const OperationKnowledgeGetDocument = "/api.universal.v1.Knowledge/GetDocument"
const OperationKnowledgeGetKnowledgeBase = "/api.universal.v1.Knowledge/GetKnowledgeBase"
const OperationKnowledgeGetKnowledgeBaseStats = "/api.universal.v1.Knowledge/GetKnowledgeBaseStats"
const OperationKnowledgeGetKnowledgeChunk = "/api.universal.v1.Knowledge/GetKnowledgeChunk"
const OperationKnowledgeHybridSearch = "/api.universal.v1.Knowledge/HybridSearch"
const OperationKnowledgeListDocuments = "/api.universal.v1.Knowledge/ListDocuments"
const OperationKnowledgeListKnowledgeBases = "/api.universal.v1.Knowledge/ListKnowledgeBases"
const OperationKnowledgeListKnowledgeChunks = "/api.universal.v1.Knowledge/ListKnowledgeChunks"
const OperationKnowledgeProcessDocument = "/api.universal.v1.Knowledge/ProcessDocument"
const OperationKnowledgeReindexKnowledgeBase = "/api.universal.v1.Knowledge/ReindexKnowledgeBase"
const OperationKnowledgeSearchKnowledge = "/api.universal.v1.Knowledge/SearchKnowledge"
const OperationKnowledgeUpdateDocument = "/api.universal.v1.Knowledge/UpdateDocument"
const OperationKnowledgeUpdateKnowledgeBase = "/api.universal.v1.Knowledge/UpdateKnowledgeBase"
const OperationKnowledgeUpdateKnowledgeChunk = "/api.universal.v1.Knowledge/UpdateKnowledgeChunk"
const OperationKnowledgeUploadDocument = "/api.universal.v1.Knowledge/UploadDocument"

type KnowledgeHTTPServer interface {
	// AdvancedSearch AdvancedSearch 高级搜索
	// 支持多种搜索条件和过滤器的高级搜索
	AdvancedSearch(context.Context, *v1.AdvancedSearchRequest) (*v1.AdvancedSearchReply, error)
	// AnalyzeKnowledgeBase AnalyzeKnowledgeBase 分析知识库内容
	// 分析知识库的内容分布、主题等
	AnalyzeKnowledgeBase(context.Context, *v1.AnalyzeKnowledgeBaseRequest) (*v1.AnalyzeKnowledgeBaseReply, error)
	// CreateKnowledgeBase CreateKnowledgeBase 创建新的知识库
	// 为用户创建知识库，可以指定向量化模型和分块策略
	CreateKnowledgeBase(context.Context, *v1.CreateKnowledgeBaseRequest) (*v1.CreateKnowledgeBaseReply, error)
	// DeleteDocument DeleteDocument 删除文档
	// 从知识库中删除指定文档及其向量数据
	DeleteDocument(context.Context, *v1.DeleteDocumentRequest) (*v1.DeleteDocumentReply, error)
	// DeleteKnowledgeBase DeleteKnowledgeBase 删除知识库
	// 软删除知识库及其所有文档和向量数据
	DeleteKnowledgeBase(context.Context, *v1.DeleteKnowledgeBaseRequest) (*v1.DeleteKnowledgeBaseReply, error)
	// GetDocument GetDocument 获取文档详细信息
	// 根据ID获取文档的完整信息
	GetDocument(context.Context, *v1.GetDocumentRequest) (*v1.GetDocumentReply, error)
	// GetKnowledgeBase GetKnowledgeBase 获取知识库详细信息
	// 根据ID获取知识库的完整信息和统计数据
	GetKnowledgeBase(context.Context, *v1.GetKnowledgeBaseRequest) (*v1.GetKnowledgeBaseReply, error)
	// GetKnowledgeBaseStats GetKnowledgeBaseStats 获取知识库统计信息
	// 返回知识库的详细统计数据
	GetKnowledgeBaseStats(context.Context, *v1.GetKnowledgeBaseStatsRequest) (*v1.GetKnowledgeBaseStatsReply, error)
	// GetKnowledgeChunk GetKnowledgeChunk 获取知识块详细信息
	// 根据块ID获取知识块的完整信息
	GetKnowledgeChunk(context.Context, *v1.GetKnowledgeChunkRequest) (*v1.GetKnowledgeChunkReply, error)
	// HybridSearch HybridSearch 混合搜索
	// 结合语义搜索和关键词搜索，提供更精确的结果
	HybridSearch(context.Context, *v1.HybridSearchRequest) (*v1.HybridSearchReply, error)
	// ListDocuments ListDocuments 获取知识库中的文档列表
	// 支持分页查询和状态过滤
	ListDocuments(context.Context, *v1.ListDocumentsRequest) (*v1.ListDocumentsReply, error)
	// ListKnowledgeBases ListKnowledgeBases 获取用户的知识库列表
	// 支持分页查询和关键词搜索
	ListKnowledgeBases(context.Context, *v1.ListKnowledgeBasesRequest) (*v1.ListKnowledgeBasesReply, error)
	// ListKnowledgeChunks ListKnowledgeChunks 获取文档的知识块列表
	// 获取指定文档的所有知识块
	ListKnowledgeChunks(context.Context, *v1.ListKnowledgeChunksRequest) (*v1.ListKnowledgeChunksReply, error)
	// ProcessDocument ProcessDocument 处理文档
	// 手动触发文档的向量化处理
	ProcessDocument(context.Context, *v1.ProcessDocumentRequest) (*v1.ProcessDocumentReply, error)
	// ReindexKnowledgeBase ReindexKnowledgeBase 重新索引知识库
	// 重新对知识库中的所有文档进行向量化处理
	ReindexKnowledgeBase(context.Context, *v1.ReindexKnowledgeBaseRequest) (*v1.ReindexKnowledgeBaseReply, error)
	// SearchKnowledge SearchKnowledge 在知识库中搜索相关内容
	// 基于语义相似度搜索知识库内容，支持相似度阈值过滤
	SearchKnowledge(context.Context, *v1.SearchKnowledgeRequest) (*v1.SearchKnowledgeReply, error)
	// UpdateDocument UpdateDocument 更新文档内容
	// 更新已有文档的内容和元数据
	UpdateDocument(context.Context, *v1.UpdateDocumentRequest) (*v1.UpdateDocumentReply, error)
	// UpdateKnowledgeBase UpdateKnowledgeBase 更新知识库配置
	// 修改知识库的名称、描述、向量化模型等配置
	UpdateKnowledgeBase(context.Context, *v1.UpdateKnowledgeBaseRequest) (*v1.UpdateKnowledgeBaseReply, error)
	// UpdateKnowledgeChunk UpdateKnowledgeChunk 更新知识块
	// 更新知识块的内容和元数据
	UpdateKnowledgeChunk(context.Context, *v1.UpdateKnowledgeChunkRequest) (*v1.UpdateKnowledgeChunkReply, error)
	// UploadDocument UploadDocument 向知识库上传文档
	// 上传文档到指定知识库，自动进行向量化处理
	UploadDocument(context.Context, *v1.UploadDocumentRequest) (*v1.UploadDocumentReply, error)
}

func RegisterKnowledgeHTTPServer(s *http.Server, srv KnowledgeHTTPServer) {
	r := s.Route("/")
	r.POST("/api/ai/v1/knowledge/bases", _Knowledge_CreateKnowledgeBase0_HTTP_Handler(srv))
	r.PUT("/api/ai/v1/knowledge/bases/{id}", _Knowledge_UpdateKnowledgeBase0_HTTP_Handler(srv))
	r.DELETE("/api/ai/v1/knowledge/bases/{id}", _Knowledge_DeleteKnowledgeBase0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/knowledge/bases", _Knowledge_ListKnowledgeBases0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/knowledge/bases/{id}", _Knowledge_GetKnowledgeBase0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/knowledge/bases/{knowledge_base_id}/documents", _Knowledge_UploadDocument0_HTTP_Handler(srv))
	r.PUT("/api/ai/v1/knowledge/documents/{id}", _Knowledge_UpdateDocument0_HTTP_Handler(srv))
	r.DELETE("/api/ai/v1/knowledge/documents", _Knowledge_DeleteDocument0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/knowledge/bases/{knowledge_base_id}/documents", _Knowledge_ListDocuments0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/knowledge/documents/{id}", _Knowledge_GetDocument0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/knowledge/documents/{document_id}/process", _Knowledge_ProcessDocument0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/knowledge/search", _Knowledge_SearchKnowledge0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/knowledge/search/hybrid", _Knowledge_HybridSearch0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/knowledge/search/advanced", _Knowledge_AdvancedSearch0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/knowledge/chunks/{id}", _Knowledge_GetKnowledgeChunk0_HTTP_Handler(srv))
	r.PUT("/api/ai/v1/knowledge/chunks/{id}", _Knowledge_UpdateKnowledgeChunk0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/knowledge/documents/{document_id}/chunks", _Knowledge_ListKnowledgeChunks0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/knowledge/bases/{id}/reindex", _Knowledge_ReindexKnowledgeBase0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/knowledge/bases/{id}/stats", _Knowledge_GetKnowledgeBaseStats0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/knowledge/bases/{id}/analyze", _Knowledge_AnalyzeKnowledgeBase0_HTTP_Handler(srv))
}

func _Knowledge_CreateKnowledgeBase0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CreateKnowledgeBaseRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeCreateKnowledgeBase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateKnowledgeBase(ctx, req.(*v1.CreateKnowledgeBaseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateKnowledgeBaseReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_UpdateKnowledgeBase0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdateKnowledgeBaseRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeUpdateKnowledgeBase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateKnowledgeBase(ctx, req.(*v1.UpdateKnowledgeBaseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateKnowledgeBaseReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_DeleteKnowledgeBase0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteKnowledgeBaseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeDeleteKnowledgeBase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteKnowledgeBase(ctx, req.(*v1.DeleteKnowledgeBaseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteKnowledgeBaseReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_ListKnowledgeBases0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListKnowledgeBasesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeListKnowledgeBases)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListKnowledgeBases(ctx, req.(*v1.ListKnowledgeBasesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListKnowledgeBasesReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_GetKnowledgeBase0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetKnowledgeBaseRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeGetKnowledgeBase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetKnowledgeBase(ctx, req.(*v1.GetKnowledgeBaseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetKnowledgeBaseReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_UploadDocument0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UploadDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeUploadDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UploadDocument(ctx, req.(*v1.UploadDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UploadDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_UpdateDocument0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdateDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeUpdateDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDocument(ctx, req.(*v1.UpdateDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_DeleteDocument0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteDocumentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeDeleteDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDocument(ctx, req.(*v1.DeleteDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_ListDocuments0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListDocumentsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeListDocuments)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDocuments(ctx, req.(*v1.ListDocumentsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListDocumentsReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_GetDocument0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetDocumentRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeGetDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDocument(ctx, req.(*v1.GetDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_ProcessDocument0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ProcessDocumentRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeProcessDocument)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ProcessDocument(ctx, req.(*v1.ProcessDocumentRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ProcessDocumentReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_SearchKnowledge0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SearchKnowledgeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeSearchKnowledge)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchKnowledge(ctx, req.(*v1.SearchKnowledgeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.SearchKnowledgeReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_HybridSearch0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.HybridSearchRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeHybridSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HybridSearch(ctx, req.(*v1.HybridSearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.HybridSearchReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_AdvancedSearch0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.AdvancedSearchRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeAdvancedSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdvancedSearch(ctx, req.(*v1.AdvancedSearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.AdvancedSearchReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_GetKnowledgeChunk0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetKnowledgeChunkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeGetKnowledgeChunk)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetKnowledgeChunk(ctx, req.(*v1.GetKnowledgeChunkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetKnowledgeChunkReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_UpdateKnowledgeChunk0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdateKnowledgeChunkRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeUpdateKnowledgeChunk)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateKnowledgeChunk(ctx, req.(*v1.UpdateKnowledgeChunkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateKnowledgeChunkReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_ListKnowledgeChunks0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListKnowledgeChunksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeListKnowledgeChunks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListKnowledgeChunks(ctx, req.(*v1.ListKnowledgeChunksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListKnowledgeChunksReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_ReindexKnowledgeBase0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ReindexKnowledgeBaseRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeReindexKnowledgeBase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReindexKnowledgeBase(ctx, req.(*v1.ReindexKnowledgeBaseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ReindexKnowledgeBaseReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_GetKnowledgeBaseStats0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetKnowledgeBaseStatsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeGetKnowledgeBaseStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetKnowledgeBaseStats(ctx, req.(*v1.GetKnowledgeBaseStatsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetKnowledgeBaseStatsReply)
		return ctx.Result(200, reply)
	}
}

func _Knowledge_AnalyzeKnowledgeBase0_HTTP_Handler(srv KnowledgeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.AnalyzeKnowledgeBaseRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationKnowledgeAnalyzeKnowledgeBase)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AnalyzeKnowledgeBase(ctx, req.(*v1.AnalyzeKnowledgeBaseRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.AnalyzeKnowledgeBaseReply)
		return ctx.Result(200, reply)
	}
}

type KnowledgeHTTPClient interface {
	AdvancedSearch(ctx context.Context, req *v1.AdvancedSearchRequest, opts ...http.CallOption) (rsp *v1.AdvancedSearchReply, err error)
	AnalyzeKnowledgeBase(ctx context.Context, req *v1.AnalyzeKnowledgeBaseRequest, opts ...http.CallOption) (rsp *v1.AnalyzeKnowledgeBaseReply, err error)
	CreateKnowledgeBase(ctx context.Context, req *v1.CreateKnowledgeBaseRequest, opts ...http.CallOption) (rsp *v1.CreateKnowledgeBaseReply, err error)
	DeleteDocument(ctx context.Context, req *v1.DeleteDocumentRequest, opts ...http.CallOption) (rsp *v1.DeleteDocumentReply, err error)
	DeleteKnowledgeBase(ctx context.Context, req *v1.DeleteKnowledgeBaseRequest, opts ...http.CallOption) (rsp *v1.DeleteKnowledgeBaseReply, err error)
	GetDocument(ctx context.Context, req *v1.GetDocumentRequest, opts ...http.CallOption) (rsp *v1.GetDocumentReply, err error)
	GetKnowledgeBase(ctx context.Context, req *v1.GetKnowledgeBaseRequest, opts ...http.CallOption) (rsp *v1.GetKnowledgeBaseReply, err error)
	GetKnowledgeBaseStats(ctx context.Context, req *v1.GetKnowledgeBaseStatsRequest, opts ...http.CallOption) (rsp *v1.GetKnowledgeBaseStatsReply, err error)
	GetKnowledgeChunk(ctx context.Context, req *v1.GetKnowledgeChunkRequest, opts ...http.CallOption) (rsp *v1.GetKnowledgeChunkReply, err error)
	HybridSearch(ctx context.Context, req *v1.HybridSearchRequest, opts ...http.CallOption) (rsp *v1.HybridSearchReply, err error)
	ListDocuments(ctx context.Context, req *v1.ListDocumentsRequest, opts ...http.CallOption) (rsp *v1.ListDocumentsReply, err error)
	ListKnowledgeBases(ctx context.Context, req *v1.ListKnowledgeBasesRequest, opts ...http.CallOption) (rsp *v1.ListKnowledgeBasesReply, err error)
	ListKnowledgeChunks(ctx context.Context, req *v1.ListKnowledgeChunksRequest, opts ...http.CallOption) (rsp *v1.ListKnowledgeChunksReply, err error)
	ProcessDocument(ctx context.Context, req *v1.ProcessDocumentRequest, opts ...http.CallOption) (rsp *v1.ProcessDocumentReply, err error)
	ReindexKnowledgeBase(ctx context.Context, req *v1.ReindexKnowledgeBaseRequest, opts ...http.CallOption) (rsp *v1.ReindexKnowledgeBaseReply, err error)
	SearchKnowledge(ctx context.Context, req *v1.SearchKnowledgeRequest, opts ...http.CallOption) (rsp *v1.SearchKnowledgeReply, err error)
	UpdateDocument(ctx context.Context, req *v1.UpdateDocumentRequest, opts ...http.CallOption) (rsp *v1.UpdateDocumentReply, err error)
	UpdateKnowledgeBase(ctx context.Context, req *v1.UpdateKnowledgeBaseRequest, opts ...http.CallOption) (rsp *v1.UpdateKnowledgeBaseReply, err error)
	UpdateKnowledgeChunk(ctx context.Context, req *v1.UpdateKnowledgeChunkRequest, opts ...http.CallOption) (rsp *v1.UpdateKnowledgeChunkReply, err error)
	UploadDocument(ctx context.Context, req *v1.UploadDocumentRequest, opts ...http.CallOption) (rsp *v1.UploadDocumentReply, err error)
}

type KnowledgeHTTPClientImpl struct {
	cc *http.Client
}

func NewKnowledgeHTTPClient(client *http.Client) KnowledgeHTTPClient {
	return &KnowledgeHTTPClientImpl{client}
}

func (c *KnowledgeHTTPClientImpl) AdvancedSearch(ctx context.Context, in *v1.AdvancedSearchRequest, opts ...http.CallOption) (*v1.AdvancedSearchReply, error) {
	var out v1.AdvancedSearchReply
	pattern := "/api/ai/v1/knowledge/search/advanced"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeAdvancedSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) AnalyzeKnowledgeBase(ctx context.Context, in *v1.AnalyzeKnowledgeBaseRequest, opts ...http.CallOption) (*v1.AnalyzeKnowledgeBaseReply, error) {
	var out v1.AnalyzeKnowledgeBaseReply
	pattern := "/api/ai/v1/knowledge/bases/{id}/analyze"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeAnalyzeKnowledgeBase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) CreateKnowledgeBase(ctx context.Context, in *v1.CreateKnowledgeBaseRequest, opts ...http.CallOption) (*v1.CreateKnowledgeBaseReply, error) {
	var out v1.CreateKnowledgeBaseReply
	pattern := "/api/ai/v1/knowledge/bases"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeCreateKnowledgeBase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) DeleteDocument(ctx context.Context, in *v1.DeleteDocumentRequest, opts ...http.CallOption) (*v1.DeleteDocumentReply, error) {
	var out v1.DeleteDocumentReply
	pattern := "/api/ai/v1/knowledge/documents"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeDeleteDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) DeleteKnowledgeBase(ctx context.Context, in *v1.DeleteKnowledgeBaseRequest, opts ...http.CallOption) (*v1.DeleteKnowledgeBaseReply, error) {
	var out v1.DeleteKnowledgeBaseReply
	pattern := "/api/ai/v1/knowledge/bases/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeDeleteKnowledgeBase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) GetDocument(ctx context.Context, in *v1.GetDocumentRequest, opts ...http.CallOption) (*v1.GetDocumentReply, error) {
	var out v1.GetDocumentReply
	pattern := "/api/ai/v1/knowledge/documents/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeGetDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) GetKnowledgeBase(ctx context.Context, in *v1.GetKnowledgeBaseRequest, opts ...http.CallOption) (*v1.GetKnowledgeBaseReply, error) {
	var out v1.GetKnowledgeBaseReply
	pattern := "/api/ai/v1/knowledge/bases/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeGetKnowledgeBase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) GetKnowledgeBaseStats(ctx context.Context, in *v1.GetKnowledgeBaseStatsRequest, opts ...http.CallOption) (*v1.GetKnowledgeBaseStatsReply, error) {
	var out v1.GetKnowledgeBaseStatsReply
	pattern := "/api/ai/v1/knowledge/bases/{id}/stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeGetKnowledgeBaseStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) GetKnowledgeChunk(ctx context.Context, in *v1.GetKnowledgeChunkRequest, opts ...http.CallOption) (*v1.GetKnowledgeChunkReply, error) {
	var out v1.GetKnowledgeChunkReply
	pattern := "/api/ai/v1/knowledge/chunks/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeGetKnowledgeChunk))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) HybridSearch(ctx context.Context, in *v1.HybridSearchRequest, opts ...http.CallOption) (*v1.HybridSearchReply, error) {
	var out v1.HybridSearchReply
	pattern := "/api/ai/v1/knowledge/search/hybrid"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeHybridSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) ListDocuments(ctx context.Context, in *v1.ListDocumentsRequest, opts ...http.CallOption) (*v1.ListDocumentsReply, error) {
	var out v1.ListDocumentsReply
	pattern := "/api/ai/v1/knowledge/bases/{knowledge_base_id}/documents"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeListDocuments))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) ListKnowledgeBases(ctx context.Context, in *v1.ListKnowledgeBasesRequest, opts ...http.CallOption) (*v1.ListKnowledgeBasesReply, error) {
	var out v1.ListKnowledgeBasesReply
	pattern := "/api/ai/v1/knowledge/bases"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeListKnowledgeBases))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) ListKnowledgeChunks(ctx context.Context, in *v1.ListKnowledgeChunksRequest, opts ...http.CallOption) (*v1.ListKnowledgeChunksReply, error) {
	var out v1.ListKnowledgeChunksReply
	pattern := "/api/ai/v1/knowledge/documents/{document_id}/chunks"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationKnowledgeListKnowledgeChunks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) ProcessDocument(ctx context.Context, in *v1.ProcessDocumentRequest, opts ...http.CallOption) (*v1.ProcessDocumentReply, error) {
	var out v1.ProcessDocumentReply
	pattern := "/api/ai/v1/knowledge/documents/{document_id}/process"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeProcessDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) ReindexKnowledgeBase(ctx context.Context, in *v1.ReindexKnowledgeBaseRequest, opts ...http.CallOption) (*v1.ReindexKnowledgeBaseReply, error) {
	var out v1.ReindexKnowledgeBaseReply
	pattern := "/api/ai/v1/knowledge/bases/{id}/reindex"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeReindexKnowledgeBase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) SearchKnowledge(ctx context.Context, in *v1.SearchKnowledgeRequest, opts ...http.CallOption) (*v1.SearchKnowledgeReply, error) {
	var out v1.SearchKnowledgeReply
	pattern := "/api/ai/v1/knowledge/search"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeSearchKnowledge))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) UpdateDocument(ctx context.Context, in *v1.UpdateDocumentRequest, opts ...http.CallOption) (*v1.UpdateDocumentReply, error) {
	var out v1.UpdateDocumentReply
	pattern := "/api/ai/v1/knowledge/documents/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeUpdateDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) UpdateKnowledgeBase(ctx context.Context, in *v1.UpdateKnowledgeBaseRequest, opts ...http.CallOption) (*v1.UpdateKnowledgeBaseReply, error) {
	var out v1.UpdateKnowledgeBaseReply
	pattern := "/api/ai/v1/knowledge/bases/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeUpdateKnowledgeBase))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) UpdateKnowledgeChunk(ctx context.Context, in *v1.UpdateKnowledgeChunkRequest, opts ...http.CallOption) (*v1.UpdateKnowledgeChunkReply, error) {
	var out v1.UpdateKnowledgeChunkReply
	pattern := "/api/ai/v1/knowledge/chunks/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeUpdateKnowledgeChunk))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *KnowledgeHTTPClientImpl) UploadDocument(ctx context.Context, in *v1.UploadDocumentRequest, opts ...http.CallOption) (*v1.UploadDocumentReply, error) {
	var out v1.UploadDocumentReply
	pattern := "/api/ai/v1/knowledge/bases/{knowledge_base_id}/documents"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationKnowledgeUploadDocument))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
