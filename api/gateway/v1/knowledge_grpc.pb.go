// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: api/gateway/v1/knowledge.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	v1 "universal/api/ai/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Knowledge_CreateKnowledgeBase_FullMethodName   = "/api.universal.v1.Knowledge/CreateKnowledgeBase"
	Knowledge_UpdateKnowledgeBase_FullMethodName   = "/api.universal.v1.Knowledge/UpdateKnowledgeBase"
	Knowledge_DeleteKnowledgeBase_FullMethodName   = "/api.universal.v1.Knowledge/DeleteKnowledgeBase"
	Knowledge_ListKnowledgeBases_FullMethodName    = "/api.universal.v1.Knowledge/ListKnowledgeBases"
	Knowledge_GetKnowledgeBase_FullMethodName      = "/api.universal.v1.Knowledge/GetKnowledgeBase"
	Knowledge_UploadDocument_FullMethodName        = "/api.universal.v1.Knowledge/UploadDocument"
	Knowledge_BatchUploadDocuments_FullMethodName  = "/api.universal.v1.Knowledge/BatchUploadDocuments"
	Knowledge_UpdateDocument_FullMethodName        = "/api.universal.v1.Knowledge/UpdateDocument"
	Knowledge_DeleteDocument_FullMethodName        = "/api.universal.v1.Knowledge/DeleteDocument"
	Knowledge_ListDocuments_FullMethodName         = "/api.universal.v1.Knowledge/ListDocuments"
	Knowledge_GetDocument_FullMethodName           = "/api.universal.v1.Knowledge/GetDocument"
	Knowledge_ProcessDocument_FullMethodName       = "/api.universal.v1.Knowledge/ProcessDocument"
	Knowledge_SearchKnowledge_FullMethodName       = "/api.universal.v1.Knowledge/SearchKnowledge"
	Knowledge_HybridSearch_FullMethodName          = "/api.universal.v1.Knowledge/HybridSearch"
	Knowledge_AdvancedSearch_FullMethodName        = "/api.universal.v1.Knowledge/AdvancedSearch"
	Knowledge_GetKnowledgeChunk_FullMethodName     = "/api.universal.v1.Knowledge/GetKnowledgeChunk"
	Knowledge_UpdateKnowledgeChunk_FullMethodName  = "/api.universal.v1.Knowledge/UpdateKnowledgeChunk"
	Knowledge_ListKnowledgeChunks_FullMethodName   = "/api.universal.v1.Knowledge/ListKnowledgeChunks"
	Knowledge_ReindexKnowledgeBase_FullMethodName  = "/api.universal.v1.Knowledge/ReindexKnowledgeBase"
	Knowledge_GetKnowledgeBaseStats_FullMethodName = "/api.universal.v1.Knowledge/GetKnowledgeBaseStats"
	Knowledge_AnalyzeKnowledgeBase_FullMethodName  = "/api.universal.v1.Knowledge/AnalyzeKnowledgeBase"
)

// KnowledgeClient is the client API for Knowledge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Gateway 知识库服务接口 - 提供HTTP访问知识库服务的统一入口
type KnowledgeClient interface {
	// CreateKnowledgeBase 创建新的知识库
	// 为用户创建知识库，可以指定向量化模型和分块策略
	CreateKnowledgeBase(ctx context.Context, in *v1.CreateKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.CreateKnowledgeBaseReply, error)
	// UpdateKnowledgeBase 更新知识库配置
	// 修改知识库的名称、描述、向量化模型等配置
	UpdateKnowledgeBase(ctx context.Context, in *v1.UpdateKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.UpdateKnowledgeBaseReply, error)
	// DeleteKnowledgeBase 删除知识库
	// 软删除知识库及其所有文档和向量数据
	DeleteKnowledgeBase(ctx context.Context, in *v1.DeleteKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.DeleteKnowledgeBaseReply, error)
	// ListKnowledgeBases 获取用户的知识库列表
	// 支持分页查询和关键词搜索
	ListKnowledgeBases(ctx context.Context, in *v1.ListKnowledgeBasesRequest, opts ...grpc.CallOption) (*v1.ListKnowledgeBasesReply, error)
	// GetKnowledgeBase 获取知识库详细信息
	// 根据ID获取知识库的完整信息和统计数据
	GetKnowledgeBase(ctx context.Context, in *v1.GetKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.GetKnowledgeBaseReply, error)
	// UploadDocument 向知识库上传文档
	// 上传文档到指定知识库，自动进行向量化处理
	UploadDocument(ctx context.Context, in *v1.UploadDocumentRequest, opts ...grpc.CallOption) (*v1.UploadDocumentReply, error)
	// BatchUploadDocuments 批量上传文档
	// 批量上传多个文档，支持进度跟踪
	BatchUploadDocuments(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v1.BatchUploadDocumentsRequest, v1.BatchUploadDocumentsReply], error)
	// UpdateDocument 更新文档内容
	// 更新已有文档的内容和元数据
	UpdateDocument(ctx context.Context, in *v1.UpdateDocumentRequest, opts ...grpc.CallOption) (*v1.UpdateDocumentReply, error)
	// DeleteDocument 删除文档
	// 从知识库中删除指定文档及其向量数据
	DeleteDocument(ctx context.Context, in *v1.DeleteDocumentRequest, opts ...grpc.CallOption) (*v1.DeleteDocumentReply, error)
	// ListDocuments 获取知识库中的文档列表
	// 支持分页查询和状态过滤
	ListDocuments(ctx context.Context, in *v1.ListDocumentsRequest, opts ...grpc.CallOption) (*v1.ListDocumentsReply, error)
	// GetDocument 获取文档详细信息
	// 根据ID获取文档的完整信息
	GetDocument(ctx context.Context, in *v1.GetDocumentRequest, opts ...grpc.CallOption) (*v1.GetDocumentReply, error)
	// ProcessDocument 处理文档
	// 手动触发文档的向量化处理
	ProcessDocument(ctx context.Context, in *v1.ProcessDocumentRequest, opts ...grpc.CallOption) (*v1.ProcessDocumentReply, error)
	// SearchKnowledge 在知识库中搜索相关内容
	// 基于语义相似度搜索知识库内容，支持相似度阈值过滤
	SearchKnowledge(ctx context.Context, in *v1.SearchKnowledgeRequest, opts ...grpc.CallOption) (*v1.SearchKnowledgeReply, error)
	// HybridSearch 混合搜索
	// 结合语义搜索和关键词搜索，提供更精确的结果
	HybridSearch(ctx context.Context, in *v1.HybridSearchRequest, opts ...grpc.CallOption) (*v1.HybridSearchReply, error)
	// AdvancedSearch 高级搜索
	// 支持多种搜索条件和过滤器的高级搜索
	AdvancedSearch(ctx context.Context, in *v1.AdvancedSearchRequest, opts ...grpc.CallOption) (*v1.AdvancedSearchReply, error)
	// GetKnowledgeChunk 获取知识块详细信息
	// 根据块ID获取知识块的完整信息
	GetKnowledgeChunk(ctx context.Context, in *v1.GetKnowledgeChunkRequest, opts ...grpc.CallOption) (*v1.GetKnowledgeChunkReply, error)
	// UpdateKnowledgeChunk 更新知识块
	// 更新知识块的内容和元数据
	UpdateKnowledgeChunk(ctx context.Context, in *v1.UpdateKnowledgeChunkRequest, opts ...grpc.CallOption) (*v1.UpdateKnowledgeChunkReply, error)
	// ListKnowledgeChunks 获取文档的知识块列表
	// 获取指定文档的所有知识块
	ListKnowledgeChunks(ctx context.Context, in *v1.ListKnowledgeChunksRequest, opts ...grpc.CallOption) (*v1.ListKnowledgeChunksReply, error)
	// ReindexKnowledgeBase 重新索引知识库
	// 重新对知识库中的所有文档进行向量化处理
	ReindexKnowledgeBase(ctx context.Context, in *v1.ReindexKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.ReindexKnowledgeBaseReply, error)
	// GetKnowledgeBaseStats 获取知识库统计信息
	// 返回知识库的详细统计数据
	GetKnowledgeBaseStats(ctx context.Context, in *v1.GetKnowledgeBaseStatsRequest, opts ...grpc.CallOption) (*v1.GetKnowledgeBaseStatsReply, error)
	// AnalyzeKnowledgeBase 分析知识库内容
	// 分析知识库的内容分布、主题等
	AnalyzeKnowledgeBase(ctx context.Context, in *v1.AnalyzeKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.AnalyzeKnowledgeBaseReply, error)
}

type knowledgeClient struct {
	cc grpc.ClientConnInterface
}

func NewKnowledgeClient(cc grpc.ClientConnInterface) KnowledgeClient {
	return &knowledgeClient{cc}
}

func (c *knowledgeClient) CreateKnowledgeBase(ctx context.Context, in *v1.CreateKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.CreateKnowledgeBaseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CreateKnowledgeBaseReply)
	err := c.cc.Invoke(ctx, Knowledge_CreateKnowledgeBase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) UpdateKnowledgeBase(ctx context.Context, in *v1.UpdateKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.UpdateKnowledgeBaseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateKnowledgeBaseReply)
	err := c.cc.Invoke(ctx, Knowledge_UpdateKnowledgeBase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) DeleteKnowledgeBase(ctx context.Context, in *v1.DeleteKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.DeleteKnowledgeBaseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteKnowledgeBaseReply)
	err := c.cc.Invoke(ctx, Knowledge_DeleteKnowledgeBase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ListKnowledgeBases(ctx context.Context, in *v1.ListKnowledgeBasesRequest, opts ...grpc.CallOption) (*v1.ListKnowledgeBasesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListKnowledgeBasesReply)
	err := c.cc.Invoke(ctx, Knowledge_ListKnowledgeBases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) GetKnowledgeBase(ctx context.Context, in *v1.GetKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.GetKnowledgeBaseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetKnowledgeBaseReply)
	err := c.cc.Invoke(ctx, Knowledge_GetKnowledgeBase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) UploadDocument(ctx context.Context, in *v1.UploadDocumentRequest, opts ...grpc.CallOption) (*v1.UploadDocumentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UploadDocumentReply)
	err := c.cc.Invoke(ctx, Knowledge_UploadDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) BatchUploadDocuments(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[v1.BatchUploadDocumentsRequest, v1.BatchUploadDocumentsReply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Knowledge_ServiceDesc.Streams[0], Knowledge_BatchUploadDocuments_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[v1.BatchUploadDocumentsRequest, v1.BatchUploadDocumentsReply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Knowledge_BatchUploadDocumentsClient = grpc.BidiStreamingClient[v1.BatchUploadDocumentsRequest, v1.BatchUploadDocumentsReply]

func (c *knowledgeClient) UpdateDocument(ctx context.Context, in *v1.UpdateDocumentRequest, opts ...grpc.CallOption) (*v1.UpdateDocumentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateDocumentReply)
	err := c.cc.Invoke(ctx, Knowledge_UpdateDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) DeleteDocument(ctx context.Context, in *v1.DeleteDocumentRequest, opts ...grpc.CallOption) (*v1.DeleteDocumentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.DeleteDocumentReply)
	err := c.cc.Invoke(ctx, Knowledge_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ListDocuments(ctx context.Context, in *v1.ListDocumentsRequest, opts ...grpc.CallOption) (*v1.ListDocumentsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListDocumentsReply)
	err := c.cc.Invoke(ctx, Knowledge_ListDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) GetDocument(ctx context.Context, in *v1.GetDocumentRequest, opts ...grpc.CallOption) (*v1.GetDocumentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetDocumentReply)
	err := c.cc.Invoke(ctx, Knowledge_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ProcessDocument(ctx context.Context, in *v1.ProcessDocumentRequest, opts ...grpc.CallOption) (*v1.ProcessDocumentReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ProcessDocumentReply)
	err := c.cc.Invoke(ctx, Knowledge_ProcessDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) SearchKnowledge(ctx context.Context, in *v1.SearchKnowledgeRequest, opts ...grpc.CallOption) (*v1.SearchKnowledgeReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.SearchKnowledgeReply)
	err := c.cc.Invoke(ctx, Knowledge_SearchKnowledge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) HybridSearch(ctx context.Context, in *v1.HybridSearchRequest, opts ...grpc.CallOption) (*v1.HybridSearchReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.HybridSearchReply)
	err := c.cc.Invoke(ctx, Knowledge_HybridSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) AdvancedSearch(ctx context.Context, in *v1.AdvancedSearchRequest, opts ...grpc.CallOption) (*v1.AdvancedSearchReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.AdvancedSearchReply)
	err := c.cc.Invoke(ctx, Knowledge_AdvancedSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) GetKnowledgeChunk(ctx context.Context, in *v1.GetKnowledgeChunkRequest, opts ...grpc.CallOption) (*v1.GetKnowledgeChunkReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetKnowledgeChunkReply)
	err := c.cc.Invoke(ctx, Knowledge_GetKnowledgeChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) UpdateKnowledgeChunk(ctx context.Context, in *v1.UpdateKnowledgeChunkRequest, opts ...grpc.CallOption) (*v1.UpdateKnowledgeChunkReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.UpdateKnowledgeChunkReply)
	err := c.cc.Invoke(ctx, Knowledge_UpdateKnowledgeChunk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ListKnowledgeChunks(ctx context.Context, in *v1.ListKnowledgeChunksRequest, opts ...grpc.CallOption) (*v1.ListKnowledgeChunksReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ListKnowledgeChunksReply)
	err := c.cc.Invoke(ctx, Knowledge_ListKnowledgeChunks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) ReindexKnowledgeBase(ctx context.Context, in *v1.ReindexKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.ReindexKnowledgeBaseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.ReindexKnowledgeBaseReply)
	err := c.cc.Invoke(ctx, Knowledge_ReindexKnowledgeBase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) GetKnowledgeBaseStats(ctx context.Context, in *v1.GetKnowledgeBaseStatsRequest, opts ...grpc.CallOption) (*v1.GetKnowledgeBaseStatsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.GetKnowledgeBaseStatsReply)
	err := c.cc.Invoke(ctx, Knowledge_GetKnowledgeBaseStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *knowledgeClient) AnalyzeKnowledgeBase(ctx context.Context, in *v1.AnalyzeKnowledgeBaseRequest, opts ...grpc.CallOption) (*v1.AnalyzeKnowledgeBaseReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.AnalyzeKnowledgeBaseReply)
	err := c.cc.Invoke(ctx, Knowledge_AnalyzeKnowledgeBase_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KnowledgeServer is the server API for Knowledge service.
// All implementations must embed UnimplementedKnowledgeServer
// for forward compatibility.
//
// Gateway 知识库服务接口 - 提供HTTP访问知识库服务的统一入口
type KnowledgeServer interface {
	// CreateKnowledgeBase 创建新的知识库
	// 为用户创建知识库，可以指定向量化模型和分块策略
	CreateKnowledgeBase(context.Context, *v1.CreateKnowledgeBaseRequest) (*v1.CreateKnowledgeBaseReply, error)
	// UpdateKnowledgeBase 更新知识库配置
	// 修改知识库的名称、描述、向量化模型等配置
	UpdateKnowledgeBase(context.Context, *v1.UpdateKnowledgeBaseRequest) (*v1.UpdateKnowledgeBaseReply, error)
	// DeleteKnowledgeBase 删除知识库
	// 软删除知识库及其所有文档和向量数据
	DeleteKnowledgeBase(context.Context, *v1.DeleteKnowledgeBaseRequest) (*v1.DeleteKnowledgeBaseReply, error)
	// ListKnowledgeBases 获取用户的知识库列表
	// 支持分页查询和关键词搜索
	ListKnowledgeBases(context.Context, *v1.ListKnowledgeBasesRequest) (*v1.ListKnowledgeBasesReply, error)
	// GetKnowledgeBase 获取知识库详细信息
	// 根据ID获取知识库的完整信息和统计数据
	GetKnowledgeBase(context.Context, *v1.GetKnowledgeBaseRequest) (*v1.GetKnowledgeBaseReply, error)
	// UploadDocument 向知识库上传文档
	// 上传文档到指定知识库，自动进行向量化处理
	UploadDocument(context.Context, *v1.UploadDocumentRequest) (*v1.UploadDocumentReply, error)
	// BatchUploadDocuments 批量上传文档
	// 批量上传多个文档，支持进度跟踪
	BatchUploadDocuments(grpc.BidiStreamingServer[v1.BatchUploadDocumentsRequest, v1.BatchUploadDocumentsReply]) error
	// UpdateDocument 更新文档内容
	// 更新已有文档的内容和元数据
	UpdateDocument(context.Context, *v1.UpdateDocumentRequest) (*v1.UpdateDocumentReply, error)
	// DeleteDocument 删除文档
	// 从知识库中删除指定文档及其向量数据
	DeleteDocument(context.Context, *v1.DeleteDocumentRequest) (*v1.DeleteDocumentReply, error)
	// ListDocuments 获取知识库中的文档列表
	// 支持分页查询和状态过滤
	ListDocuments(context.Context, *v1.ListDocumentsRequest) (*v1.ListDocumentsReply, error)
	// GetDocument 获取文档详细信息
	// 根据ID获取文档的完整信息
	GetDocument(context.Context, *v1.GetDocumentRequest) (*v1.GetDocumentReply, error)
	// ProcessDocument 处理文档
	// 手动触发文档的向量化处理
	ProcessDocument(context.Context, *v1.ProcessDocumentRequest) (*v1.ProcessDocumentReply, error)
	// SearchKnowledge 在知识库中搜索相关内容
	// 基于语义相似度搜索知识库内容，支持相似度阈值过滤
	SearchKnowledge(context.Context, *v1.SearchKnowledgeRequest) (*v1.SearchKnowledgeReply, error)
	// HybridSearch 混合搜索
	// 结合语义搜索和关键词搜索，提供更精确的结果
	HybridSearch(context.Context, *v1.HybridSearchRequest) (*v1.HybridSearchReply, error)
	// AdvancedSearch 高级搜索
	// 支持多种搜索条件和过滤器的高级搜索
	AdvancedSearch(context.Context, *v1.AdvancedSearchRequest) (*v1.AdvancedSearchReply, error)
	// GetKnowledgeChunk 获取知识块详细信息
	// 根据块ID获取知识块的完整信息
	GetKnowledgeChunk(context.Context, *v1.GetKnowledgeChunkRequest) (*v1.GetKnowledgeChunkReply, error)
	// UpdateKnowledgeChunk 更新知识块
	// 更新知识块的内容和元数据
	UpdateKnowledgeChunk(context.Context, *v1.UpdateKnowledgeChunkRequest) (*v1.UpdateKnowledgeChunkReply, error)
	// ListKnowledgeChunks 获取文档的知识块列表
	// 获取指定文档的所有知识块
	ListKnowledgeChunks(context.Context, *v1.ListKnowledgeChunksRequest) (*v1.ListKnowledgeChunksReply, error)
	// ReindexKnowledgeBase 重新索引知识库
	// 重新对知识库中的所有文档进行向量化处理
	ReindexKnowledgeBase(context.Context, *v1.ReindexKnowledgeBaseRequest) (*v1.ReindexKnowledgeBaseReply, error)
	// GetKnowledgeBaseStats 获取知识库统计信息
	// 返回知识库的详细统计数据
	GetKnowledgeBaseStats(context.Context, *v1.GetKnowledgeBaseStatsRequest) (*v1.GetKnowledgeBaseStatsReply, error)
	// AnalyzeKnowledgeBase 分析知识库内容
	// 分析知识库的内容分布、主题等
	AnalyzeKnowledgeBase(context.Context, *v1.AnalyzeKnowledgeBaseRequest) (*v1.AnalyzeKnowledgeBaseReply, error)
	mustEmbedUnimplementedKnowledgeServer()
}

// UnimplementedKnowledgeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKnowledgeServer struct{}

func (UnimplementedKnowledgeServer) CreateKnowledgeBase(context.Context, *v1.CreateKnowledgeBaseRequest) (*v1.CreateKnowledgeBaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKnowledgeBase not implemented")
}
func (UnimplementedKnowledgeServer) UpdateKnowledgeBase(context.Context, *v1.UpdateKnowledgeBaseRequest) (*v1.UpdateKnowledgeBaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledgeBase not implemented")
}
func (UnimplementedKnowledgeServer) DeleteKnowledgeBase(context.Context, *v1.DeleteKnowledgeBaseRequest) (*v1.DeleteKnowledgeBaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKnowledgeBase not implemented")
}
func (UnimplementedKnowledgeServer) ListKnowledgeBases(context.Context, *v1.ListKnowledgeBasesRequest) (*v1.ListKnowledgeBasesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnowledgeBases not implemented")
}
func (UnimplementedKnowledgeServer) GetKnowledgeBase(context.Context, *v1.GetKnowledgeBaseRequest) (*v1.GetKnowledgeBaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeBase not implemented")
}
func (UnimplementedKnowledgeServer) UploadDocument(context.Context, *v1.UploadDocumentRequest) (*v1.UploadDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDocument not implemented")
}
func (UnimplementedKnowledgeServer) BatchUploadDocuments(grpc.BidiStreamingServer[v1.BatchUploadDocumentsRequest, v1.BatchUploadDocumentsReply]) error {
	return status.Errorf(codes.Unimplemented, "method BatchUploadDocuments not implemented")
}
func (UnimplementedKnowledgeServer) UpdateDocument(context.Context, *v1.UpdateDocumentRequest) (*v1.UpdateDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedKnowledgeServer) DeleteDocument(context.Context, *v1.DeleteDocumentRequest) (*v1.DeleteDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedKnowledgeServer) ListDocuments(context.Context, *v1.ListDocumentsRequest) (*v1.ListDocumentsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedKnowledgeServer) GetDocument(context.Context, *v1.GetDocumentRequest) (*v1.GetDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedKnowledgeServer) ProcessDocument(context.Context, *v1.ProcessDocumentRequest) (*v1.ProcessDocumentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessDocument not implemented")
}
func (UnimplementedKnowledgeServer) SearchKnowledge(context.Context, *v1.SearchKnowledgeRequest) (*v1.SearchKnowledgeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchKnowledge not implemented")
}
func (UnimplementedKnowledgeServer) HybridSearch(context.Context, *v1.HybridSearchRequest) (*v1.HybridSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridSearch not implemented")
}
func (UnimplementedKnowledgeServer) AdvancedSearch(context.Context, *v1.AdvancedSearchRequest) (*v1.AdvancedSearchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdvancedSearch not implemented")
}
func (UnimplementedKnowledgeServer) GetKnowledgeChunk(context.Context, *v1.GetKnowledgeChunkRequest) (*v1.GetKnowledgeChunkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeChunk not implemented")
}
func (UnimplementedKnowledgeServer) UpdateKnowledgeChunk(context.Context, *v1.UpdateKnowledgeChunkRequest) (*v1.UpdateKnowledgeChunkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKnowledgeChunk not implemented")
}
func (UnimplementedKnowledgeServer) ListKnowledgeChunks(context.Context, *v1.ListKnowledgeChunksRequest) (*v1.ListKnowledgeChunksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnowledgeChunks not implemented")
}
func (UnimplementedKnowledgeServer) ReindexKnowledgeBase(context.Context, *v1.ReindexKnowledgeBaseRequest) (*v1.ReindexKnowledgeBaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReindexKnowledgeBase not implemented")
}
func (UnimplementedKnowledgeServer) GetKnowledgeBaseStats(context.Context, *v1.GetKnowledgeBaseStatsRequest) (*v1.GetKnowledgeBaseStatsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnowledgeBaseStats not implemented")
}
func (UnimplementedKnowledgeServer) AnalyzeKnowledgeBase(context.Context, *v1.AnalyzeKnowledgeBaseRequest) (*v1.AnalyzeKnowledgeBaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeKnowledgeBase not implemented")
}
func (UnimplementedKnowledgeServer) mustEmbedUnimplementedKnowledgeServer() {}
func (UnimplementedKnowledgeServer) testEmbeddedByValue()                   {}

// UnsafeKnowledgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KnowledgeServer will
// result in compilation errors.
type UnsafeKnowledgeServer interface {
	mustEmbedUnimplementedKnowledgeServer()
}

func RegisterKnowledgeServer(s grpc.ServiceRegistrar, srv KnowledgeServer) {
	// If the following call pancis, it indicates UnimplementedKnowledgeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Knowledge_ServiceDesc, srv)
}

func _Knowledge_CreateKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CreateKnowledgeBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).CreateKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_CreateKnowledgeBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).CreateKnowledgeBase(ctx, req.(*v1.CreateKnowledgeBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_UpdateKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateKnowledgeBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).UpdateKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_UpdateKnowledgeBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).UpdateKnowledgeBase(ctx, req.(*v1.UpdateKnowledgeBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_DeleteKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteKnowledgeBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).DeleteKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_DeleteKnowledgeBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).DeleteKnowledgeBase(ctx, req.(*v1.DeleteKnowledgeBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ListKnowledgeBases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListKnowledgeBasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ListKnowledgeBases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_ListKnowledgeBases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ListKnowledgeBases(ctx, req.(*v1.ListKnowledgeBasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_GetKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetKnowledgeBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).GetKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_GetKnowledgeBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).GetKnowledgeBase(ctx, req.(*v1.GetKnowledgeBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_UploadDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UploadDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).UploadDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_UploadDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).UploadDocument(ctx, req.(*v1.UploadDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_BatchUploadDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KnowledgeServer).BatchUploadDocuments(&grpc.GenericServerStream[v1.BatchUploadDocumentsRequest, v1.BatchUploadDocumentsReply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Knowledge_BatchUploadDocumentsServer = grpc.BidiStreamingServer[v1.BatchUploadDocumentsRequest, v1.BatchUploadDocumentsReply]

func _Knowledge_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_UpdateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).UpdateDocument(ctx, req.(*v1.UpdateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).DeleteDocument(ctx, req.(*v1.DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ListDocuments(ctx, req.(*v1.ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).GetDocument(ctx, req.(*v1.GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ProcessDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ProcessDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ProcessDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_ProcessDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ProcessDocument(ctx, req.(*v1.ProcessDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_SearchKnowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.SearchKnowledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).SearchKnowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_SearchKnowledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).SearchKnowledge(ctx, req.(*v1.SearchKnowledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_HybridSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.HybridSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).HybridSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_HybridSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).HybridSearch(ctx, req.(*v1.HybridSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_AdvancedSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AdvancedSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).AdvancedSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_AdvancedSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).AdvancedSearch(ctx, req.(*v1.AdvancedSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_GetKnowledgeChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetKnowledgeChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).GetKnowledgeChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_GetKnowledgeChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).GetKnowledgeChunk(ctx, req.(*v1.GetKnowledgeChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_UpdateKnowledgeChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.UpdateKnowledgeChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).UpdateKnowledgeChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_UpdateKnowledgeChunk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).UpdateKnowledgeChunk(ctx, req.(*v1.UpdateKnowledgeChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ListKnowledgeChunks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ListKnowledgeChunksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ListKnowledgeChunks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_ListKnowledgeChunks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ListKnowledgeChunks(ctx, req.(*v1.ListKnowledgeChunksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_ReindexKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ReindexKnowledgeBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).ReindexKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_ReindexKnowledgeBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).ReindexKnowledgeBase(ctx, req.(*v1.ReindexKnowledgeBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_GetKnowledgeBaseStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetKnowledgeBaseStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).GetKnowledgeBaseStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_GetKnowledgeBaseStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).GetKnowledgeBaseStats(ctx, req.(*v1.GetKnowledgeBaseStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Knowledge_AnalyzeKnowledgeBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.AnalyzeKnowledgeBaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KnowledgeServer).AnalyzeKnowledgeBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Knowledge_AnalyzeKnowledgeBase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KnowledgeServer).AnalyzeKnowledgeBase(ctx, req.(*v1.AnalyzeKnowledgeBaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Knowledge_ServiceDesc is the grpc.ServiceDesc for Knowledge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Knowledge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.universal.v1.Knowledge",
	HandlerType: (*KnowledgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKnowledgeBase",
			Handler:    _Knowledge_CreateKnowledgeBase_Handler,
		},
		{
			MethodName: "UpdateKnowledgeBase",
			Handler:    _Knowledge_UpdateKnowledgeBase_Handler,
		},
		{
			MethodName: "DeleteKnowledgeBase",
			Handler:    _Knowledge_DeleteKnowledgeBase_Handler,
		},
		{
			MethodName: "ListKnowledgeBases",
			Handler:    _Knowledge_ListKnowledgeBases_Handler,
		},
		{
			MethodName: "GetKnowledgeBase",
			Handler:    _Knowledge_GetKnowledgeBase_Handler,
		},
		{
			MethodName: "UploadDocument",
			Handler:    _Knowledge_UploadDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _Knowledge_UpdateDocument_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _Knowledge_DeleteDocument_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _Knowledge_ListDocuments_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _Knowledge_GetDocument_Handler,
		},
		{
			MethodName: "ProcessDocument",
			Handler:    _Knowledge_ProcessDocument_Handler,
		},
		{
			MethodName: "SearchKnowledge",
			Handler:    _Knowledge_SearchKnowledge_Handler,
		},
		{
			MethodName: "HybridSearch",
			Handler:    _Knowledge_HybridSearch_Handler,
		},
		{
			MethodName: "AdvancedSearch",
			Handler:    _Knowledge_AdvancedSearch_Handler,
		},
		{
			MethodName: "GetKnowledgeChunk",
			Handler:    _Knowledge_GetKnowledgeChunk_Handler,
		},
		{
			MethodName: "UpdateKnowledgeChunk",
			Handler:    _Knowledge_UpdateKnowledgeChunk_Handler,
		},
		{
			MethodName: "ListKnowledgeChunks",
			Handler:    _Knowledge_ListKnowledgeChunks_Handler,
		},
		{
			MethodName: "ReindexKnowledgeBase",
			Handler:    _Knowledge_ReindexKnowledgeBase_Handler,
		},
		{
			MethodName: "GetKnowledgeBaseStats",
			Handler:    _Knowledge_GetKnowledgeBaseStats_Handler,
		},
		{
			MethodName: "AnalyzeKnowledgeBase",
			Handler:    _Knowledge_AnalyzeKnowledgeBase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchUploadDocuments",
			Handler:       _Knowledge_BatchUploadDocuments_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/gateway/v1/knowledge.proto",
}
