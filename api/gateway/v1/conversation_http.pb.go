// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.32.0
// source: api/gateway/v1/conversation.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "universal/api/ai/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationConversationArchiveConversation = "/api.universal.v1.Conversation/ArchiveConversation"
const OperationConversationClearConversationHistory = "/api.universal.v1.Conversation/ClearConversationHistory"
const OperationConversationCreateConversation = "/api.universal.v1.Conversation/CreateConversation"
const OperationConversationDeleteConversation = "/api.universal.v1.Conversation/DeleteConversation"
const OperationConversationDeleteMessage = "/api.universal.v1.Conversation/DeleteMessage"
const OperationConversationExportConversation = "/api.universal.v1.Conversation/ExportConversation"
const OperationConversationGetConversation = "/api.universal.v1.Conversation/GetConversation"
const OperationConversationGetConversationContext = "/api.universal.v1.Conversation/GetConversationContext"
const OperationConversationGetConversationMemory = "/api.universal.v1.Conversation/GetConversationMemory"
const OperationConversationGetConversationStats = "/api.universal.v1.Conversation/GetConversationStats"
const OperationConversationGetMessages = "/api.universal.v1.Conversation/GetMessages"
const OperationConversationImportConversation = "/api.universal.v1.Conversation/ImportConversation"
const OperationConversationListConversations = "/api.universal.v1.Conversation/ListConversations"
const OperationConversationRegenerateMessage = "/api.universal.v1.Conversation/RegenerateMessage"
const OperationConversationRestoreConversation = "/api.universal.v1.Conversation/RestoreConversation"
const OperationConversationSendMessage = "/api.universal.v1.Conversation/SendMessage"
const OperationConversationSetConversationMemory = "/api.universal.v1.Conversation/SetConversationMemory"
const OperationConversationSummarizeConversation = "/api.universal.v1.Conversation/SummarizeConversation"
const OperationConversationUpdateConversation = "/api.universal.v1.Conversation/UpdateConversation"
const OperationConversationUpdateConversationContext = "/api.universal.v1.Conversation/UpdateConversationContext"

type ConversationHTTPServer interface {
	// ArchiveConversation ArchiveConversation 归档对话
	ArchiveConversation(context.Context, *v1.ArchiveConversationRequest) (*v1.ArchiveConversationReply, error)
	// ClearConversationHistory ClearConversationHistory 清空对话历史
	ClearConversationHistory(context.Context, *v1.ClearConversationHistoryRequest) (*v1.ClearConversationHistoryReply, error)
	// CreateConversation CreateConversation 创建新的对话会话
	CreateConversation(context.Context, *v1.CreateConversationRequest) (*v1.CreateConversationReply, error)
	// DeleteConversation DeleteConversation 删除指定的对话
	DeleteConversation(context.Context, *v1.DeleteConversationRequest) (*v1.DeleteConversationReply, error)
	// DeleteMessage DeleteMessage 删除指定消息
	DeleteMessage(context.Context, *v1.DeleteMessageRequest) (*v1.DeleteMessageReply, error)
	// ExportConversation ExportConversation 导出对话数据
	ExportConversation(context.Context, *v1.ExportConversationRequest) (*v1.ExportConversationReply, error)
	// GetConversation GetConversation 获取指定对话的详细信息
	GetConversation(context.Context, *v1.GetConversationRequest) (*v1.GetConversationReply, error)
	// GetConversationContext GetConversationContext 获取对话上下文信息
	GetConversationContext(context.Context, *v1.GetConversationContextRequest) (*v1.GetConversationContextReply, error)
	// GetConversationMemory GetConversationMemory 获取对话记忆
	GetConversationMemory(context.Context, *v1.GetConversationMemoryRequest) (*v1.GetConversationMemoryReply, error)
	// GetConversationStats GetConversationStats 获取对话统计信息
	GetConversationStats(context.Context, *v1.GetConversationStatsRequest) (*v1.GetConversationStatsReply, error)
	// GetMessages GetMessages 获取对话的消息历史
	GetMessages(context.Context, *v1.GetMessagesRequest) (*v1.GetMessagesReply, error)
	// ImportConversation ImportConversation 导入对话数据
	ImportConversation(context.Context, *v1.ImportConversationRequest) (*v1.ImportConversationReply, error)
	// ListConversations ListConversations 获取用户的对话列表
	ListConversations(context.Context, *v1.ListConversationsRequest) (*v1.ListConversationsReply, error)
	// RegenerateMessage RegenerateMessage 重新生成AI回复
	RegenerateMessage(context.Context, *v1.RegenerateMessageRequest) (*v1.RegenerateMessageReply, error)
	// RestoreConversation RestoreConversation 恢复已删除的对话
	RestoreConversation(context.Context, *v1.RestoreConversationRequest) (*v1.RestoreConversationReply, error)
	// SendMessage SendMessage 向指定对话发送消息并获取AI回复
	SendMessage(context.Context, *v1.SendMessageRequest) (*v1.SendMessageReply, error)
	// SetConversationMemory SetConversationMemory 设置对话记忆
	SetConversationMemory(context.Context, *v1.SetConversationMemoryRequest) (*v1.SetConversationMemoryReply, error)
	// SummarizeConversation SummarizeConversation 总结对话内容
	SummarizeConversation(context.Context, *v1.SummarizeConversationRequest) (*v1.SummarizeConversationReply, error)
	// UpdateConversation UpdateConversation 更新对话的配置信息
	UpdateConversation(context.Context, *v1.UpdateConversationRequest) (*v1.UpdateConversationReply, error)
	// UpdateConversationContext UpdateConversationContext 更新对话上下文
	UpdateConversationContext(context.Context, *v1.UpdateConversationContextRequest) (*v1.UpdateConversationContextReply, error)
}

func RegisterConversationHTTPServer(s *http.Server, srv ConversationHTTPServer) {
	r := s.Route("/")
	r.POST("/api/ai/v1/conversations", _Conversation_CreateConversation0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/conversations/{id}", _Conversation_GetConversation0_HTTP_Handler(srv))
	r.PUT("/api/ai/v1/conversations/{id}", _Conversation_UpdateConversation0_HTTP_Handler(srv))
	r.DELETE("/api/ai/v1/conversations/{id}", _Conversation_DeleteConversation0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/users/{user_id}/conversations", _Conversation_ListConversations0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/conversations/{id}/archive", _Conversation_ArchiveConversation0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/conversations/{id}/restore", _Conversation_RestoreConversation0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/conversations/{conversation_id}/messages", _Conversation_SendMessage0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/conversations/{conversation_id}/messages", _Conversation_GetMessages0_HTTP_Handler(srv))
	r.DELETE("/api/ai/v1/messages", _Conversation_DeleteMessage0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/messages/{message_id}/regenerate", _Conversation_RegenerateMessage0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/conversations/{conversation_id}/context", _Conversation_GetConversationContext0_HTTP_Handler(srv))
	r.PUT("/api/ai/v1/conversations/{conversation_id}/context", _Conversation_UpdateConversationContext0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/conversations/{conversation_id}/summarize", _Conversation_SummarizeConversation0_HTTP_Handler(srv))
	r.DELETE("/api/ai/v1/conversations/{conversation_id}/history", _Conversation_ClearConversationHistory0_HTTP_Handler(srv))
	r.PUT("/api/ai/v1/conversations/{conversation_id}/memory", _Conversation_SetConversationMemory0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/conversations/{conversation_id}/memory", _Conversation_GetConversationMemory0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/conversations/{conversation_id}/stats", _Conversation_GetConversationStats0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/conversations/{conversation_id}/export", _Conversation_ExportConversation0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/users/{user_id}/conversations/import", _Conversation_ImportConversation0_HTTP_Handler(srv))
}

func _Conversation_CreateConversation0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.CreateConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationCreateConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateConversation(ctx, req.(*v1.CreateConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.CreateConversationReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_GetConversation0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetConversationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationGetConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConversation(ctx, req.(*v1.GetConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetConversationReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_UpdateConversation0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdateConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationUpdateConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateConversation(ctx, req.(*v1.UpdateConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateConversationReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_DeleteConversation0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteConversationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationDeleteConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteConversation(ctx, req.(*v1.DeleteConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteConversationReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_ListConversations0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ListConversationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationListConversations)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListConversations(ctx, req.(*v1.ListConversationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ListConversationsReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_ArchiveConversation0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ArchiveConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationArchiveConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ArchiveConversation(ctx, req.(*v1.ArchiveConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ArchiveConversationReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_RestoreConversation0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.RestoreConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationRestoreConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RestoreConversation(ctx, req.(*v1.RestoreConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.RestoreConversationReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_SendMessage0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SendMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationSendMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendMessage(ctx, req.(*v1.SendMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.SendMessageReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_GetMessages0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetMessagesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationGetMessages)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMessages(ctx, req.(*v1.GetMessagesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetMessagesReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_DeleteMessage0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.DeleteMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationDeleteMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteMessage(ctx, req.(*v1.DeleteMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.DeleteMessageReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_RegenerateMessage0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.RegenerateMessageRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationRegenerateMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RegenerateMessage(ctx, req.(*v1.RegenerateMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.RegenerateMessageReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_GetConversationContext0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetConversationContextRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationGetConversationContext)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConversationContext(ctx, req.(*v1.GetConversationContextRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetConversationContextReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_UpdateConversationContext0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.UpdateConversationContextRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationUpdateConversationContext)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateConversationContext(ctx, req.(*v1.UpdateConversationContextRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.UpdateConversationContextReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_SummarizeConversation0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SummarizeConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationSummarizeConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SummarizeConversation(ctx, req.(*v1.SummarizeConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.SummarizeConversationReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_ClearConversationHistory0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ClearConversationHistoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationClearConversationHistory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ClearConversationHistory(ctx, req.(*v1.ClearConversationHistoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ClearConversationHistoryReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_SetConversationMemory0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.SetConversationMemoryRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationSetConversationMemory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetConversationMemory(ctx, req.(*v1.SetConversationMemoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.SetConversationMemoryReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_GetConversationMemory0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetConversationMemoryRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationGetConversationMemory)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConversationMemory(ctx, req.(*v1.GetConversationMemoryRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetConversationMemoryReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_GetConversationStats0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetConversationStatsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationGetConversationStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConversationStats(ctx, req.(*v1.GetConversationStatsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetConversationStatsReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_ExportConversation0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ExportConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationExportConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExportConversation(ctx, req.(*v1.ExportConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ExportConversationReply)
		return ctx.Result(200, reply)
	}
}

func _Conversation_ImportConversation0_HTTP_Handler(srv ConversationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.ImportConversationRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationConversationImportConversation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ImportConversation(ctx, req.(*v1.ImportConversationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.ImportConversationReply)
		return ctx.Result(200, reply)
	}
}

type ConversationHTTPClient interface {
	ArchiveConversation(ctx context.Context, req *v1.ArchiveConversationRequest, opts ...http.CallOption) (rsp *v1.ArchiveConversationReply, err error)
	ClearConversationHistory(ctx context.Context, req *v1.ClearConversationHistoryRequest, opts ...http.CallOption) (rsp *v1.ClearConversationHistoryReply, err error)
	CreateConversation(ctx context.Context, req *v1.CreateConversationRequest, opts ...http.CallOption) (rsp *v1.CreateConversationReply, err error)
	DeleteConversation(ctx context.Context, req *v1.DeleteConversationRequest, opts ...http.CallOption) (rsp *v1.DeleteConversationReply, err error)
	DeleteMessage(ctx context.Context, req *v1.DeleteMessageRequest, opts ...http.CallOption) (rsp *v1.DeleteMessageReply, err error)
	ExportConversation(ctx context.Context, req *v1.ExportConversationRequest, opts ...http.CallOption) (rsp *v1.ExportConversationReply, err error)
	GetConversation(ctx context.Context, req *v1.GetConversationRequest, opts ...http.CallOption) (rsp *v1.GetConversationReply, err error)
	GetConversationContext(ctx context.Context, req *v1.GetConversationContextRequest, opts ...http.CallOption) (rsp *v1.GetConversationContextReply, err error)
	GetConversationMemory(ctx context.Context, req *v1.GetConversationMemoryRequest, opts ...http.CallOption) (rsp *v1.GetConversationMemoryReply, err error)
	GetConversationStats(ctx context.Context, req *v1.GetConversationStatsRequest, opts ...http.CallOption) (rsp *v1.GetConversationStatsReply, err error)
	GetMessages(ctx context.Context, req *v1.GetMessagesRequest, opts ...http.CallOption) (rsp *v1.GetMessagesReply, err error)
	ImportConversation(ctx context.Context, req *v1.ImportConversationRequest, opts ...http.CallOption) (rsp *v1.ImportConversationReply, err error)
	ListConversations(ctx context.Context, req *v1.ListConversationsRequest, opts ...http.CallOption) (rsp *v1.ListConversationsReply, err error)
	RegenerateMessage(ctx context.Context, req *v1.RegenerateMessageRequest, opts ...http.CallOption) (rsp *v1.RegenerateMessageReply, err error)
	RestoreConversation(ctx context.Context, req *v1.RestoreConversationRequest, opts ...http.CallOption) (rsp *v1.RestoreConversationReply, err error)
	SendMessage(ctx context.Context, req *v1.SendMessageRequest, opts ...http.CallOption) (rsp *v1.SendMessageReply, err error)
	SetConversationMemory(ctx context.Context, req *v1.SetConversationMemoryRequest, opts ...http.CallOption) (rsp *v1.SetConversationMemoryReply, err error)
	SummarizeConversation(ctx context.Context, req *v1.SummarizeConversationRequest, opts ...http.CallOption) (rsp *v1.SummarizeConversationReply, err error)
	UpdateConversation(ctx context.Context, req *v1.UpdateConversationRequest, opts ...http.CallOption) (rsp *v1.UpdateConversationReply, err error)
	UpdateConversationContext(ctx context.Context, req *v1.UpdateConversationContextRequest, opts ...http.CallOption) (rsp *v1.UpdateConversationContextReply, err error)
}

type ConversationHTTPClientImpl struct {
	cc *http.Client
}

func NewConversationHTTPClient(client *http.Client) ConversationHTTPClient {
	return &ConversationHTTPClientImpl{client}
}

func (c *ConversationHTTPClientImpl) ArchiveConversation(ctx context.Context, in *v1.ArchiveConversationRequest, opts ...http.CallOption) (*v1.ArchiveConversationReply, error) {
	var out v1.ArchiveConversationReply
	pattern := "/api/ai/v1/conversations/{id}/archive"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationArchiveConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) ClearConversationHistory(ctx context.Context, in *v1.ClearConversationHistoryRequest, opts ...http.CallOption) (*v1.ClearConversationHistoryReply, error) {
	var out v1.ClearConversationHistoryReply
	pattern := "/api/ai/v1/conversations/{conversation_id}/history"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConversationClearConversationHistory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) CreateConversation(ctx context.Context, in *v1.CreateConversationRequest, opts ...http.CallOption) (*v1.CreateConversationReply, error) {
	var out v1.CreateConversationReply
	pattern := "/api/ai/v1/conversations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationCreateConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) DeleteConversation(ctx context.Context, in *v1.DeleteConversationRequest, opts ...http.CallOption) (*v1.DeleteConversationReply, error) {
	var out v1.DeleteConversationReply
	pattern := "/api/ai/v1/conversations/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConversationDeleteConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) DeleteMessage(ctx context.Context, in *v1.DeleteMessageRequest, opts ...http.CallOption) (*v1.DeleteMessageReply, error) {
	var out v1.DeleteMessageReply
	pattern := "/api/ai/v1/messages"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConversationDeleteMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) ExportConversation(ctx context.Context, in *v1.ExportConversationRequest, opts ...http.CallOption) (*v1.ExportConversationReply, error) {
	var out v1.ExportConversationReply
	pattern := "/api/ai/v1/conversations/{conversation_id}/export"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationExportConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) GetConversation(ctx context.Context, in *v1.GetConversationRequest, opts ...http.CallOption) (*v1.GetConversationReply, error) {
	var out v1.GetConversationReply
	pattern := "/api/ai/v1/conversations/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConversationGetConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) GetConversationContext(ctx context.Context, in *v1.GetConversationContextRequest, opts ...http.CallOption) (*v1.GetConversationContextReply, error) {
	var out v1.GetConversationContextReply
	pattern := "/api/ai/v1/conversations/{conversation_id}/context"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConversationGetConversationContext))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) GetConversationMemory(ctx context.Context, in *v1.GetConversationMemoryRequest, opts ...http.CallOption) (*v1.GetConversationMemoryReply, error) {
	var out v1.GetConversationMemoryReply
	pattern := "/api/ai/v1/conversations/{conversation_id}/memory"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConversationGetConversationMemory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) GetConversationStats(ctx context.Context, in *v1.GetConversationStatsRequest, opts ...http.CallOption) (*v1.GetConversationStatsReply, error) {
	var out v1.GetConversationStatsReply
	pattern := "/api/ai/v1/conversations/{conversation_id}/stats"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConversationGetConversationStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) GetMessages(ctx context.Context, in *v1.GetMessagesRequest, opts ...http.CallOption) (*v1.GetMessagesReply, error) {
	var out v1.GetMessagesReply
	pattern := "/api/ai/v1/conversations/{conversation_id}/messages"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConversationGetMessages))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) ImportConversation(ctx context.Context, in *v1.ImportConversationRequest, opts ...http.CallOption) (*v1.ImportConversationReply, error) {
	var out v1.ImportConversationReply
	pattern := "/api/ai/v1/users/{user_id}/conversations/import"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationImportConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) ListConversations(ctx context.Context, in *v1.ListConversationsRequest, opts ...http.CallOption) (*v1.ListConversationsReply, error) {
	var out v1.ListConversationsReply
	pattern := "/api/ai/v1/users/{user_id}/conversations"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationConversationListConversations))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) RegenerateMessage(ctx context.Context, in *v1.RegenerateMessageRequest, opts ...http.CallOption) (*v1.RegenerateMessageReply, error) {
	var out v1.RegenerateMessageReply
	pattern := "/api/ai/v1/messages/{message_id}/regenerate"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationRegenerateMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) RestoreConversation(ctx context.Context, in *v1.RestoreConversationRequest, opts ...http.CallOption) (*v1.RestoreConversationReply, error) {
	var out v1.RestoreConversationReply
	pattern := "/api/ai/v1/conversations/{id}/restore"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationRestoreConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) SendMessage(ctx context.Context, in *v1.SendMessageRequest, opts ...http.CallOption) (*v1.SendMessageReply, error) {
	var out v1.SendMessageReply
	pattern := "/api/ai/v1/conversations/{conversation_id}/messages"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationSendMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) SetConversationMemory(ctx context.Context, in *v1.SetConversationMemoryRequest, opts ...http.CallOption) (*v1.SetConversationMemoryReply, error) {
	var out v1.SetConversationMemoryReply
	pattern := "/api/ai/v1/conversations/{conversation_id}/memory"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationSetConversationMemory))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) SummarizeConversation(ctx context.Context, in *v1.SummarizeConversationRequest, opts ...http.CallOption) (*v1.SummarizeConversationReply, error) {
	var out v1.SummarizeConversationReply
	pattern := "/api/ai/v1/conversations/{conversation_id}/summarize"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationSummarizeConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) UpdateConversation(ctx context.Context, in *v1.UpdateConversationRequest, opts ...http.CallOption) (*v1.UpdateConversationReply, error) {
	var out v1.UpdateConversationReply
	pattern := "/api/ai/v1/conversations/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationUpdateConversation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ConversationHTTPClientImpl) UpdateConversationContext(ctx context.Context, in *v1.UpdateConversationContextRequest, opts ...http.CallOption) (*v1.UpdateConversationContextReply, error) {
	var out v1.UpdateConversationContextReply
	pattern := "/api/ai/v1/conversations/{conversation_id}/context"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationConversationUpdateConversationContext))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
