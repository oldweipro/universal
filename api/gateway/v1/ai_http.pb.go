// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.32.0
// source: api/gateway/v1/ai.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	v1 "universal/api/ai/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAiGetConversationAnalytics = "/api.universal.v1.Ai/GetConversationAnalytics"
const OperationAiGetConversationTrends = "/api.universal.v1.Ai/GetConversationTrends"
const OperationAiGetModelPerformanceStats = "/api.universal.v1.Ai/GetModelPerformanceStats"
const OperationAiGetSystemOverview = "/api.universal.v1.Ai/GetSystemOverview"
const OperationAiGetTopicAnalysis = "/api.universal.v1.Ai/GetTopicAnalysis"
const OperationAiGetUserUsageStats = "/api.universal.v1.Ai/GetUserUsageStats"

type AiHTTPServer interface {
	// GetConversationAnalytics GetConversationAnalytics 获取对话统计分析数据
	GetConversationAnalytics(context.Context, *v1.GetConversationAnalyticsRequest) (*v1.GetConversationAnalyticsReply, error)
	// GetConversationTrends GetConversationTrends 获取对话趋势分析
	GetConversationTrends(context.Context, *v1.GetConversationTrendsRequest) (*v1.GetConversationTrendsReply, error)
	// GetModelPerformanceStats GetModelPerformanceStats 获取模型性能统计
	GetModelPerformanceStats(context.Context, *v1.GetModelPerformanceStatsRequest) (*v1.GetModelPerformanceStatsReply, error)
	// GetSystemOverview GetSystemOverview 获取系统总览统计
	GetSystemOverview(context.Context, *v1.GetSystemOverviewRequest) (*v1.GetSystemOverviewReply, error)
	// GetTopicAnalysis GetTopicAnalysis 获取话题分析
	GetTopicAnalysis(context.Context, *v1.GetTopicAnalysisRequest) (*v1.GetTopicAnalysisReply, error)
	// GetUserUsageStats GetUserUsageStats 获取用户使用统计
	GetUserUsageStats(context.Context, *v1.GetUserUsageStatsRequest) (*v1.GetUserUsageStatsReply, error)
}

func RegisterAiHTTPServer(s *http.Server, srv AiHTTPServer) {
	r := s.Route("/")
	r.POST("/api/ai/v1/analytics/conversations", _Ai_GetConversationAnalytics0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/analytics/usage/users", _Ai_GetUserUsageStats0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/analytics/models/performance", _Ai_GetModelPerformanceStats0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/analytics/conversations/trends", _Ai_GetConversationTrends0_HTTP_Handler(srv))
	r.POST("/api/ai/v1/analytics/topics", _Ai_GetTopicAnalysis0_HTTP_Handler(srv))
	r.GET("/api/ai/v1/analytics/system/overview", _Ai_GetSystemOverview0_HTTP_Handler(srv))
}

func _Ai_GetConversationAnalytics0_HTTP_Handler(srv AiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetConversationAnalyticsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAiGetConversationAnalytics)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConversationAnalytics(ctx, req.(*v1.GetConversationAnalyticsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetConversationAnalyticsReply)
		return ctx.Result(200, reply)
	}
}

func _Ai_GetUserUsageStats0_HTTP_Handler(srv AiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetUserUsageStatsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAiGetUserUsageStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserUsageStats(ctx, req.(*v1.GetUserUsageStatsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetUserUsageStatsReply)
		return ctx.Result(200, reply)
	}
}

func _Ai_GetModelPerformanceStats0_HTTP_Handler(srv AiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetModelPerformanceStatsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAiGetModelPerformanceStats)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetModelPerformanceStats(ctx, req.(*v1.GetModelPerformanceStatsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetModelPerformanceStatsReply)
		return ctx.Result(200, reply)
	}
}

func _Ai_GetConversationTrends0_HTTP_Handler(srv AiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetConversationTrendsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAiGetConversationTrends)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConversationTrends(ctx, req.(*v1.GetConversationTrendsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetConversationTrendsReply)
		return ctx.Result(200, reply)
	}
}

func _Ai_GetTopicAnalysis0_HTTP_Handler(srv AiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetTopicAnalysisRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAiGetTopicAnalysis)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTopicAnalysis(ctx, req.(*v1.GetTopicAnalysisRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetTopicAnalysisReply)
		return ctx.Result(200, reply)
	}
}

func _Ai_GetSystemOverview0_HTTP_Handler(srv AiHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in v1.GetSystemOverviewRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAiGetSystemOverview)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSystemOverview(ctx, req.(*v1.GetSystemOverviewRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*v1.GetSystemOverviewReply)
		return ctx.Result(200, reply)
	}
}

type AiHTTPClient interface {
	GetConversationAnalytics(ctx context.Context, req *v1.GetConversationAnalyticsRequest, opts ...http.CallOption) (rsp *v1.GetConversationAnalyticsReply, err error)
	GetConversationTrends(ctx context.Context, req *v1.GetConversationTrendsRequest, opts ...http.CallOption) (rsp *v1.GetConversationTrendsReply, err error)
	GetModelPerformanceStats(ctx context.Context, req *v1.GetModelPerformanceStatsRequest, opts ...http.CallOption) (rsp *v1.GetModelPerformanceStatsReply, err error)
	GetSystemOverview(ctx context.Context, req *v1.GetSystemOverviewRequest, opts ...http.CallOption) (rsp *v1.GetSystemOverviewReply, err error)
	GetTopicAnalysis(ctx context.Context, req *v1.GetTopicAnalysisRequest, opts ...http.CallOption) (rsp *v1.GetTopicAnalysisReply, err error)
	GetUserUsageStats(ctx context.Context, req *v1.GetUserUsageStatsRequest, opts ...http.CallOption) (rsp *v1.GetUserUsageStatsReply, err error)
}

type AiHTTPClientImpl struct {
	cc *http.Client
}

func NewAiHTTPClient(client *http.Client) AiHTTPClient {
	return &AiHTTPClientImpl{client}
}

func (c *AiHTTPClientImpl) GetConversationAnalytics(ctx context.Context, in *v1.GetConversationAnalyticsRequest, opts ...http.CallOption) (*v1.GetConversationAnalyticsReply, error) {
	var out v1.GetConversationAnalyticsReply
	pattern := "/api/ai/v1/analytics/conversations"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAiGetConversationAnalytics))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AiHTTPClientImpl) GetConversationTrends(ctx context.Context, in *v1.GetConversationTrendsRequest, opts ...http.CallOption) (*v1.GetConversationTrendsReply, error) {
	var out v1.GetConversationTrendsReply
	pattern := "/api/ai/v1/analytics/conversations/trends"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAiGetConversationTrends))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AiHTTPClientImpl) GetModelPerformanceStats(ctx context.Context, in *v1.GetModelPerformanceStatsRequest, opts ...http.CallOption) (*v1.GetModelPerformanceStatsReply, error) {
	var out v1.GetModelPerformanceStatsReply
	pattern := "/api/ai/v1/analytics/models/performance"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAiGetModelPerformanceStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AiHTTPClientImpl) GetSystemOverview(ctx context.Context, in *v1.GetSystemOverviewRequest, opts ...http.CallOption) (*v1.GetSystemOverviewReply, error) {
	var out v1.GetSystemOverviewReply
	pattern := "/api/ai/v1/analytics/system/overview"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAiGetSystemOverview))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AiHTTPClientImpl) GetTopicAnalysis(ctx context.Context, in *v1.GetTopicAnalysisRequest, opts ...http.CallOption) (*v1.GetTopicAnalysisReply, error) {
	var out v1.GetTopicAnalysisReply
	pattern := "/api/ai/v1/analytics/topics"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAiGetTopicAnalysis))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *AiHTTPClientImpl) GetUserUsageStats(ctx context.Context, in *v1.GetUserUsageStatsRequest, opts ...http.CallOption) (*v1.GetUserUsageStatsReply, error) {
	var out v1.GetUserUsageStatsReply
	pattern := "/api/ai/v1/analytics/usage/users"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAiGetUserUsageStats))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
